module.exports.config = {
    name: "taokieuchu",
    version: "2.0.0",
    hasPermssion: 0,
    credits: "Nguy√™n Blue ‚Ä¢ DongDev[Convert] & MySelf",
    description: "Chuy·ªÉn font ch·ªØ - Reply ƒë·ªÉ d√πng",
    commandCategory: "Ti·ªán √≠ch",
    usages: "taokieuchu",
    cooldowns: 3
};

const { unsendMessage: un } = global.client.api;

const fontMaps = {
    "double": {
        map: {
            '0': 'ùüò', '1': 'ùüô', '2': 'ùüö', '3': 'ùüõ', '4': 'ùüú', '5': 'ùüù',
            '6': 'ùüû', '7': 'ùüü', '8': 'ùü†', '9': 'ùü°',
            'A': 'ùî∏', 'B': 'ùîπ', 'C': '‚ÑÇ', 'D': 'ùîª', 'E': 'ùîº', 'F': 'ùîΩ', 'G': 'ùîæ', 'H': '‚Ñç',
            'I': 'ùïÄ', 'J': 'ùïÅ', 'K': 'ùïÇ', 'L': 'ùïÉ', 'M': 'ùïÑ', 'N': '‚Ñï', 'O': 'ùïÜ', 'P': '‚Ñô',
            'Q': '‚Ñö', 'R': '‚Ñù', 'S': 'ùïä', 'T': 'ùïã', 'U': 'ùïå', 'V': 'ùïç', 'W': 'ùïé', 'X': 'ùïè',
            'Y': 'ùïê', 'Z': '‚Ñ§',
            'a': 'ùïí', 'b': 'ùïì', 'c': 'ùïî', 'd': 'ùïï', 'e': 'ùïñ', 'f': 'ùïó', 'g': 'ùïò', 'h': 'ùïô',
            'i': 'ùïö', 'j': 'ùïõ', 'k': 'ùïú', 'l': 'ùïù', 'm': 'ùïû', 'n': 'ùïü', 'o': 'ùï†', 'p': 'ùï°',
            'q': 'ùï¢', 'r': 'ùï£', 's': 'ùï§', 't': 'ùï•', 'u': 'ùï¶', 'v': 'ùïß', 'w': 'ùï®', 'x': 'ùï©',
            'y': 'ùï™', 'z': 'ùï´'
        }
    },
    "bold": {
        map: {
            '0': 'ùü¨', '1': 'ùü≠', '2': 'ùüÆ', '3': 'ùüØ', '4': 'ùü∞', '5': 'ùü±',
            '6': 'ùü≤', '7': 'ùü≥', '8': 'ùü¥', '9': 'ùüµ',
            'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
            'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
            'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
            'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
            'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
            'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
            'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
            'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
        }
    }
};

function convertText(text, fontType) {
    if (!text || !fontMaps[fontType]) return text;
    let result = '';
    for (let char of text) {
        result += fontMaps[fontType].map[char] || char;
    }
    return result;
}

module.exports.run = async function ({ api, event }) {
    const { sendMessage: send } = api;
    const { threadID: tid, messageID: mid, senderID: sid } = event;

    const menu = `üé® CHUY·ªÇN FONT CH·ªÆ\n\n` +
        `1Ô∏è‚É£ Font ki·ªÉu (123 ‚Üí ùüôùüöùüõ)\n` +
        `2Ô∏è‚É£ Font in ƒë·∫≠m (123 ‚Üí ùü≠ùüÆùüØ)\n\n` +
        `üí¨ Reply tin nh·∫Øn n√†y: 1 ho·∫∑c 2`;

    return send(menu, tid, (a, b) => {
        global.client.handleReply.push({ 
            name: this.config.name, 
            messageID: b.messageID, 
            author: sid, 
            case: 'select_font' 
        });
    }, mid);
};

module.exports.handleReply = async function ({ handleReply: $, api, event }) {
    const { sendMessage: send } = api;
    const { threadID: tid, messageID: mid, senderID: sid, args } = event;

    if (sid != $.author) {
        const msg = `‚õî b·∫°n kh√¥ng ph·∫£i ng∆∞·ªùi d√πng l·ªánh `;
        return send(msg, tid, mid);
    }
    
    // S·ª≠ d·ª•ng switch case ƒë·ªÉ x·ª≠ l√Ω t·ª´ng b∆∞·ªõc
    switch ($.case) {
        case 'select_font': {
            const reply = args[0] || ''; // L·∫•y l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
            let fontType;
            if (reply === '1') {
                fontType = 'double';
            } else if (reply === '2') {
                fontType = 'bold';
            } else {
                return send('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng reply 1 ho·∫∑c 2.', tid, mid);
            }
            
            un($.messageID); // G·ª° tin nh·∫Øn menu
            
            const msg = `‚ú® Font ƒë√£ ch·ªçn!\n\nüìù B√¢y gi·ªù, h√£y reply tin nh·∫Øn n√†y v·ªõi text c·∫ßn chuy·ªÉn:`;
            return send(msg, tid, (a, b) => {
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: b.messageID,
                    author: sid,
                    case: 'convert_text',
                    fontType: fontType
                });
            }, mid);
        }
        
        case 'convert_text': {
            const reply = event.body.trim(); // L·∫•y to√†n b·ªô n·ªôi dung reply
            
            if (!reply) {
                return send('‚ùå Vui l√≤ng nh·∫≠p text c·∫ßn chuy·ªÉn ƒë·ªïi.', tid, mid);
            }

            un($.messageID); // G·ª° tin nh·∫Øn y√™u c·∫ßu nh·∫≠p text
            
            const converted = convertText(reply, $.fontType);
            const result = `K·∫øt qu·∫£ khi chuy·ªÉn l√†:\n${converted}`;
            
            return send(result, tid, mid);
        }
        
        default:
            break;
    }
};