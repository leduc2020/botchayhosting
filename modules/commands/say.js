/*
c√°ch l·∫•y apikey
B1: Truy c·∫≠p web 
https://elevenlabs.io
B2: nh·∫•p v√¥ signup v√† t·∫°o t√†i kho·∫£n ho·∫∑c ƒëƒÉng Nh·∫≠p
B3: b·∫•m v√†o avatar
B4: b·∫•m ch·ªçn API Keys
B5: Create API Keys
B6: ƒë·∫∑t ƒë·∫°i t√™n
B7: t√¨m ph·∫ßn t√™n l√† Text to Speech ch·ªçn No access -> Has access
B8: b·∫•m v√¥ create
B9: Copy apikey l·∫°i d√°n v√†o 
*/
// ‚ö†Ô∏è Thay API key c·ªßa b·∫°n t·∫°i ƒë√¢y
const apiKey = "APIKEY";
// d√°n apikey v√†o "APIKEY"; 
// l·ªói g√¨ th√¨ ib qua 
//                fb.com/pcoder090
const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

const VOICES = {
  "my": { id: "EXAVITQu4vr4xnSDxMaL", name: "M·ªπ Linh (n·ªØ)" },
  "duy": { id: "BUPPIXeDaJWBz696iXRS", name: "Duy (nam)" },
  "nga": { id: "ywBZEqUhld86Jeajq94o", name: "Ng√† (n·ªØ nh·∫π nh√†ng)" }
};
const voicemacdinh = "my"; 

module.exports.config = {
  name: "say",
  version: "2.6.0",
  hasPermssion: 0,
  credits: "Pcoder", // thay credit c√°i ƒë·ªãt m·∫π m√†y
  description: "TTS ElevenLabs (Flash v2.5) - h·ªó tr·ª£ nhi·ªÅu gi·ªçng ri√™ng cho t·ª´ng nh√≥m",
  commandCategory: "media",
  usages: "[text] | set <voice> | list",
  cooldowns: 5
};

module.exports.run = async function ({ api, event, args, Threads }) {
  const threadID = event.threadID;

  if (args[0] === "list") {
    const list = Object.entries(VOICES)
      .map(([code, v]) => `üëâ ${code} = ${v.name}`)
      .join("\n");
    return api.sendMessage(`üì¢ C√°c gi·ªçng c√≥ th·ªÉ ch·ªçn:\n${list}`, threadID, event.messageID);
  }

  if (args[0] === "set") {
    const voiceCode = args[1]?.toLowerCase();
    if (!VOICES[voiceCode])
      return api.sendMessage("‚ùå Gi·ªçng kh√¥ng h·ª£p l·ªá. D√πng: say list ƒë·ªÉ xem c√°c gi·ªçng!", threadID, event.messageID);

    const threadData = await Threads.getData(threadID) || {};
    threadData.voice_code = voiceCode;
    await Threads.setData(threadID, threadData);

    return api.sendMessage(`‚úÖ ƒê√£ ch·ªçn gi·ªçng: ${VOICES[voiceCode].name}`, threadID, event.messageID);
  }

  const text = event.type === "message_reply"
    ? event.messageReply.body
    : args.join(" ");

  if (!text)
    return api.sendMessage("‚ùå Nh·∫≠p n·ªôi dung ƒë·ªÉ ƒë·ªçc!", threadID, event.messageID);

  const voiceCode = (await Threads.getData(threadID))?.voice_code || voicemacdinh;
  const voice = VOICES[voiceCode];
  if (!voice) return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªçng ƒë√£ ch·ªçn!", threadID, event.messageID);

  const filePath = path.join(__dirname, "cache", `${threadID}_${event.senderID}.mp3`);

  try {
    const res = await axios({
      method: "POST",
      url: `https://api.elevenlabs.io/v1/text-to-speech/${voice.id}`,
      headers: {
        "xi-api-key": apiKey,
        "Content-Type": "application/json"
      },
      responseType: "arraybuffer",
      data: {
        text,
        model_id: "eleven_flash_v2_5",
        voice_settings: {
          stability: 0.3,
          similarity_boost: 0.9,
          style: 0.0,
          use_speaker_boost: true
        }
      }
    });

    fs.writeFileSync(filePath, res.data);

    return api.sendMessage({
      body: `üîä ƒê√£ ƒë·ªçc b·∫±ng gi·ªçng: ${voice.name}`,
      attachment: fs.createReadStream(filePath)
    }, threadID, () => fs.unlinkSync(filePath), event.messageID);

  } catch (err) {
    console.error("TTS error:", err?.response?.data || err.message);
    return api.sendMessage("‚ùå L·ªói khi t·∫°o gi·ªçng n√≥i. Ki·ªÉm tra l·∫°i API key ho·∫∑c voice ID!", threadID, event.messageID);
  }
};
