const fs = require("fs");
const axios = require("axios");
const moment = require("moment-timezone");
const path = require("path");

const KEY = [
    "hello", "hi", "hai", "ch√†o", "chao", "h√≠", "h√≠√≠", "h√¨", "h√¨√¨", "l√¥", "hii", "helo", "h√™ nh√¥",
    "xin ch√†o", "2", "helo", "h√™ nh√¥", "hi mn", "hello mn"
];

const DEFAULT_GREETINGS = {
    morning_early: [
        "Ch√∫c b·∫°n bu·ªïi s√°ng tr√†n ƒë·∫ßy nƒÉng l∆∞·ª£ng",
        "Ch√†o bu·ªïi s√°ng m·ªõi t·ªët l√†nh nh√©"
    ],
    morning: [
        "Ch√∫c b·∫°n bu·ªïi s√°ng vui v·∫ª"
    ],
    noon: [
        "Ch√∫c b·∫°n bu·ªïi tr∆∞a vui v·∫ª",
        "Ngh·ªâ tr∆∞a th·∫≠t ngon gi·∫•c nh√©"
    ],
    afternoon: [
        "Ch√∫c b·∫°n bu·ªïi chi·ªÅu vui v·∫ª",
        "Chi·ªÅu t√† r·ªìi, ngh·ªâ ng∆°i nh√©!"
    ],
    evening: [
        "Ch√∫c b·∫°n bu·ªïi t·ªëi vui v·∫ª"
    ],
    night: [
        "Khuya r·ªìi, ng·ªß ngon nh√©!",
        "Ch√∫c ng·ªß ngon nh√©"
    ]
};

const AUDIO_PATH = path.join(__dirname, "..", "..", "music", "hi.mp3");
let filePath;

module.exports.config = {
    name: "hi",
    version: "1.3.0",
    hasPermission: 0,
    credits: "TrungAnh",
    description: "Ch√†o h·ªèi t·ª± ƒë·ªông k√®m √¢m thanh v√† t√πy ch·ªânh c√¢u ch√†o",
    commandCategory: "Ti·ªán √≠ch",
    usages: "[on/off/setaudio/add/remove/list]",
    cooldowns: 5
};

module.exports.onLoad = () => {
    const dir = path.join(__dirname, "data");
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir);
    }
    
    filePath = path.join(dir, "hi.json");
    if (!fs.existsSync(filePath)) {
        const defaultData = {
            global: {
                customGreetings: {}
            }
        };
        fs.writeFileSync(filePath, JSON.stringify(defaultData, null, 2));
    }
};

function getGreeting(hours, threadID) {
    let session;
    let greetings;
    let savedData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
    let customGreetings = savedData.global.customGreetings[hours] || [];

    if (hours >= 0 && hours <= 4) {
        session = "ƒë√™m";
        greetings = [...DEFAULT_GREETINGS.night, ...customGreetings];
    } else if (hours > 4 && hours <= 7) {
        session = "s√°ng s·ªõm";
        greetings = [...DEFAULT_GREETINGS.morning_early, ...customGreetings];
    } else if (hours > 7 && hours <= 11) {
        session = "s√°ng";
        greetings = [...DEFAULT_GREETINGS.morning, ...customGreetings];
    } else if (hours > 11 && hours <= 13) {
        session = "tr∆∞a";
        greetings = [...DEFAULT_GREETINGS.noon, ...customGreetings];
    } else if (hours > 13 && hours <= 17) {
        session = "chi·ªÅu";
        greetings = [...DEFAULT_GREETINGS.afternoon, ...customGreetings];
    } else if (hours > 17 && hours <= 21) {
        session = "t·ªëi";
        greetings = [...DEFAULT_GREETINGS.evening, ...customGreetings];
    } else {
        session = "ƒë√™m";
        greetings = [...DEFAULT_GREETINGS.night, ...customGreetings];
    }

    return {
        session,
        greeting: greetings[Math.floor(Math.random() * greetings.length)]
    };
}

module.exports.handleEvent = async function({ event, api, Users }) {
    const { threadID, messageID, body } = event;

    try {
        let savedData = {};
        try {
            const jsonData = fs.readFileSync(filePath, "utf-8");
            savedData = JSON.parse(jsonData);
        } catch (err) {
            console.error("L·ªói ƒë·ªçc file hi.json:", err);
            savedData = {};
        }

        if (typeof savedData[threadID]?.hi === "undefined" || savedData[threadID].hi === true) {
            if (body && KEY.includes(body.toLowerCase())) {
                const hours = parseInt(moment.tz('Asia/Ho_Chi_Minh').format('HH'));
                const { session, greeting } = getGreeting(hours, threadID);

                let name = await Users.getNameUser(event.senderID);
                let mentions = [{ tag: name, id: event.senderID }];

                let msg = {
                    body: `Xin ch√†o ${name}, ${greeting} ‚ù§Ô∏è`,
                    mentions,
                    attachment: fs.existsSync(AUDIO_PATH) ? fs.createReadStream(AUDIO_PATH) : null
                };

                api.sendMessage(msg, threadID, messageID);
            }
        }
    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω tin nh·∫Øn ch√†o:", error);
    }
};

module.exports.run = async ({ event, api, args }) => {
    const { threadID, messageID } = event;

    try {
        let savedData = JSON.parse(fs.readFileSync(filePath, "utf-8"));
        if (!savedData.global) savedData.global = { customGreetings: {} };
        
        const command = (args[0] || "").toLowerCase();

        switch (command) {
            case "on":
                savedData[threadID] = { hi: true };
                api.sendMessage("‚òëÔ∏è ƒê√£ b·∫≠t ch·ª©c nƒÉng ch√†o!", threadID, messageID);
                break;
            
            case "off":
                savedData[threadID] = { hi: false };
                api.sendMessage("‚òëÔ∏è ƒê√£ t·∫Øt ch·ª©c nƒÉng ch√†o!", threadID, messageID);
                break;

            case "setaudio":
                if (!event.messageReply || !event.messageReply.attachments || !event.messageReply.attachments[0].url) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng reply m·ªôt file √¢m thanh ƒë·ªÉ c√†i ƒë·∫∑t!", threadID, messageID);
                }

                const dir = path.join(__dirname, "..", "..", "music");
                if (!fs.existsSync(dir)) {
                    fs.mkdirSync(dir, { recursive: true });
                }

                try {
                    const response = await axios.get(event.messageReply.attachments[0].url, { responseType: 'arraybuffer' });
                    fs.writeFileSync(AUDIO_PATH, Buffer.from(response.data));
                    api.sendMessage("‚úÖ ƒê√£ c√†i ƒë·∫∑t √¢m thanh ch√†o th√†nh c√¥ng!", threadID, messageID);
                } catch (e) {
                    api.sendMessage("‚ùå L·ªói khi t·∫£i file √¢m thanh!", threadID, messageID);
                }
                break;

            case "add":
                const hour = parseInt(args[1]);
                if (isNaN(hour) || hour < 0 || hour > 23) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p gi·ªù h·ª£p l·ªá (0-23)!", threadID, messageID);
                }
                const greeting = args.slice(2).join(" ");
                if (!greeting) {
                    return api.sendMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u ch√†o!", threadID, messageID);
                }
                
                if (!savedData.global.customGreetings[hour]) {
                    savedData.global.customGreetings[hour] = [];
                }
                savedData.global.customGreetings[hour].push(greeting);
                api.sendMessage(`‚úÖ ƒê√£ th√™m c√¢u ch√†o cho ${hour}h: ${greeting}`, threadID, messageID);
                break;

            case "remove":
                const hourToRemove = parseInt(args[1]);
                const index = parseInt(args[2]) - 1;
                
                if (isNaN(hourToRemove) || !savedData.global.customGreetings[hourToRemove]) {
                    return api.sendMessage("‚ö†Ô∏è Gi·ªù kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng c√≥ c√¢u ch√†o t√πy ch·ªânh!", threadID, messageID);
                }
                
                if (isNaN(index) || index < 0 || index >= savedData.global.customGreetings[hourToRemove].length) {
                    return api.sendMessage("‚ö†Ô∏è S·ªë th·ª© t·ª± c√¢u ch√†o kh√¥ng h·ª£p l·ªá!", threadID, messageID);
                }
                
                const removed = savedData.global.customGreetings[hourToRemove].splice(index, 1);
                api.sendMessage(`‚úÖ ƒê√£ x√≥a c√¢u ch√†o: ${removed[0]}`, threadID, messageID);
                break;

            case "list":
                const hour2 = parseInt(args[1]);
                if (isNaN(hour2) || hour2 < 0 || hour2 > 23) {
                    let msg = "üìù Danh s√°ch c√¢u ch√†o t√πy ch·ªânh:\n";
                    for (let h in savedData.global.customGreetings) {
                        if (savedData.global.customGreetings[h].length > 0) {
                            msg += `\n${h}h:\n`;
                            savedData.global.customGreetings[h].forEach((greeting, i) => {
                                msg += `${i + 1}. ${greeting}\n`;
                            });
                        }
                    }
                    api.sendMessage(msg, threadID, messageID);
                } else {
                    if (!savedData.global.customGreetings[hour2] || savedData.global.customGreetings[hour2].length === 0) {
                        api.sendMessage(`‚ùå Kh√¥ng c√≥ c√¢u ch√†o t√πy ch·ªânh n√†o cho ${hour2}h!`, threadID, messageID);
                    } else {
                        let msg = `üìù C√¢u ch√†o t√πy ch·ªânh cho ${hour2}h:\n`;
                        savedData.global.customGreetings[hour2].forEach((greeting, i) => {
                            msg += `${i + 1}. ${greeting}\n`;
                        });
                        api.sendMessage(msg, threadID, messageID);
                    }
                }
                break;

            default:
                api.sendMessage("‚ö†Ô∏è Vui l√≤ng s·ª≠ d·ª•ng:\n- hi on: B·∫≠t ch·ª©c nƒÉng\n- hi off: T·∫Øt ch·ª©c nƒÉng\n- hi setaudio: C√†i ƒë·∫∑t √¢m thanh (reply file)\n- hi add [gi·ªù] [c√¢u ch√†o]: Th√™m c√¢u ch√†o\n- hi remove [gi·ªù] [s·ªë th·ª© t·ª±]: X√≥a c√¢u ch√†o\n- hi list [gi·ªù]: Xem danh s√°ch c√¢u ch√†o", threadID, messageID);
                return;
        }

        fs.writeFileSync(filePath, JSON.stringify(savedData, null, 2));

    } catch (error) {
        console.error("L·ªói x·ª≠ l√Ω l·ªánh hi:", error);
        api.sendMessage("‚ùå ƒê√£ c√≥ l·ªói x·∫£y ra!", threadID, messageID);
    }
};