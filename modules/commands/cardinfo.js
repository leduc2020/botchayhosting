/**
 * Command cardinfo - T·∫°o th·∫ª th√¥ng tin ng∆∞·ªùi d√πng
 * 
 * Module n√†y t·∫°o ra m·ªôt th·∫ª th√¥ng tin ƒë·∫πp m·∫Øt cho ng∆∞·ªùi d√πng
 * hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n nh∆∞ t√™n, ID, ·∫£nh ƒë·∫°i di·ªán v√† c√°c th√¥ng s·ªë kh√°c
 * H·ªó tr·ª£ nhi·ªÅu lo·∫°i n·ªÅn kh√°c nhau (anime, g√°i, phong c·∫£nh)
 * 
 * @author TuanDev
 * @version 1.0
 */

module.exports.config = {
    name: "cardinfo",
    version: "1.0",
    hasPermssion: 0,
    credits: "TuanDev",
    description: "T·∫°o th·∫ª th√¥ng tin ng∆∞·ªùi d√πng v·ªõi nhi·ªÅu lo·∫°i n·ªÅn v√† m√†u vi·ªÅn t√πy ch·ªçn",
    commandCategory: "Th√¥ng Tin",
    usages: "S·ª≠ d·ª•ng l·ªánh v√† l√†m theo h∆∞·ªõng d·∫´n ƒë·ªÉ ch·ªçn n·ªÅn v√† m√†u vi·ªÅn",
    cooldowns: 5,
    dependencies: {
        "fs-extra": "",
        "axios": "",
        "canvas": "",
        "jimp": ""
    }
};

module.exports.handleReply = async function({ api, event, handleReply }) {
    const { threadID, senderID } = event;
    const userInput = event.body.trim();
    
    // Ki·ªÉm tra xem ng∆∞·ªùi reply c√≥ ph·∫£i l√† ng∆∞·ªùi ƒë√£ g·ªçi l·ªánh kh√¥ng
    if (senderID !== handleReply.author) return;
    
    // X·ª≠ l√Ω d·ª±a v√†o lo·∫°i reply
    switch (handleReply.type) {
        // Ng∆∞·ªùi d√πng ƒëang ch·ªçn n·ªÅn
        case "chooseBackground":
            const bgChoice = parseInt(userInput);
            if (bgChoice >= 1 && bgChoice <= 6) {
                // Chuy·ªÉn ƒë·ªïi l·ª±a ch·ªçn th√†nh lo·∫°i n·ªÅn
                const bgTypes = ["anime", "congnghe", "den", "cute", "love", "sexy"];
                const bgType = bgTypes[bgChoice - 1];
                
                // G·ª≠i menu ch·ªçn m√†u
                const colorMenu = "üé® CH·ªåN M√ÄU VI·ªÄN üé®\n" +
                    "1. ƒê·ªè üî¥\n" +
                    "2. Xanh d∆∞∆°ng üîµ\n" +
                    "3. L·ª•c üü¢\n" +
                    "4. V√†ng üü°\n" +
                    "5. T√≠m üü£\n" +
                    "6. H·ªìng üå∏\n" +
                    "7. Cam üü†\n" +
                    "8. ƒêen ‚ö´\n" +
                    "9. Tr·∫Øng ‚ö™\n" +
                    "10. T√≠m üíú\n" +
                    "11. B·∫°c üíé\n" +
                    "12. V√†ng üèÜ\n" +
					"13. Kh√¥ng m√†u\n" +
					"‚û§ Tr·∫£ l·ªùi s·ªë t∆∞∆°ng ·ª©ng";
                
                return api.sendMessage(colorMenu, threadID, (error, info) => {
                    if (error) return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i menu m√†u.", threadID);
                    
                    // L∆∞u l·∫°i th√¥ng tin trong handleReply
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: senderID,
                        type: "chooseColor",
                        bgType: bgType
                    });
                });
            } else {
                return api.sendMessage("‚ùå Vui l√≤ng ch·ªçn ƒë√∫ng s·ªë t·ª´ 1 ƒë·∫øn 3.", threadID);
            }
            break;
            
        // Ng∆∞·ªùi d√πng ƒëang ch·ªçn m√†u
        case "chooseColor":
            const colorChoice = parseInt(userInput);
            if (colorChoice >= 1 && colorChoice <= 13) {
                // Danh s√°ch m√†u vi·ªÅn
                const colors = [
                    "#f70000", // ƒê·ªè - 1
                    "#0073e6", // Xanh d∆∞∆°ng - 2
                    "#00a651", // L·ª•c - 3
                    "#ffcc00", // V√†ng - 4
                    "#9c27b0", // T√≠m - 5
                    "#e91e63", // H·ªìng - 6
                    "#ff5722", // Cam - 7
                    "#212121", // ƒêen - 8
                    "#ffffff", // Tr·∫Øng - 9
                    "#6a0dad", // T√≠m ƒë·∫≠m - 10
                    "#c0c0c0", // B·∫°c - 11
                    "#ffd700", // V√†ng kim - 12
					"#100000"  // Kh√¥ng m√†u -13
                ];
                
                const borderColor = colors[colorChoice - 1];
                
                // Th√¥ng b√°o ƒëang x·ª≠ l√Ω
                api.sendMessage(`‚è≥ ƒêang t·∫°o th·∫ª th√¥ng tin v·ªõi n·ªÅn ${handleReply.bgType} v√† m√†u vi·ªÅn ƒë√£ ch·ªçn...`, threadID);
                
                // T·∫°o th·∫ª th√¥ng tin
                createCard(api, event, handleReply.bgType, borderColor);
            } else {
                api.sendMessage("‚ùå Vui l√≤ng ch·ªçn ƒë√∫ng s·ªë t·ª´ 1 ƒë·∫øn 15.", threadID);
            }
            break;
    }
};

module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID, senderID } = event;
    
    // G·ª≠i menu ch·ªçn n·ªÅn
    const bgMenu = "CH·ªåN LO·∫†I N·ªÄN \n\n" +
        "Vui l√≤ng tr·∫£ l·ªùi tin nh·∫Øn n√†y v·ªõi s·ªë t∆∞∆°ng ·ª©ng:\n\n" +
        "1-N·ªÅn Anime\n" +
        "2-N·ªÅn c√¥ng ngh·ªá\n" +
		"3-N·ªÅn ƒëen nam t√≠nh\n" +
		"4-N·ªÅn d·ªÖ th∆∞∆°ng\n" +
		"5-N·ªÅn l√£ng m·∫°ng\n" +
        "6-N·ªÅn sexy girl\n\n" +
        "üëâ Tr·∫£ l·ªùi s·ªë ƒë·ªÉ ch·ªçn lo·∫°i n·ªÅn";
    
    return api.sendMessage(bgMenu, threadID, (error, info) => {
        if (error) return api.sendMessage("‚ùå ƒê√£ x·∫£y ra l·ªói khi g·ª≠i menu.", threadID, messageID);
        
        // L∆∞u v√†o global ƒë·ªÉ x·ª≠ l√Ω reply
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: senderID,
            type: "chooseBackground"
        });
    });
};

// H√†m t·∫°o th·∫ª th√¥ng tin
async function createCard(api, event, bgType, borderColor) {
    const fs = global.nodemodule["fs-extra"];
    const axios = global.nodemodule["axios"];
    const { threadID, senderID } = event;
    
    try {
        // X√°c ƒë·ªãnh ID ng∆∞·ªùi d√πng c·∫ßn l·∫•y th√¥ng tin
        let targetID = senderID;
        
        // ƒê·∫£m b·∫£o th∆∞ m·ª•c cache t·ªìn t·∫°i
        if (!fs.existsSync("/cache")) {
            fs.mkdirSync("/cache", { recursive: true });
        }
        
        // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API Facebook
        const userInfo = await api.getUserInfo(targetID);
        const user = userInfo[targetID];
        
        if (!user) {
            return api.sendMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.", threadID);
        }
        
        // L·∫•y th√¥ng tin thread n·∫øu ƒë√¢y l√† nh√≥m
        const threadInfo = await api.getThreadInfo(threadID);
        
        // C√°c th√¥ng tin c∆° b·∫£n
        const userName = user.name || "Kh√¥ng x√°c ƒë·ªãnh";
        const userGender = user.gender === "MALE" ? "Nam" : user.gender === "FEMALE" ? "N·ªØ" : "Kh√¥ng x√°c ƒë·ªãnh";
        const userBirthday = user.birthday || "Kh√¥ng x√°c ƒë·ªãnh";
        
        // T√¨m bi·ªát danh trong nh√≥m
        const nickname = threadInfo.nicknames && threadInfo.nicknames[targetID] || "Kh√¥ng c√≥";
        
        // T√≠nh to√°n vai tr√≤ trong nh√≥m
        let role = "Th√†nh vi√™n";
        if (threadInfo.adminIDs && threadInfo.adminIDs.some(item => item.id === targetID)) {
            role = "Qu·∫£n tr·ªã vi√™n";
        }
        if (targetID === api.getCurrentUserID()) {
            role = "BOT";
        }
        
        // Ch·ªçn ·∫£nh n·ªÅn d·ª±a tr√™n lo·∫°i n·ªÅn
        const bgImages = {
            anime: ["https://files.catbox.moe/9iq0h1.jpeg"],
			congnghe: ["https://files.catbox.moe/8yiftk.jpeg"],
			den: ["https://files.catbox.moe/93w2eq.jpeg"],
			cute: ["https://files.catbox.moe/vkil77.jpeg"],
			love: ["https://files.catbox.moe/0su28i.jpeg"],
            sexy: ["https://files.catbox.moe/xsvz99.jpeg"]
        };
		
	
        
        // L·∫•y ng·∫´u nhi√™n m·ªôt ·∫£nh t·ª´ lo·∫°i n·ªÅn ƒë√£ ch·ªçn
        const backgroundImages = bgImages[bgType] || bgImages.anime;
        const randomIndex = Math.floor(Math.random() * backgroundImages.length);
        const backgroundUrl = backgroundImages[randomIndex];
        
        // T·∫°o c√°c ƒë∆∞·ªùng d·∫´n file t·∫°m
        const random = Math.floor(Math.random() * 99999);
        const avatarPath = `/cache/avatar_${random}.png`;
        
        // T·∫£i avatar
        let avatarUrl = user.thumbSrc;
        if (!avatarUrl) {
            return api.sendMessage("‚ùå Kh√¥ng th·ªÉ l·∫•y ·∫£nh ƒë·∫°i di·ªán.", threadID);
        }
        
        // T·∫£i avatar
        const avatarResponse = await axios.get(avatarUrl, {
            responseType: "arraybuffer",
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)',
                'Referer': 'https://www.facebook.com/'
            }
        });
        
        // L∆∞u avatar v√†o cache
        fs.writeFileSync(avatarPath, Buffer.from(avatarResponse.data));
        
        // Ki·ªÉm tra canvas v√† jimp c√≥ t·ªìn t·∫°i kh√¥ng
        const canvas = global.nodemodule["canvas"];
        const jimp = global.nodemodule["jimp"];
        
        if (canvas && jimp) {
            try {
                const { registerFont, createCanvas } = canvas;
                
                // T·∫°o canvas
                const card = createCanvas(900, 500);
                const ctx = card.getContext('2d');
                
                // T·∫£i h√¨nh ·∫£nh n·ªÅn
                try {
                    // URL ·∫£nh n·ªÅn t·ª´ lo·∫°i n·ªÅn ƒë√£ ch·ªçn
                    console.log("ƒêang t·∫£i ·∫£nh n·ªÅn tr·ª±c ti·∫øp t·ª´ URL...");
                    const backgroundImg = await canvas.loadImage(backgroundUrl);
                    console.log("ƒê√£ t·∫£i ·∫£nh n·ªÅn th√†nh c√¥ng");
                    
                    // T√≠nh to√°n t·ª∑ l·ªá ƒë·ªÉ l·∫•p ƒë·∫ßy t·ªët h∆°n v√† kh√¥ng c·∫Øt n·ªôi dung quan tr·ªçng
                    const imgRatio = backgroundImg.width / backgroundImg.height;
                    const canvasRatio = 900 / 500;
                    let drawWidth, drawHeight, offsetX = 0, offsetY = 0;
                    
                    // ∆Øu ti√™n l·∫•p ƒë·∫ßy theo chi·ªÅu r·ªông
                    drawWidth = 920; // Th√™m m·ªôt ch√∫t ƒë·ªÉ l·∫•p ƒë·∫ßy t·ªët h∆°n
                    drawHeight = drawWidth / imgRatio;
                    
                    // N·∫øu chi·ªÅu cao v∆∞·ª£t qu√° k√≠ch th∆∞·ªõc canvas, cƒÉn ch·ªânh ph·∫ßn tr√™n d∆∞·ªõi
                    if (drawHeight > 500) {
                        offsetY = (500 - drawHeight) / 2;
                    } else {
                        // Tr∆∞·ªùng h·ª£p hi·∫øm: n·∫øu ·∫£nh qu√° r·ªông, cƒÉn gi·ªØa theo chi·ªÅu cao
                        drawHeight = 500;
                        drawWidth = 500 * imgRatio;
                        offsetX = (900 - drawWidth) / 2;
                    }
                    
                    // V·∫Ω ·∫£nh n·ªÅn gi·ªØ nguy√™n t·ª∑ l·ªá
                    ctx.drawImage(backgroundImg, offsetX, offsetY, drawWidth, drawHeight);
                    
                    // Th√™m hi·ªáu ·ª©ng overlay ƒë·ªÉ vƒÉn b·∫£n d·ªÖ ƒë·ªçc h∆°n (ƒë·ªô trong su·ªët 0.1)
                    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
                    ctx.fillRect(0, 0, 900, 500);
                } catch (bgError) {
                    // N·∫øu c√≥ l·ªói khi t·∫£i ·∫£nh n·ªÅn, v·∫Ω n·ªÅn ƒë∆°n gi·∫£n
                    ctx.fillStyle = '#1a1a2e';
                    ctx.fillRect(0, 0, 900, 500);
                    console.error("L·ªói khi t·∫£i ·∫£nh n·ªÅn:", bgError.message);
                }
                
                // V·∫Ω khung vi·ªÅn v·ªõi m√†u ƒë√£ ch·ªçn - T·∫°o hi·ªáu ·ª©ng "d·∫≠p n·ªïi"
                // Hi·ªáu ·ª©ng b√≥ng ƒë·ªï b√™n ngo√†i
                ctx.shadowColor = 'rgba(0, 0, 0, 0.5)';
                ctx.shadowBlur = 15;
                ctx.shadowOffsetX = 3;
                ctx.shadowOffsetY = 3;
                
                // V·∫Ω khung vi·ªÅn v·ªõi m√†u ƒë√£ ch·ªçn
                ctx.strokeStyle = borderColor;
                ctx.lineWidth = 8;
                
                // V·∫Ω khung vi·ªÅn theo t·ª´ng ph·∫ßn ƒë·ªÉ t·∫°o kho·∫£ng c√°ch v√† h√¨nh rƒÉng c∆∞a ·ªü hai g√≥c tr√™n
                ctx.beginPath();
                
                // ƒêo·∫°n tr√™n (c√≥ kho·∫£ng c√°ch v√† rƒÉng c∆∞a ·ªü hai g√≥c)
                ctx.moveTo(25, 20);  // Th√™m kho·∫£ng c√°ch ·ªü g√≥c tr√°i
                ctx.lineTo(875, 20); // Ph·∫ßn tr√™n
                
                // ƒêo·∫°n b√™n ph·∫£i 
                ctx.moveTo(875, 20);
                ctx.lineTo(875, 480);
                
                // ƒêo·∫°n d∆∞·ªõi
                ctx.moveTo(875, 480);
                ctx.lineTo(25, 480);
                
                // ƒêo·∫°n b√™n tr√°i
                ctx.moveTo(25, 480);
                ctx.lineTo(25, 20);
                
                // V·∫Ω vi·ªÅn
                ctx.stroke();
                
                // T·∫Øt hi·ªáu ·ª©ng b√≥ng ƒë·ªï cho c√°c ph·∫ßn ti·∫øp theo
                ctx.shadowColor = 'transparent';
                ctx.shadowBlur = 0;
                ctx.shadowOffsetX = 0;
                ctx.shadowOffsetY = 0;
                
                // T·∫£i v√† v·∫Ω avatar trong khung tr√≤n
                try {
                    const avatarImage = await canvas.loadImage(avatarPath);
                    
                    // V·ªã tr√≠ v√† k√≠ch th∆∞·ªõc avatar - ƒêi·ªÅu ch·ªânh ƒë·ªÉ ph·∫ßn ƒë·∫ßu avatar ngang b·∫±ng v·ªõi bƒÉng ƒëen t√™n
                    const avatarSize = 140;
                    const avatarX = 120;
                    // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ Y ƒë·ªÉ ph·∫ßn ƒë·∫ßu avatar (y - size/2) ngang b·∫±ng v·ªõi bƒÉng ƒëen (y=110)
                    const avatarY = 110 + avatarSize/2;
                    
                    // T·∫°o hi·ªáu ·ª©ng vi·ªÅn ph√°t s√°ng cho avatar
                    ctx.shadowColor = borderColor;
                    ctx.shadowBlur = 15;
                    ctx.shadowOffsetX = 0;
                    ctx.shadowOffsetY = 0;
                    
                    // V·∫Ω khung tr√≤n ngo√†i c√πng v·ªõi hi·ªáu ·ª©ng ph√°t s√°ng
                    ctx.beginPath();
                    ctx.arc(avatarX, avatarY, avatarSize/2 + 10, 0, Math.PI * 2);
                    ctx.fillStyle = 'white';
                    ctx.fill();
                    
                    // V·∫Ω vi·ªÅn m√†u cho avatar
                    ctx.strokeStyle = borderColor;
                    ctx.lineWidth = 5;
                    ctx.stroke();
                    
                    // T·∫Øt hi·ªáu ·ª©ng ph√°t s√°ng
                    ctx.shadowColor = 'transparent';
                    ctx.shadowBlur = 0;
                    
                    // V·∫Ω avatar trong khung tr√≤n (clip)
                    ctx.save();
                    ctx.beginPath();
                    ctx.arc(avatarX, avatarY, avatarSize/2, 0, Math.PI * 2);
                    ctx.closePath();
                    ctx.clip();
                    
                    // V·∫Ω avatar v√†o khung ƒë√£ c·∫Øt
                    ctx.drawImage(avatarImage, avatarX - avatarSize/2, avatarY - avatarSize/2, avatarSize, avatarSize);
                    ctx.restore();
                    
                } catch (avatarError) {
                    console.error("L·ªói khi t·∫£i avatar:", avatarError.message);
                }
                
                // V·∫Ω ti√™u ƒë·ªÅ
                ctx.textAlign = 'center';
                
                // V·∫Ω vi·ªÅn ƒëen c·ªßa ti√™u ƒë·ªÅ (t·∫°o hi·ªáu ·ª©ng n·ªïi 3D)
                ctx.font = 'bold 46px Arial, Helvetica, sans-serif';
                ctx.fillStyle = 'black';
                ctx.fillText('TH√îNG TIN NG∆Ø·ªúI D√ôNG', 450, 75);
                
                // V·∫Ω ti√™u ƒë·ªÅ ch√≠nh
                ctx.font = 'bold 45px Arial, Helvetica, sans-serif';
                ctx.fillStyle = borderColor;
                ctx.fillText('TH√îNG TIN NG∆Ø·ªúI D√ôNG', 450, 75);
                
                // V·∫Ω khung th√¥ng tin ch√≠nh - B·∫Øt ƒë·∫ßu sau avatar
                ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';
                // BƒÉng ƒëen b·∫Øt ƒë·∫ßu t·ª´ sau avatar, ƒë·ªÉ c√≥ kho·∫£ng c√°ch nh·ªè v·ªõi vi·ªÅn ƒë·ªè v√† avatar
                ctx.fillRect(230, 110, 635, 60);
                
                // V·∫Ω t√™n ng∆∞·ªùi d√πng
                ctx.textAlign = 'left';
                ctx.font = 'bold 38px Arial, Helvetica, sans-serif';
                ctx.fillStyle = 'white';
                
                // N·∫øu t√™n qu√° d√†i th√¨ c·∫Øt b·ªõt
                let displayName = userName;
                if (displayName.length > 18) {
                    displayName = displayName.substring(0, 15) + "...";
                }
                
                ctx.fillText(displayName, 280, 155);
                
                // V·∫Ω khung th√¥ng tin chi ti·∫øt l·ªõn b√™n ph·∫£i
                ctx.fillStyle = 'rgba(0, 0, 0, 0.55)';
                // ƒê·ªãnh v·ªã gi·ªëng nh∆∞ h√¨nh ·∫£nh m·∫´u - b·∫Øt ƒë·∫ßu sau avatar
                ctx.fillRect(230, 180, 635, 250);
                
                // Th√™m vi·ªÅn ƒë·ªè cho khung th√¥ng tin chi ti·∫øt
                ctx.strokeStyle = borderColor;
                ctx.lineWidth = 3;
                ctx.strokeRect(230, 180, 635, 250);
                
                // V·∫Ω c√°c th√¥ng tin chi ti·∫øt
                ctx.fillStyle = 'white';
                ctx.font = '25px Arial, Helvetica, sans-serif';
                
                const infoStartY = 225;
                const lineHeight = 35;
                
                ctx.fillText(`‚û§ ID: ${targetID}`, 280, infoStartY);
                ctx.fillText(`‚û§ Gi·ªõi t√≠nh: ${userGender}`, 280, infoStartY + lineHeight);
                ctx.fillText(`‚û§ Sinh nh·∫≠t: ${userBirthday}`, 280, infoStartY + lineHeight * 2);
                ctx.fillText(`‚û§ Bi·ªát danh: ${nickname}`, 280, infoStartY + lineHeight * 3);
                ctx.fillText(`‚û§ Vai tr√≤: ${role}`, 280, infoStartY + lineHeight * 4);
                
                
                // L∆∞u th·∫ª th√¥ng tin
                const outputPath = `/cache/card_${random}.png`;
                const buffer = card.toBuffer('image/png');
                fs.writeFileSync(outputPath, buffer);
                
                // G·ª≠i th·∫ª th√¥ng tin
                api.sendMessage(
                    {
                        attachment: fs.createReadStream(outputPath)
                    },
                    threadID,
                    () => {
                        // D·ªçn d·∫πp c√°c file t·∫°m
                        if (fs.existsSync(avatarPath)) fs.unlinkSync(avatarPath);
                        if (fs.existsSync(outputPath)) fs.unlinkSync(outputPath);
                    }
                );
                
            } catch (canvasError) {
                console.error("L·ªói khi t·∫°o card v·ªõi canvas:", canvasError.message);
                api.sendMessage(`‚ùå L·ªói khi t·∫°o card: ${canvasError.message}`, threadID);
            }
        } else {
            // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói n·∫øu kh√¥ng th·ªÉ t·∫°o th·∫ª
            api.sendMessage("‚ùå Kh√¥ng th·ªÉ t·∫°o th·∫ª th√¥ng tin do thi·∫øu th∆∞ vi·ªán canvas ho·∫∑c jimp.", threadID);
        }
    } catch (error) {
        console.error("L·ªói khi t·∫°o th·∫ª th√¥ng tin:", error);
        api.sendMessage(`‚ùå ƒê√£ x·∫£y ra l·ªói khi t·∫°o th·∫ª th√¥ng tin: ${error.message}`, threadID);
    }
}