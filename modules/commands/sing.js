const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "sing6",
  version: "2.0.0",
  hasPermssion: 0,
  credits: "Locdev, Shikaki Van D, nvh fix format",
  description: "Ph√°t nh·∫°c ho·∫∑c video t·ª´ YouTube",
  commandCategory: "media",
  usages: "[t√™n b√†i h√°t / link YouTube]",
  cooldowns: 5
};

const API = "http://theone-api-3416.ddnsgeek.com:3040";

module.exports.handleReply = async function ({ api, event, handleReply }) {
  try {
    if (handleReply.type === "search") {
      const choice = parseInt(event.body.trim());
      if (isNaN(choice) || choice < 1 || choice > handleReply.results.length) {
        return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
      }
      const video = handleReply.results[choice - 1];
      const res = await axios.get(`${API}/?url=https://youtu.be/${video.videoId}`);
      const data = res.data;

      let msg = `üé∂ ƒê√£ ch·ªçn: ${data.title}\nüì∫ K√™nh: ${data.channel}\n\n`;
      msg += "üëâ Reply s·ªë ƒë·ªÉ ch·ªçn ch·∫•t l∆∞·ª£ng:\n";

      const list = [];
      data.media.forEach((m, i) => {
        const type = m.quality.includes("kbps") ? "Audio" : "Video";
        list.push(m);
        msg += `${i + 1}. ${type} ${m.quality} | ${m.codec} | ${m.size}\n`;
      });

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "format",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          formats: list,
          title: data.title,
          channel: data.channel,
          expires: data.expires
        });
      });
    }

    else if (handleReply.type === "format") {
      const choice = parseInt(event.body.trim());
      if (isNaN(choice) || choice < 1 || choice > handleReply.formats.length) {
        return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
      }
      const format = handleReply.formats[choice - 1];

      const filePath = path.join(__dirname, "cache", format.filename);
      const writer = fs.createWriteStream(filePath);

      const response = await axios({
        url: format.url,
        method: "GET",
        responseType: "stream"
      });

      response.data.pipe(writer);

      writer.on("finish", () => {
        api.sendMessage({
          body: `üé∂ ${handleReply.title}\nüì∫ ${handleReply.channel}\nüì¶ ${format.quality} (${format.codec}, ${format.size})\n‚åõ ${handleReply.expires}`,
          attachment: fs.createReadStream(filePath)
        }, event.threadID, () => fs.unlinkSync(filePath));
      });

      writer.on("error", () => {
        api.sendMessage("‚ùå T·∫£i file th·∫•t b·∫°i!", event.threadID, event.messageID);
      });
    }
  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå L·ªói x·ª≠ l√Ω!", event.threadID, event.messageID);
  }
};

module.exports.run = async function ({ api, event, args }) {
  try {
    const query = args.join(" ");
    if (!query) return api.sendMessage("üëâ Nh·∫≠p t·ª´ kho√° ho·∫∑c link YouTube!", event.threadID, event.messageID);

    let searchUrl = query.includes("youtube.com") || query.includes("youtu.be")
      ? `${API}/?url=${encodeURIComponent(query)}`
      : `${API}/search?q=${encodeURIComponent(query)}&num=5`;

    const res = await axios.get(searchUrl);
    const data = res.data;

    // N·∫øu user nh·∫≠p link th√¨ tr·∫£ th·∫≥ng danh s√°ch format
    if (query.includes("youtube.com") || query.includes("youtu.be")) {
      let msg = `üé∂ ${data.title}\nüì∫ ${data.channel}\n\nüëâ Reply s·ªë ƒë·ªÉ ch·ªçn ch·∫•t l∆∞·ª£ng:\n`;
      const list = [];
      data.media.forEach((m, i) => {
        const type = m.quality.includes("kbps") ? "Audio" : "Video";
        list.push(m);
        msg += `${i + 1}. ${type} ${m.quality} | ${m.codec} | ${m.size}\n`;
      });

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "format",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          formats: list,
          title: data.title,
          channel: data.channel,
          expires: data.expires
        });
      });
    }

    // N·∫øu user search th√¨ tr·∫£ danh s√°ch video
    else {
      let msg = "üîé K·∫øt qu·∫£ t√¨m ki·∫øm:\n";
      data.results.forEach((v, i) => {
        msg += `${i + 1}. ${v.title} (${v.duration})\n`;
      });
      msg += "\nüëâ Reply s·ªë ƒë·ªÉ ch·ªçn video.";

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "search",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          results: data.results
        });
      });
    }

  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu!", event.threadID, event.messageID);
  }
};
