const axios = require("axios");
const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "video",
  version: "2.0.0",
  hasPermssion: 0,
  credits: "Locdev, Shikaki Van D, nvh fix format",
  description: "T·∫£i video t·ª´ YouTube",
  commandCategory: "media",
  usages: "[t√™n video / link YouTube]",
  cooldowns: 5
};

const API = "http://theone-api-3416.ddnsgeek.com:3040";
const MAX_VIDEO_SIZE = 25 * 1024 * 1024; // 25MB in bytes

// H√†m chuy·ªÉn ƒë·ªïi k√≠ch th∆∞·ªõc t·ª´ string sang bytes
function parseSize(sizeStr) {
  const units = {
    'KB': 1024,
    'MB': 1024 * 1024,
    'GB': 1024 * 1024 * 1024
  };
  
  const match = sizeStr.match(/([\d.]+)\s*([KMG]B)/i);
  if (match) {
    const value = parseFloat(match[1]);
    const unit = match[2].toUpperCase();
    return Math.floor(value * units[unit]);
  }
  return 0;
}

module.exports.handleReply = async function ({ api, event, handleReply }) {
  try {
    if (handleReply.type === "search") {
      const choice = parseInt(event.body.trim());
      if (isNaN(choice) || choice < 1 || choice > handleReply.results.length) {
        return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
      }
      
      // Thu h·ªìi tin nh·∫Øn danh s√°ch t√¨m ki·∫øm
      api.unsendMessage(handleReply.messageID);
      
      const video = handleReply.results[choice - 1];
      const res = await axios.get(`${API}/?url=https://youtu.be/${video.videoId}`);
      const data = res.data;

      // L·ªçc ch·ªâ l·∫•y video (lo·∫°i b·ªè audio) v√† ki·ªÉm tra k√≠ch th∆∞·ªõc
      const videoFormats = data.media.filter(m => {
        if (m.quality.includes("kbps")) return false; // Lo·∫°i b·ªè audio
        const sizeBytes = parseSize(m.size);
        return sizeBytes <= MAX_VIDEO_SIZE; // Ch·ªâ gi·ªØ video d∆∞·ªõi 25MB
      });
      
      if (videoFormats.length === 0) {
        return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng video n√†o d∆∞·ªõi 25MB!", event.threadID, event.messageID);
      }

      let msg = `üé¨ ƒê√£ ch·ªçn: ${data.title}\nüì∫ K√™nh: ${data.channel}\n\n`;
      msg += "üëâ Reply s·ªë ƒë·ªÉ ch·ªçn ch·∫•t l∆∞·ª£ng video (ch·ªâ hi·ªÉn th·ªã video ‚â§25MB):\n";

      const list = [];
      videoFormats.forEach((m, i) => {
        list.push(m);
        msg += `${i + 1}. Video ${m.quality} | ${m.codec} | ${m.size}\n`;
      });

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "format",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          formats: list,
          title: data.title,
          channel: data.channel,
          expires: data.expires,
          originalResults: handleReply.results,
          selectedIndex: choice - 1
        });
      });
    }

    else if (handleReply.type === "format") {
      const choice = parseInt(event.body.trim());
      if (isNaN(choice) || choice < 1 || choice > handleReply.formats.length) {
        return api.sendMessage("‚ùå S·ªë kh√¥ng h·ª£p l·ªá!", event.threadID, event.messageID);
      }
      
      // Thu h·ªìi tin nh·∫Øn danh s√°ch ch·∫•t l∆∞·ª£ng
      api.unsendMessage(handleReply.messageID);
      
      const format = handleReply.formats[choice - 1];
      const sizeBytes = parseSize(format.size);

      // Ki·ªÉm tra k√≠ch th∆∞·ªõc video tr∆∞·ªõc khi t·∫£i
      if (sizeBytes > MAX_VIDEO_SIZE) {
        return api.sendMessage(
          `‚ùå Kh√¥ng th·ªÉ t·∫£i video n√†y!\n` +
          `üì¶ K√≠ch th∆∞·ªõc: ${format.size} (v∆∞·ª£t qu√° 25MB)\n` +
          `üí° Vui l√≤ng ch·ªçn ch·∫•t l∆∞·ª£ng th·∫•p h∆°n.`,
          event.threadID, event.messageID
        );
      }

      const filePath = path.join(__dirname, "cache", format.filename);
      const writer = fs.createWriteStream(filePath);

      api.sendMessage("‚è≥ ƒêang t·∫£i video, vui l√≤ng ch·ªù...", event.threadID, event.messageID);

      const response = await axios({
        url: format.url,
        method: "GET",
        responseType: "stream"
      });

      response.data.pipe(writer);

      writer.on("finish", () => {
        // Ki·ªÉm tra k√≠ch th∆∞·ªõc file th·ª±c t·∫ø
        const stats = fs.statSync(filePath);
        if (stats.size > MAX_VIDEO_SIZE) {
          fs.unlinkSync(filePath);
          
          // Hi·ªÉn th·ªã l·∫°i b·∫£ng ch·ªçn ch·∫•t l∆∞·ª£ng v·ªõi c·∫£nh b√°o
          let msg = `‚ùå Video t·∫£i v·ªÅ v∆∞·ª£t qu√° 25MB (${(stats.size / (1024 * 1024)).toFixed(2)}MB)!\n\n`;
          msg += `üé¨ ${handleReply.title}\nüì∫ ${handleReply.channel}\n\n`;
          msg += "üí° Vui l√≤ng ch·ªçn ch·∫•t l∆∞·ª£ng th·∫•p h∆°n:\n";

          const list = [];
          handleReply.formats.forEach((m, i) => {
            list.push(m);
            const formatSizeBytes = parseSize(m.size);
            const warning = formatSizeBytes > MAX_VIDEO_SIZE ? " ‚ö†Ô∏è V∆∞·ª£t qu√° 25MB" : "";
            msg += `${i + 1}. Video ${m.quality} | ${m.codec} | ${m.size}${warning}\n`;
          });

          return api.sendMessage(msg, event.threadID, (err, info) => {
            global.client.handleReply.push({
              type: "format",
              name: module.exports.config.name,
              author: event.senderID,
              messageID: info.messageID,
              formats: list,
              title: handleReply.title,
              channel: handleReply.channel,
              expires: handleReply.expires,
              originalResults: handleReply.originalResults,
              selectedIndex: handleReply.selectedIndex
            });
          });
        }

        api.sendMessage({
          body: `üé¨ ${handleReply.title}\nüì∫ ${handleReply.channel}\nüì¶ ${format.quality} (${format.codec}, ${format.size})\n‚åõ ${handleReply.expires}`,
          attachment: fs.createReadStream(filePath)
        }, event.threadID, () => fs.unlinkSync(filePath));
      });

      writer.on("error", () => {
        api.sendMessage("‚ùå T·∫£i video th·∫•t b·∫°i!", event.threadID, event.messageID);
      });
    }
  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå L·ªói x·ª≠ l√Ω!", event.threadID, event.messageID);
  }
};

module.exports.run = async function ({ api, event, args }) {
  try {
    const query = args.join(" ");
    if (!query) return api.sendMessage("üëâ Nh·∫≠p t·ª´ kho√° ho·∫∑c link YouTube!", event.threadID, event.messageID);

    let searchUrl = query.includes("youtube.com") || query.includes("youtu.be")
      ? `${API}/?url=${encodeURIComponent(query)}`
      : `${API}/search?q=${encodeURIComponent(query)}&num=5`;

    const res = await axios.get(searchUrl);
    const data = res.data;

    // N·∫øu user nh·∫≠p link th√¨ tr·∫£ th·∫≥ng danh s√°ch format video
    if (query.includes("youtube.com") || query.includes("youtu.be")) {
      // L·ªçc ch·ªâ l·∫•y video (lo·∫°i b·ªè audio) v√† ki·ªÉm tra k√≠ch th∆∞·ªõc
      const videoFormats = data.media.filter(m => {
        if (m.quality.includes("kbps")) return false; // Lo·∫°i b·ªè audio
        const sizeBytes = parseSize(m.size);
        return sizeBytes <= MAX_VIDEO_SIZE; // Ch·ªâ gi·ªØ video d∆∞·ªõi 25MB
      });
      
      if (videoFormats.length === 0) {
        return api.sendMessage("‚ùå Kh√¥ng t√¨m th·∫•y ƒë·ªãnh d·∫°ng video n√†o d∆∞·ªõi 25MB!", event.threadID, event.messageID);
      }

      let msg = `üé¨ ${data.title}\nüì∫ ${data.channel}\n\nüëâ Reply s·ªë ƒë·ªÉ ch·ªçn ch·∫•t l∆∞·ª£ng video (ch·ªâ hi·ªÉn th·ªã video ‚â§25MB):\n`;
      const list = [];
      videoFormats.forEach((m, i) => {
        list.push(m);
        msg += `${i + 1}. Video ${m.quality} | ${m.codec} | ${m.size}\n`;
      });

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "format",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          formats: list,
          title: data.title,
          channel: data.channel,
          expires: data.expires
        });
      });
    }

    // N·∫øu user search th√¨ tr·∫£ danh s√°ch video
    else {
      let msg = "üîé K·∫øt qu·∫£ t√¨m ki·∫øm video:\n";
      data.results.forEach((v, i) => {
        msg += `${i + 1}. ${v.title} (${v.duration})\n`;
      });
      msg += "\nüëâ Reply s·ªë ƒë·ªÉ ch·ªçn video.";

      api.sendMessage(msg, event.threadID, (err, info) => {
        global.client.handleReply.push({
          type: "search",
          name: module.exports.config.name,
          author: event.senderID,
          messageID: info.messageID,
          results: data.results
        });
      });
    }

  } catch (e) {
    console.error(e);
    api.sendMessage("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu!", event.threadID, event.messageID);
  }
};