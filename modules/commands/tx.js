const games = {};

function getDiceResult() {
    const dice1 = Math.floor(Math.random() * 6) + 1;
    const dice2 = Math.floor(Math.random() * 6) + 1;
    const dice3 = Math.floor(Math.random() * 6) + 1;
    const total = dice1 + dice2 + dice3;
    
    let result;
    if (dice1 === dice2 && dice2 === dice3) {
        result = "b√£o";
    } else {
        result = total >= 11 ? "t√†i" : "x·ªâu";
    }
    
    return { dice1, dice2, dice3, total, result };
}

function parseMoney(moneyValue) {
    if (typeof moneyValue === 'string') {
        return parseFloat(moneyValue.replace(/\./g, '').replace(',', '.'));
    }
    return moneyValue;
}

module.exports.config = {
    name: "tx",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Ng·ªçc Nhi x GPT",
    description: "Game t√†i x·ªâu multiplayer",
    commandCategory: "Game",
    usages: "create [s·ªë_ti·ªÅn] / t√†i / x·ªâu / r·ªùi / x·ªï / h·ªßy / xem",
    cooldowns: 5
};

module.exports.run = async function ({ api, event, args, Currencies, Users }) {
    const { threadID, senderID, messageID } = event;
    const name = await Users.getNameUser(senderID);

    if (!args[0]) {
        return api.sendMessage(
`üé≤ T√ÄI X·ªàU MULTIPLAYER - 

üìå C√°ch ch∆°i:
‚Ä¢ /tx create [s·ªë ti·ªÅn] - T·∫°o b√†n
‚Ä¢ t√†i - Tham gia c·ª≠a T√ÄI
‚Ä¢ x·ªâu - Tham gia c·ª≠a X·ªàU
‚Ä¢ r·ªùi - R·ªùi b√†n
‚Ä¢ x·ªï - X·ªï s·ªë (ch·ªß b√†n)
‚Ä¢ h·ªßy - H·ªßy b√†n (ch·ªß b√†n)   
‚Ä¢ xem - Xem th√¥ng tin b√†n

üéØ Lu·∫≠t ch∆°i:
- T·ªïng 3 x√∫c x·∫Øc 11-17: T√ÄI
- T·ªïng 3 x√∫c x·∫Øc 4-10: X·ªàU  
- 3 m·∫∑t gi·ªëng nhau: B√ÉO (h√≤a ti·ªÅn)

üí∞ Ch·ªß b√†n ph·∫£i ch·ªçn c·ª≠a b·∫±ng c√°ch g√µ "t√†i" ho·∫∑c "x·ªâu" sau khi t·∫°o b√†n
‚è∞ X·ªï sau 10s khi ch·ªß b√†n g√µ "x·ªï"`,
            threadID,
            messageID
        );
    }

    const command = args[0].toLowerCase();

    // T·∫°o b√†n t√†i x·ªâu
    if (command === "create") {
        if (games[threadID]) {
            return api.sendMessage("‚ùå ƒê√£ c√≥ b√†n t√†i x·ªâu trong nh√≥m n√†y!", threadID, messageID);
        }

        if (args.length < 2) {
            return api.sendMessage("‚ö†Ô∏è Thi·∫øu s·ªë ti·ªÅn c∆∞·ª£c!", threadID, messageID);
        }

        const bet = parseInt(args[1]);
        if (!bet || bet < 1000) {
            return api.sendMessage("‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c t·ªëi thi·ªÉu l√† 1,000 VNƒê", threadID, messageID);
        }

        const userData = await Currencies.getData(senderID);
        const userMoney = parseMoney(userData.money);
        if (userMoney < bet) {
            return api.sendMessage(`‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! S·ªë d∆∞: ${userMoney.toLocaleString('vi-VN')} VNƒê`, threadID, messageID);
        }

        // Tr·ª´ ti·ªÅn ch·ªß b√†n
        await Currencies.decreaseMoney(senderID, bet);

        // T·∫°o b√†n
        games[threadID] = {
            bet: bet,
            host: senderID,
            hostName: name,
            hostChoice: null, // Ch·ªß b√†n ch∆∞a ch·ªçn c·ª≠a
            players: {
                t√†i: [],
                x·ªâu: []
            },
            totalPot: bet,
            started: false
        };

        return api.sendMessage(
`üé≤ B√ÄN T√ÄI X·ªàU ƒê√É ƒê∆Ø·ª¢C T·∫†O
üë§ Ch·ªß b√†n: ${name}
üí∞ M·ª©c c∆∞·ª£c: ${bet.toLocaleString('vi-VN')} VNƒê`,
            threadID,
            messageID
        );
    }

    // Xem th√¥ng tin b√†n
    if (command === "xem") {
        const game = games[threadID];
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID, messageID);
        }

        let msg = `üé≤ TH√îNG TIN B√ÄN T√ÄI X·ªàU\n`;
        msg += `üë§ Ch·ªß b√†n: ${game.hostName}${game.hostChoice ? ` (${game.hostChoice.toUpperCase()})` : " (Ch∆∞a ch·ªçn c·ª≠a)"}\n`;
        msg += `üí∞ M·ª©c c∆∞·ª£c: ${game.bet.toLocaleString('vi-VN')} VNƒê\n`;
        msg += `üë• T·ªïng s·ªë ng∆∞·ªùi: ${game.players.t√†i.length + game.players.x·ªâu.length}\n\n`;

        msg += `üéØ C·ª¨A T√ÄI (${game.players.t√†i.length} ng∆∞·ªùi):\n`;
        game.players.t√†i.forEach((player, index) => {
            msg += `${index + 1}. ${player.name}\n`;
        });

        msg += `\nüéØ C·ª¨A X·ªàU (${game.players.x·ªâu.length} ng∆∞·ªùi):\n`;
        game.players.x·ªâu.forEach((player, index) => {
            msg += `${index + 1}. ${player.name}\n`;
        });

        if (!game.started) {
            msg += `\n‚è≥ Ch·ªù ch·ªß b√†n g√µ "x·ªï" ƒë·ªÉ x·ªï s·ªë...`;
        }

        return api.sendMessage(msg, threadID, messageID);
    }

    // H·ªßy b√†n
    if (command === "h·ªßy") {
        const game = games[threadID];
        if (!game) {
            return api.sendMessage("‚ùå Kh√¥ng c√≥ b√†n n√†o ƒë·ªÉ h·ªßy!", threadID, messageID);
        }

        if (game.host !== senderID) {
            return api.sendMessage("‚ùå Ch·ªâ ch·ªß b√†n m·ªõi ƒë∆∞·ª£c h·ªßy!", threadID, messageID);
        }

        // Ho√†n ti·ªÅn cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i
        for (const side of ['t√†i', 'x·ªâu']) {
            for (const player of game.players[side]) {
                await Currencies.increaseMoney(player.id, player.bet);
            }
        }

        delete games[threadID];
        return api.sendMessage("‚úÖ B√†n t√†i x·ªâu ƒë√£ ƒë∆∞·ª£c h·ªßy, ti·ªÅn ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£!", threadID, messageID);
    }

    return api.sendMessage("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá! G√µ '/tx' ƒë·ªÉ xem h∆∞·ªõng d·∫´n", threadID, messageID);
};

module.exports.handleEvent = async function ({ api, event, Currencies, Users }) {
    const { threadID, senderID, body } = event;
    if (!body) return;

    const text = body.toLowerCase().trim();
    const name = await Users.getNameUser(senderID);
    const game = games[threadID];

    // Tham gia c·ª≠a T√ÄI
    if (text === "t√†i") {
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID);
        }

        if (game.started) {
            return api.sendMessage("‚ùå B√†n ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia!", threadID);
        }

        // Ki·ªÉm tra ƒë√£ tham gia ch∆∞a
        const alreadyJoined = game.players.t√†i.find(p => p.id === senderID) || game.players.x·ªâu.find(p => p.id === senderID);
        if (alreadyJoined) {
            return api.sendMessage("‚ùå B·∫°n ƒë√£ tham gia b√†n n√†y r·ªìi!", threadID);
        }

        // N·∫øu l√† ch·ªß b√†n
        if (senderID === game.host) {
            if (game.hostChoice === "t√†i") {
                return api.sendMessage("‚ùå B·∫°n ƒë√£ ch·ªçn T√ÄI r·ªìi!", threadID);
            }
            // Chuy·ªÉn t·ª´ c·ª≠a X·ªàU sang T√ÄI (n·∫øu c√≥)
            const hostIndex = game.players.x·ªâu.findIndex(p => p.id === senderID);
            if (hostIndex !== -1) {
                game.players.x·ªâu.splice(hostIndex, 1);
            }
            game.players.t√†i.push({
                id: senderID,
                name: name + ' üëë',
                bet: game.bet
            });
            game.hostChoice = "t√†i";
            return api.sendMessage(`‚úÖ ${name} ƒë√£ tham gia c·ª≠a T√ÄI!`, threadID);
        }

        // Ng∆∞·ªùi ch∆°i b√¨nh th∆∞·ªùng - tr·ª´ ti·ªÅn
        const userData = await Currencies.getData(senderID);
        const userMoney = parseMoney(userData.money);
        if (userMoney < game.bet) {
            return api.sendMessage(`‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${game.bet.toLocaleString('vi-VN')} VNƒê, s·ªë d∆∞: ${userMoney.toLocaleString('vi-VN')} VNƒê`, threadID);
        }

        await Currencies.decreaseMoney(senderID, game.bet);

        game.players.t√†i.push({
            id: senderID,
            name: name,
            bet: game.bet
        });
        game.totalPot += game.bet;

        return api.sendMessage(
            `‚úÖ ${name} ƒë√£ tham gia c·ª≠a T√ÄI: ${game.bet.toLocaleString('vi-VN')} VNƒê`,
            threadID
        );
    }

    // Tham gia c·ª≠a X·ªàU
    if (text === "x·ªâu") {
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID);
        }

        if (game.started) {
            return api.sendMessage("‚ùå B√†n ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ tham gia!", threadID);
        }

        const alreadyJoined = game.players.t√†i.find(p => p.id === senderID) || game.players.x·ªâu.find(p => p.id === senderID);
        if (alreadyJoined) {
            return api.sendMessage("‚ùå B·∫°n ƒë√£ tham gia b√†n n√†y r·ªìi!", threadID);
        }

        // N·∫øu l√† ch·ªß b√†n
        if (senderID === game.host) {
            if (game.hostChoice === "x·ªâu") {
                return api.sendMessage("‚ùå B·∫°n ƒë√£ ch·ªçn X·ªàU r·ªìi!", threadID);
            }
            // Chuy·ªÉn t·ª´ c·ª≠a T√ÄI sang X·ªàU (n·∫øu c√≥)
            const hostIndex = game.players.t√†i.findIndex(p => p.id === senderID);
            if (hostIndex !== -1) {
                game.players.t√†i.splice(hostIndex, 1);
            }
            game.players.x·ªâu.push({
                id: senderID,
                name: name + ' üëë',
                bet: game.bet
            });
            game.hostChoice = "x·ªâu";
            return api.sendMessage(`‚úÖ ${name} ƒë√£ tham gia c·ª≠a X·ªàU!`, threadID);
        }

        const userData = await Currencies.getData(senderID);
        const userMoney = parseMoney(userData.money);
        if (userMoney < game.bet) {
            return api.sendMessage(`‚ùå B·∫°n kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${game.bet.toLocaleString('vi-VN')} VNƒê, s·ªë d∆∞: ${userMoney.toLocaleString('vi-VN')} VNƒê`, threadID);
        }

        await Currencies.decreaseMoney(senderID, game.bet);

        game.players.x·ªâu.push({
            id: senderID,
            name: name,
            bet: game.bet
        });
        game.totalPot += game.bet;

        return api.sendMessage(
            `‚úÖ ${name} ƒë√£ tham gia c·ª≠a X·ªàU: ${game.bet.toLocaleString('vi-VN')} VNƒê`,
            threadID
        );
    }

    // R·ªùi b√†n
    if (text === "r·ªùi") {
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID);
        }

        if (game.started) {
            return api.sendMessage("‚ùå B√†n ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ r·ªùi!", threadID);
        }

        if (game.host === senderID) {
            return api.sendMessage("‚ùå Ch·ªß b√†n kh√¥ng th·ªÉ r·ªùi! H√£y d√πng 'h·ªßy' ƒë·ªÉ h·ªßy b√†n.", threadID);
        }

        let playerSide = null;
        let playerIndex = -1;

        playerIndex = game.players.t√†i.findIndex(p => p.id === senderID);
        if (playerIndex !== -1) {
            playerSide = "t√†i";
        } else {
            playerIndex = game.players.x·ªâu.findIndex(p => p.id === senderID);
            if (playerIndex !== -1) {
                playerSide = "x·ªâu";
            }
        }

        if (playerIndex === -1) {
            return api.sendMessage("‚ùå B·∫°n ch∆∞a tham gia b√†n n√†y!", threadID);
        }

        const player = game.players[playerSide][playerIndex];
        await Currencies.increaseMoney(senderID, game.bet);
        game.players[playerSide].splice(playerIndex, 1);
        game.totalPot -= game.bet;

        return api.sendMessage(
            `‚úÖ ${name} ƒë√£ r·ªùi kh·ªèi b√†n, ti·ªÅn ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£!\nüéØ T·ªïng pot: ${game.totalPot.toLocaleString('vi-VN')} VNƒê`,
            threadID
        );
    }

    // X·ªï s·ªë (ch·ªß b√†n)
    if (text === "x·ªï") {
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID);
        }

        if (game.host !== senderID) {
            return api.sendMessage("‚ùå Ch·ªâ ch·ªß b√†n m·ªõi ƒë∆∞·ª£c x·ªï s·ªë!", threadID);
        }

        if (game.started) {
            return api.sendMessage("‚ùå B√†n ƒë√£ ƒë∆∞·ª£c x·ªï s·ªë r·ªìi!", threadID);
        }

        if (!game.hostChoice) {
            return api.sendMessage("‚ùå Ch·ªß b√†n ph·∫£i ch·ªçn c·ª≠a (t√†i ho·∫∑c x·ªâu) tr∆∞·ªõc khi x·ªï s·ªë!", threadID);
        }

        if (game.players.t√†i.length === 0 || game.players.x·ªâu.length === 0) {
            return api.sendMessage("‚ùå C·∫ßn c√≥ √≠t nh·∫•t 1 ng∆∞·ªùi ch∆°i m·ªói c·ª≠a ƒë·ªÉ x·ªï s·ªë!", threadID);
        }

        game.started = true;
        
        api.sendMessage("üé≤ Ch·ªß b√†n ƒë√£ b·∫•m x·ªï, ƒëang x·ªï s·ªë trong 10 gi√¢y...", threadID);

        setTimeout(async () => {
            const result = getDiceResult();
            
            let resultMessage = `üé≤ K·∫æT QU·∫¢ T√ÄI X·ªàU\n`;
            resultMessage += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
            resultMessage += `‚öÑ ${result.dice1} + ${result.dice2} + ${result.dice3} = ${result.total} ‚öÑ\n`;
            resultMessage += `üéØ K·∫øt qu·∫£: ${result.result.toUpperCase()}\n`;
            
            if (result.result === "b√£o") {
                resultMessage += `üí• B√ÉO ${result.dice1} N√öT!\n`;
            }
            resultMessage += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;

            if (result.result === "b√£o") {
                resultMessage += `üí• B√ÉO - H√íA TI·ªÄN!\n`;
                for (const side of ['t√†i', 'x·ªâu']) {
                    for (const player of game.players[side]) {
                        await Currencies.increaseMoney(player.id, player.bet);
                    }
                }
                resultMessage += `üíµ ƒê√£ ho√†n ti·ªÅn cho t·∫•t c·∫£ ng∆∞·ªùi ch∆°i\n`;
            } else {
                let winners = [];
                let losers = [];

                if (result.result === "t√†i") {
                    winners = game.players.t√†i;
                    losers = game.players.x·ªâu;
                    resultMessage += `üèÜ NG∆Ø·ªúI TH·∫ÆNG (C·ª¨A T√ÄI):\n`;
                } else {
                    winners = game.players.x·ªâu;
                    losers = game.players.t√†i;
                    resultMessage += `üèÜ NG∆Ø·ªúI TH·∫ÆNG (C·ª¨A X·ªàU):\n`;
                }

                const totalLost = losers.reduce((sum, player) => sum + player.bet, 0);
                const totalWinners = winners.length;
                
                if (totalWinners > 0) {
                    const rewardPerWinner = Math.floor(totalLost / totalWinners);
                    
                    for (const winner of winners) {
                        await Currencies.increaseMoney(winner.id, winner.bet + rewardPerWinner);
                        resultMessage += `‚úÖ ${winner.name}: +${(winner.bet + rewardPerWinner).toLocaleString('vi-VN')} VNƒê\n`;
                    }
                    
                    resultMessage += `\nüí∏ NG∆Ø·ªúI THUA:\n`;
                    for (const loser of losers) {
                        resultMessage += `‚ùå ${loser.name}: -${loser.bet.toLocaleString('vi-VN')} VNƒê\n`;
                    }
                }
            }

            resultMessage += `\nüí∞ T·ªïng pot: ${game.totalPot.toLocaleString('vi-VN')} VNƒê`;

            delete games[threadID];
            api.sendMessage(resultMessage, threadID);
        }, 10000);

        return;
    }

    // H·ªßy b√†n (ch·ªß b√†n)
    if (text === "h·ªßy") {
        if (!game) {
            return api.sendMessage("‚ùå Kh√¥ng c√≥ b√†n n√†o ƒë·ªÉ h·ªßy!", threadID);
        }

        if (game.host !== senderID) {
            return api.sendMessage("‚ùå Ch·ªâ ch·ªß b√†n m·ªõi ƒë∆∞·ª£c h·ªßy!", threadID);
        }

        for (const side of ['t√†i', 'x·ªâu']) {
            for (const player of game.players[side]) {
                await Currencies.increaseMoney(player.id, player.bet);
            }
        }

        delete games[threadID];
        return api.sendMessage("‚úÖ B√†n t√†i x·ªâu ƒë√£ ƒë∆∞·ª£c h·ªßy, ti·ªÅn ƒë√£ ƒë∆∞·ª£c ho√†n tr·∫£!", threadID);
    }

    // Xem th√¥ng tin b√†n
    if (text === "xem") {
        if (!game) {
            return api.sendMessage("‚ùå Hi·ªán kh√¥ng c√≥ b√†n t√†i x·ªâu n√†o trong nh√≥m!", threadID);
        }

        let msg = `üé≤ TH√îNG TIN B√ÄN T√ÄI X·ªàU\n`;
        msg += `üë§ Ch·ªß b√†n: ${game.hostName}${game.hostChoice ? ` (${game.hostChoice.toUpperCase()})` : " (Ch∆∞a ch·ªçn c·ª≠a)"}\n`;
        msg += `üí∞ M·ª©c c∆∞·ª£c: ${game.bet.toLocaleString('vi-VN')} VNƒê\n`;
        msg += `üë• T·ªïng s·ªë ng∆∞·ªùi: ${game.players.t√†i.length + game.players.x·ªâu.length}\n\n`;

        msg += `üéØ C·ª¨A T√ÄI (${game.players.t√†i.length} ng∆∞·ªùi):\n`;
        game.players.t√†i.forEach((player, index) => {
            msg += `${index + 1}. ${player.name}\n`;
        });

        msg += `\nüéØ C·ª¨A X·ªàU (${game.players.x·ªâu.length} ng∆∞·ªùi):\n`;
        game.players.x·ªâu.forEach((player, index) => {
            msg += `${index + 1}. ${player.name}\n`;
        });

        if (!game.started) {
            msg += `\n‚è≥ Ch·ªù ch·ªß b√†n g√µ "x·ªï" ƒë·ªÉ x·ªï s·ªë...`;
        }

        return api.sendMessage(msg, threadID);
    }
};