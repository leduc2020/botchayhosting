<<<<<<< HEAD
const moment = require('moment-timezone');
const fs = require('fs');
const imageDownloader = require('image-downloader');
const fse = require('fs-extra');

// --- C·∫•u h√¨nh l·ªánh ---
exports.config = {
    name: 'rt',
    version: '2.0.7', // C·∫≠p nh·∫≠t version ƒë·ªÉ ph·∫£n √°nh thay ƒë·ªïi m·ªõi
    hasPermssion: 2, // Quy·ªÅn admin bot (ch·ªâ admin bot m·ªõi d√πng ƒë∆∞·ª£c)
    credits: 'DC-Nam mod by Niiozic, updated by Grok',
    description: 'Qu·∫£n l√Ω thu√™ bot cho nh√≥m.',
    commandCategory: 'Admin',
    usages: '[add/info/del/del all/list/page/giahan/out]',
    cooldowns: 3 // Cooldown chung cho l·ªánh (3 gi√¢y)
};

// --- Kh·ªüi t·∫°o data ---
const dataDir = __dirname + '/data';
const dataPath = dataDir + '/thuebot.json';
let rentData = []; // Bi·∫øn l∆∞u tr·ªØ d·ªØ li·ªáu thu√™ bot

// T·∫°o th∆∞ m·ª•c 'data' n·∫øu ch∆∞a t·ªìn t·∫°i
if (!fs.existsSync(dataDir)) fs.mkdirSync(dataDir);

// H√†m l∆∞u d·ªØ li·ªáu v√†o file JSON
const saveData = () => fs.writeFileSync(dataPath, JSON.stringify(rentData, null, 2));

// T·∫£i d·ªØ li·ªáu khi module ƒë∆∞·ª£c load
if (!fs.existsSync(dataPath)) {
    saveData(); // T·∫°o file r·ªóng n·∫øu ch∆∞a c√≥
} else {
    try {
        rentData = require(dataPath); // T·∫£i d·ªØ li·ªáu t·ª´ file
    } catch (e) {
        console.error("L·ªói khi ƒë·ªçc file thuebot.json, t·∫°o l·∫°i file r·ªóng.", e);
        rentData = [];
        saveData();
    }
}

// --- H√†m ti·ªán √≠ch ---

/**
 * Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ DD/MM/YYYY sang MM/DD/YYYY ƒë·ªÉ Date object hi·ªÉu ƒë∆∞·ª£c.
 * @param {string} input Chu·ªói ng√†y DD/MM/YYYY.
 * @returns {string} Chu·ªói ng√†y MM/DD/YYYY.
 */
const formatDateForDateObject = (input = '') => {
    const split = input.split('/');
    if (split.length === 3) return `${split[1]}/${split[0]}/${split[2]}`;
    return input; // Tr·∫£ v·ªÅ nguy√™n n·∫øu kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng
};

/**
 * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m·ªôt chu·ªói ng√†y.
 * @param {string} dateStr Chu·ªói ng√†y DD/MM/YYYY.
 * @returns {boolean} True n·∫øu ng√†y kh√¥ng h·ª£p l·ªá, False n·∫øu h·ª£p l·ªá.
 */
const isInvalidDate = dateStr => {
    const date = new Date(formatDateForDateObject(dateStr));
    return isNaN(date.getTime());
};

/**
 * C·∫≠p nh·∫≠t bi·ªát danh c·ªßa bot trong nh√≥m ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i thu√™.
 * @param {object} api ƒê·ªëi t∆∞·ª£ng API c·ªßa bot.
 * @param {string} threadID ID c·ªßa nh√≥m.
 * @param {string} prefix Prefix hi·ªán t·∫°i c·ªßa bot.
 * @param {string} botName T√™n bot.
 * @param {string} timeEnd Ng√†y h·∫øt h·∫°n (DD/MM/YYYY).
 */
async function updateNickname(api, threadID, prefix, botName, timeEnd) {
    const now = new Date();
    const endTime = new Date(formatDateForDateObject(timeEnd));
    const timeLeft = endTime.getTime() - now.getTime();

    let nickname = `„Äé ${prefix} „Äè ‚™º ${botName}`;
    if (timeLeft > 0) {
        const endDateFormatted = moment(endTime).tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY");
        nickname += ` | H·∫°n: ƒêANG THU√ä (${endDateFormatted})`;
    } else {
        nickname += ` | H·∫°n: H·∫øt h·∫°n`;
    }
    try {
        await api.changeNickname(nickname, threadID, api.getCurrentUserID());
    } catch (error) {
        console.error(`L·ªói khi ƒë·ªïi bi·ªát danh trong nh√≥m ${threadID}:`, error);
    }
}

/**
 * T·∫£i ·∫£nh t·ª´ URL v√† t·∫°o readable stream ƒë·ªÉ g·ª≠i ƒëi.
 * @param {string} url URL c·ªßa ·∫£nh.
 * @param {string} mime Ki·ªÉu MIME c·ªßa ·∫£nh (m·∫∑c ƒë·ªãnh l√† 'jpg').
 * @returns {Promise<fs.ReadStream|null>} Readable stream c·ªßa ·∫£nh ho·∫∑c null n·∫øu c√≥ l·ªói.
 */
async function streamURL(url, mime = 'jpg') {
    const dest = `${dataDir}/${Date.now()}.${mime}`;
    try {
        await imageDownloader.image({ url, dest });
        // X√≥a file sau 1 ph√∫t ƒë·ªÉ tr√°nh ƒë·∫ßy b·ªô nh·ªõ
        setTimeout(() => fse.unlinkSync(dest), 60 * 1000, dest);
        return fse.createReadStream(dest);
    } catch (error) {
        console.error("L·ªói khi t·∫£i ·∫£nh t·ª´ URL:", error);
        return null;
    }
}

// --- H√†m ch√≠nh (run) ---
exports.run = async function (o) {
    const { api, event, Users, Threads, args } = o;
    const { threadID, messageID, senderID } = event;

    // H√†m g·ª≠i tin nh·∫Øn nhanh
    const send = (msg, callback) => api.sendMessage(msg, threadID, callback, messageID);
    
    // L·∫•y prefix v√† t√™n bot hi·ªán t·∫°i
    const prefix = (global.data.threadData.get(threadID) || {}).PREFIX || global.config.PREFIX;
    const botName = global.config.BOTNAME || "BOT DongDevüëæ";
    
    // T√¨m th√¥ng tin thu√™ bot c·ªßa nh√≥m hi·ªán t·∫°i
    const currentThreadRentInfo = rentData.find(item => item.t_id == threadID);

    // Ki·ªÉm tra c√°c bi·∫øn global c·∫ßn thi·∫øt
    if (!global.data || !global.config || !global.data.userName || !global.data.threadInfo) {
        return send("L·ªói: D·ªØ li·ªáu c·∫•u h√¨nh bot ho·∫∑c d·ªØ li·ªáu ng∆∞·ªùi d√πng/nh√≥m kh√¥ng ƒë∆∞·ª£c t·∫£i ƒë·∫ßy ƒë·ªß. Vui l√≤ng ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t bot.");
    }

    try {
        const command = args[0] ? args[0].toLowerCase() : '';

        switch (command) {
            case 'add': {
                if (!args[1]) {
                    return send(`‚ùé D√πng: ${prefix}${this.config.name} add [s·ªë ng√†y ho·∫∑c ng√†y/th√°ng/nƒÉm] + (t√πy ch·ªçn) **reply ho·∫∑c tag ng∆∞·ªùi thu√™**.\n` +
                                `V√≠ d·ª•:\n` +
                                `- ${prefix}${this.config.name} add 30 (thu√™ 30 ng√†y cho ng∆∞·ªùi g·ª≠i l·ªánh)\n` +
                                `- ${prefix}${this.config.name} add 30 @tag (thu√™ 30 ng√†y cho ng∆∞·ªùi ƒë∆∞·ª£c tag)\n` +
                                `- ${prefix}${this.config.name} add 12/12/2025 @tag (ng√†y c·ª• th·ªÉ cho ng∆∞·ªùi ƒë∆∞·ª£c tag)\n` +
                                `- ${prefix}${this.config.name} add [ID ng∆∞·ªùi thu√™] [s·ªë ng√†y ho·∫∑c ng√†y/th√°ng/nƒÉm] (√≠t d√πng, d·ªÖ sai s√≥t).`);
                }

                let targetUID = senderID; // M·∫∑c ƒë·ªãnh l√† ng∆∞·ªùi g·ª≠i l·ªánh
                let timeEndArgIndex = 1;
                let timeEnd;

                // X√°c ƒë·ªãnh UID m·ª•c ti√™u t·ª´ reply, mentions ho·∫∑c tr·ª±c ti·∫øp
                if (event.type === "message_reply") {
                    targetUID = event.messageReply.senderID;
                    timeEndArgIndex = 1;
                } else if (Object.keys(event.mentions).length > 0) {
                    targetUID = Object.keys(event.mentions)[0];
                    timeEndArgIndex = 1;
                } else if (args.length >= 3 && !isNaN(args[1])) { // Tr∆∞·ªùng h·ª£p ng∆∞·ªùi d√πng nh·∫≠p ID v√† ng√†y/s·ªë ng√†y tr·ª±c ti·∫øp
                    targetUID = args[1];
                    timeEndArgIndex = 2;
                }

                const timeInput = args[timeEndArgIndex];

                if (!timeInput) {
                    return send(`‚ùé Vui l√≤ng cung c·∫•p s·ªë ng√†y (v√≠ d·ª•: 30) ho·∫∑c ng√†y h·∫øt h·∫°n theo ƒë·ªãnh d·∫°ng **DD/MM/YYYY**.`);
                }

                // Ki·ªÉm tra xem timeInput l√† s·ªë ng√†y hay ng√†y c·ª• th·ªÉ
                if (!isNaN(timeInput)) {
                    const days = parseInt(timeInput);
                    if (days <= 0) {
                        return send(`‚ùé S·ªë ng√†y ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng (v√≠ d·ª•: 30).`);
                    }
                    timeEnd = moment.tz("Asia/Ho_Chi_Minh").add(days, 'days').format("DD/MM/YYYY");
                } else {
                    if (isInvalidDate(timeInput)) {
                        return send(`‚ùé Th·ªùi gian h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng **DD/MM/YYYY** ho·∫∑c m·ªôt s·ªë ng√†y (v√≠ d·ª•: 30).`);
                    }
                    timeEnd = timeInput;
                }

                if (isNaN(targetUID) || isNaN(threadID)) {
                    return send(`‚ùé ID ng∆∞·ªùi thu√™ ho·∫∑c ID nh√≥m kh√¥ng h·ª£p l·ªá!`);
                }

                const newRentInfo = {
                    t_id: threadID,
                    id: targetUID,
                    time_start: moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY"),
                    time_end: timeEnd,
                };

                const existingIndex = rentData.findIndex(item => item.t_id == threadID);
                if (existingIndex !== -1) {
                    rentData[existingIndex] = newRentInfo; // C·∫≠p nh·∫≠t th√¥ng tin n·∫øu nh√≥m ƒë√£ t·ªìn t·∫°i
                    send(`‚úÖ Box n√†y ƒë√£ c√≥ trong danh s√°ch. ƒê√£ **c·∫≠p nh·∫≠t l·∫°i th√¥ng tin thu√™ bot** th√†nh c√¥ng!`);
                } else {
                    rentData.push(newRentInfo); // Th√™m m·ªõi n·∫øu nh√≥m ch∆∞a t·ªìn t·∫°i
                    send(`‚úÖ ƒê√£ **th√™m nh√≥m v√†o danh s√°ch thu√™ bot** th√†nh c√¥ng!`);
                }

                saveData(); // L∆∞u d·ªØ li·ªáu sau khi th√™m/c·∫≠p nh·∫≠t
                await updateNickname(api, threadID, prefix, botName, timeEnd); // C·∫≠p nh·∫≠t bi·ªát danh bot
            }
                break;

            case 'info': {
                if (!currentThreadRentInfo) {
                    return send("Box n√†y ch∆∞a ƒë∆∞·ª£c thu√™ bot.");
                }

                const userInfo = await Users.getInfo(currentThreadRentInfo.id);
                const threadDetail = await Threads.getInfo(currentThreadRentInfo.t_id);

                const userName = userInfo ? userInfo.name : "Kh√¥ng t√¨m th·∫•y";
                const threadName = threadDetail ? threadDetail.threadName : "Kh√¥ng t√¨m th·∫•y";

                const time_diff_ms = new Date(formatDateForDateObject(currentThreadRentInfo.time_end)).getTime() - Date.now();
                const days = Math.floor(time_diff_ms / (1000 * 60 * 60 * 24));
                const hours = Math.floor((time_diff_ms / (1000 * 60 * 60)) % 24);

                let remainingTime = "";
                if (time_diff_ms < 0) {
                    remainingTime = "0 ng√†y 0 gi·ªù n·ªØa l√† h·∫øt h·∫°n.";
                } else {
                    remainingTime = `${days} ng√†y ${hours} gi·ªù l√† h·∫øt h·∫°n.`;
                }

                const attachments = [];
                const userAvatar = await streamURL(`https://graph.facebook.com/${currentThreadRentInfo.id}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`);
                if (userAvatar) attachments.push(userAvatar);
                
                const threadImage = threadDetail && threadDetail.imageSrc ? await streamURL(threadDetail.imageSrc) : null;
                if (threadImage) attachments.push(threadImage);

                send({
                    body: `[ TH√îNG TIN THU√ä BOT C·ª¶A NH√ìM N√ÄY ]\n\n` +
                          `üë§ T√™n ng∆∞·ªùi thu√™: ${userName}\n` +
                          `üåê Link Facebook: https://www.facebook.com/profile.php?id=${currentThreadRentInfo.id}\n` +
                          `üèòÔ∏è Nh√≥m: ${threadName}\n` +
                          `‚ö° ID Nh√≥m: ${currentThreadRentInfo.t_id}\n` +
                          `üìÜ Ng√†y Thu√™: ${currentThreadRentInfo.time_start}\n` +
                          `‚è≥ H·∫øt H·∫°n: ${currentThreadRentInfo.time_end}\n` +
                          `üìå Th·ªùi gian: ${remainingTime}`,
                    attachment: attachments
                });
            }
                break;

            case 'del': {
                if (args[1] && args[1].toLowerCase() === 'all') {
                    if (rentData.length === 0) {
                        return send("Danh s√°ch thu√™ bot hi·ªán ƒëang tr·ªëng, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a.");
                    }

                    const deletedThreads = rentData.map(item => item.t_id);
                    rentData = [];
                    send(`‚úÖ ƒê√£ **x√≥a to√†n b·ªô ${deletedThreads.length} nh√≥m** kh·ªèi danh s√°ch thu√™ bot th√†nh c√¥ng!`);
                    saveData();
                    for (const tid of deletedThreads) {
                        await updateNickname(api, tid, prefix, botName, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY"));
                    }
                } else {
                    if (!currentThreadRentInfo) {
                        return send("Box n√†y hi·ªán ch∆∞a thu√™ bot, kh√¥ng c√≥ g√¨ ƒë·ªÉ x√≥a.");
                    }
                    rentData = rentData.filter(item => item.t_id !== threadID);
                    send(`‚úÖ ƒê√£ **x√≥a d·ªØ li·ªáu box n√†y** kh·ªèi danh s√°ch thu√™ bot th√†nh c√¥ng!`);
                    saveData();
                    await updateNickname(api, threadID, prefix, botName, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY"));
                }
            }
                break;

            case 'giahan': {
                if (!currentThreadRentInfo) {
                    return send("Box n√†y ch∆∞a ƒë∆∞·ª£c thu√™ bot, kh√¥ng th·ªÉ gia h·∫°n. Vui l√≤ng s·ª≠ d·ª•ng l·ªánh add tr∆∞·ªõc.");
                }

                const timeInput = args[1];
                if (!timeInput) {
                    return send(`‚ùé Vui l√≤ng cung c·∫•p s·ªë ng√†y (v√≠ d·ª•: 30) ho·∫∑c ng√†y h·∫øt h·∫°n m·ªõi theo ƒë·ªãnh d·∫°ng **DD/MM/YYYY**.\n` +
                                `V√≠ d·ª•: ${prefix}${this.config.name} giahan 30 ho·∫∑c ${prefix}${this.config.name} giahan 01/01/2026`);
                }

                let newTimeEnd;
                if (!isNaN(timeInput)) {
                    const days = parseInt(timeInput);
                    if (days <= 0) {
                        return send(`‚ùé S·ªë ng√†y ph·∫£i l√† m·ªôt s·ªë d∆∞∆°ng (v√≠ d·ª•: 30).`);
                    }
                    newTimeEnd = moment(formatDateForDateObject(currentThreadRentInfo.time_end), "MM/DD/YYYY").add(days, 'days').format("DD/MM/YYYY");
                } else {
                    if (isInvalidDate(timeInput)) {
                        return send(`‚ùé Th·ªùi gian gia h·∫°n kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p theo ƒë·ªãnh d·∫°ng **DD/MM/YYYY** ho·∫∑c s·ªë ng√†y (v√≠ d·ª•: 30).`);
                    }
                    newTimeEnd = timeInput;
                }

                currentThreadRentInfo.time_end = newTimeEnd;
                send(`‚úÖ ƒê√£ **gia h·∫°n nh√≥m** "${(global.data.threadInfo.get(threadID) || {}).threadName || "Kh√¥ng t√¨m th·∫•y"}" ƒë·∫øn ng√†y **${newTimeEnd}** th√†nh c√¥ng!`);
                saveData();
                await updateNickname(api, threadID, prefix, botName, newTimeEnd);
            }
                break;

            case 'list': {
                const itemsPerPage = 10;
                const totalPages = Math.ceil(rentData.length / itemsPerPage);
                const pageNumber = 1;
                const startIndex = (pageNumber - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const pageData = rentData.slice(startIndex, endIndex);

                if (rentData.length === 0) {
                    return send("Danh s√°ch thu√™ bot hi·ªán ƒëang tr·ªëng.");
                }

                let msgBody = `[ DANH S√ÅCH C√ÅC NH√ìM THU√ä BOT - Trang ${pageNumber}/${totalPages}]\n\n`;
                if (pageData.length > 0) {
                    msgBody += pageData.map((item, i) => {
                        const listItemNumber = startIndex + i + 1;
                        const status = new Date(formatDateForDateObject(item.time_end)).getTime() > Date.now() ? 'Ch∆∞a H·∫øt H·∫°n ‚úÖ' : 'ƒê√£ H·∫øt H·∫°n ‚ùé';
                        const userName = global.data.userName.get(item.id) || "Kh√¥ng t√¨m th·∫•y";
                        const threadName = (global.data.threadInfo.get(item.t_id) || {}).threadName || "Kh√¥ng t√¨m th·∫•y";
                        return `${listItemNumber}. ${userName}\nüìù T√¨nh tr·∫°ng: ${status}\nüåæ Nh√≥m: ${threadName}\nT·ª´: ${item.time_start}\nƒê·∫øn: ${item.time_end}`;
                    }).join('\n\n');
                } else {
                    msgBody += "Kh√¥ng c√≥ d·ªØ li·ªáu ·ªü trang n√†y.";
                }

                msgBody += `\n\n--- H∆∞·ªõng d·∫´n t∆∞∆°ng t√°c ---` +
                           `\n‚Üí **Reply (ph·∫£n h·ªìi)** theo STT ƒë·ªÉ xem chi ti·∫øt` +
                           `\n‚Üí Reply **del + STT** ƒë·ªÉ x√≥a kh·ªèi danh s√°ch (v√≠ d·ª•: del 1 3 5)` +
                           `\n‚Üí Reply **out + STT** ƒë·ªÉ bot tho√°t nh√≥m (v√≠ d·ª•: out 2 4)` +
                           `\n‚Üí Reply **page + STT** ƒë·ªÉ xem c√°c trang kh√°c (v√≠ d·ª•: page 2)`;

                api.sendMessage(msgBody, threadID, (err, info) => {
                    if (err) return console.error("L·ªói khi g·ª≠i danh s√°ch:", err);
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: senderID
                    });
                }, messageID);
            }
                break;

            case 'page': {
                const itemsPerPage = 10;
                const pageNumber = parseInt(args[1]);

                if (isNaN(pageNumber) || pageNumber < 1) {
                    return send(`S·ªë trang kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng (v√≠ d·ª•: ${prefix}${this.config.name} page 2).`);
                }

                const totalPages = Math.ceil(rentData.length / itemsPerPage);

                if (rentData.length === 0) {
                    return send("Danh s√°ch thu√™ bot hi·ªán ƒëang tr·ªëng.");
                }
                if (pageNumber > totalPages) {
                    return send(`S·ªë trang **${pageNumber}** v∆∞·ª£t qu√° gi·ªõi h·∫°n. T·ªïng s·ªë trang hi·ªán c√≥ l√† **${totalPages}**.`);
                }

                const startIndex = (pageNumber - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;
                const pageData = rentData.slice(startIndex, endIndex);

                let msgBody = `[ DANH S√ÅCH C√ÅC NH√ìM THU√ä BOT - Trang ${pageNumber}/${totalPages}]\n\n`;
                if (pageData.length > 0) {
                    msgBody += pageData.map((item, i) => {
                        const listItemNumber = startIndex + i + 1;
                        const status = new Date(formatDateForDateObject(item.time_end)).getTime() > Date.now() ? 'Ch∆∞a H·∫øt H·∫°n ‚úÖ' : 'ƒê√£ H·∫øt H·∫°n ‚ùé';
                        const userName = global.data.userName.get(item.id) || "Kh√¥ng t√¨m th·∫•y";
                        const threadName = (global.data.threadInfo.get(item.t_id) || {}).threadName || "Kh√¥ng t√¨m th·∫•y";
                        return `${listItemNumber}. ${userName}\nüìù T√¨nh tr·∫°ng: ${status}\nüåæ Nh√≥m: ${threadName}\nT·ª´: ${item.time_start}\nƒê·∫øn: ${item.time_end}`;
                    }).join('\n\n');
                } else {
                    msgBody += `Kh√¥ng c√≥ d·ªØ li·ªáu ·ªü trang ${pageNumber}.`;
                }

                msgBody += `\n\n--- H∆∞·ªõng d·∫´n t∆∞∆°ng t√°c ---` +
                           `\n‚Üí **Reply (ph·∫£n h·ªìi)** theo STT ƒë·ªÉ xem chi ti·∫øt` +
                           `\n‚Üí Reply **del + STT** ƒë·ªÉ x√≥a kh·ªèi danh s√°ch (v√≠ d·ª•: del 1 3 5)` +
                           `\n‚Üí Reply **out + STT** ƒë·ªÉ bot tho√°t nh√≥m (v√≠ d·ª•: out 2 4)` +
                           `\n‚Üí Reply **page + STT** ƒë·ªÉ xem c√°c trang kh√°c (v√≠ d·ª•: page 2)`;

                api.sendMessage(msgBody, threadID, (err, info) => {
                    if (err) return console.error("L·ªói khi g·ª≠i trang danh s√°ch:", err);
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: senderID
                    });
                }, messageID);
            }
                break;

            default:
                send(`‚ú® **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng l·ªánh ${prefix}${this.config.name}:**\n` +
                    `\n1. **${prefix}${this.config.name} list**: Xem danh s√°ch c√°c nh√≥m ƒëang thu√™ bot (trang ƒë·∫ßu ti√™n).\n` +
                    `\n2. **${prefix}${this.config.name} page [s·ªë trang]**: Xem danh s√°ch theo s·ªë trang c·ª• th·ªÉ (v√≠ d·ª•: ${prefix}${this.config.name} page 2).\n` +
                    `\n3. **${prefix}${this.config.name} add [s·ªë ng√†y ho·∫∑c ng√†y/th√°ng/nƒÉm] + (t√πy ch·ªçn) reply/tag ng∆∞·ªùi thu√™**: Th√™m/c·∫≠p nh·∫≠t th√¥ng tin thu√™ bot.\n` +
                    `   - V√≠ d·ª•: ${prefix}${this.config.name} add 30 (thu√™ 30 ng√†y cho ng∆∞·ªùi g·ª≠i)\n` +
                    `   - ${prefix}${this.config.name} add 30 @tag (thu√™ 30 ng√†y cho ng∆∞·ªùi ƒë∆∞·ª£c tag)\n` +
                    `   - ${prefix}${this.config.name} add 12/12/2025 @tag (ng√†y c·ª• th·ªÉ).\n` +
                    `\n4. **${prefix}${this.config.name} del**: X√≥a th√¥ng tin thu√™ bot c·ªßa nh√≥m hi·ªán t·∫°i.\n` +
                    `\n5. **${prefix}${this.config.name} del all**: X√≥a to√†n b·ªô danh s√°ch c√°c nh√≥m thu√™ bot.\n` +
                    `\n6. **${prefix}${this.config.name} info**: Xem th√¥ng tin chi ti·∫øt v·ªÅ vi·ªác thu√™ bot c·ªßa nh√≥m hi·ªán t·∫°i.\n` +
                    `\n7. **${prefix}${this.config.name} giahan [s·ªë ng√†y ho·∫∑c ng√†y/th√°ng/nƒÉm]**: Gia h·∫°n th·ªùi gian thu√™ bot cho nh√≥m hi·ªán t·∫°i, s·ªë ng√†y s·∫Ω c·ªông v√†o ng√†y h·∫øt h·∫°n c≈© (v√≠ d·ª•: ${prefix}${this.config.name} giahan 30 ho·∫∑c ${prefix}${this.config.name} giahan 01/01/2026).`);
                break;
        }
    } catch (e) {
        console.error("L·ªói trong h√†m run c·ªßa l·ªánh rt:", e);
        send("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën trong qu√° tr√¨nh x·ª≠ l√Ω l·ªánh. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
};

// --- H√†m x·ª≠ l√Ω ph·∫£n h·ªìi (handleReply) ---
exports.handleReply = async function (o) {
    const { api, event, Users, Threads } = o;
    const { threadID, messageID, senderID, args } = event;
    const handleReplyData = o.handleReply;

    const send = (msg, callback) => api.sendMessage(msg, threadID, callback, messageID);
    const prefix = (global.data.threadData.get(threadID) || {}).PREFIX || global.config.PREFIX;
    const botName = global.config.BOTNAME || "BOT DongDevüëæ";

    // ƒê·∫£m b·∫£o ch·ªâ ng∆∞·ªùi g·ª≠i l·ªánh ban ƒë·∫ßu m·ªõi ƒë∆∞·ª£c t∆∞∆°ng t√°c v·ªõi ph·∫£n h·ªìi n√†y
    if (senderID !== handleReplyData.author) {
        return;
    }

    // Lu√¥n t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi nh·∫•t t·ª´ file ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ƒë·ªìng b·ªô
    try {
        rentData = require(dataPath);
    } catch (e) {
        console.error("L·ªói khi t·∫£i l·∫°i file thuebot.json trong handleReply:", e);
        return send("L·ªói: Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu thu√™ bot m·ªõi nh·∫•t. Vui l√≤ng th·ª≠ l·∫°i l·ªánh ch√≠nh.");
    }

    const commandArgs = args[0] ? args[0].toLowerCase() : '';
    const itemsPerPage = 10;

    try {
        if (!isNaN(commandArgs)) {
            const itemIndex = parseInt(commandArgs) - 1;
            const info = rentData[itemIndex];

            if (!info) {
                return send(`STT **${commandArgs}** kh√¥ng t·ªìn t·∫°i trong danh s√°ch. Vui l√≤ng ki·ªÉm tra l·∫°i.`);
            }

            const userInfo = await Users.getInfo(info.id);
            const threadDetail = await Threads.getInfo(info.t_id);

            const userName = userInfo ? userInfo.name : "Kh√¥ng t√¨m th·∫•y";
            const threadName = threadDetail ? threadDetail.threadName : "Kh√¥ng t√¨m th·∫•y";

            const time_diff_ms = new Date(formatDateForDateObject(info.time_end)).getTime() - Date.now();
            const days = Math.floor(time_diff_ms / (1000 * 60 * 60 * 24));
            const hours = Math.floor((time_diff_ms / (1000 * 60 * 60)) % 24);

            let remainingTime = "";
            if (time_diff_ms < 0) {
                remainingTime = "ƒê√£ h·∫øt h·∫°n.";
            } else {
                remainingTime = `${days} ng√†y ${hours} gi·ªù l√† h·∫øt h·∫°n.`;
            }

            const attachments = [];
            const userAvatar = await streamURL(`https://graph.facebook.com/${info.id}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`);
            if (userAvatar) attachments.push(userAvatar);
            
            const threadImage = threadDetail && threadDetail.imageSrc ? await streamURL(threadDetail.imageSrc) : null;
            if (threadImage) attachments.push(threadImage);

            return send({
                body: `[ TH√îNG TIN THU√ä BOT ]\n\n` +
                      `üë§ T√™n ng∆∞·ªùi thu√™: ${userName}\n` +
                      `üåê Link Facebook: https://www.facebook.com/profile.php?id=${info.id}\n` +
                      `üèòÔ∏è Nh√≥m: ${threadName}\n` +
                      `‚ö° ID Nh√≥m: ${info.t_id}\n` +
                      `üìÜ Ng√†y Thu√™: ${info.time_start}\n` +
                      `‚è≥ H·∫øt H·∫°n: ${info.time_end}\n` +
                      `üìå C√≤n: ${remainingTime}`,
                attachment: attachments
            });
        } else if (commandArgs === 'del') {
            const sttToDelete = args.slice(1).map(Number).filter(n => !isNaN(n) && n > 0);

            if (sttToDelete.length === 0) {
                return send(`Vui l√≤ng cung c·∫•p **STT** c·ªßa nh√≥m mu·ªën x√≥a (v√≠ d·ª•: del 1 ho·∫∑c del 1 2 3).`);
            }

            const deletedThreads = [];
            let deletedCount = 0;
            sttToDelete.sort((a, b) => b - a);

            for (const stt of sttToDelete) {
                const index = stt - 1;
                if (index < 0 || index >= rentData.length) {
                    send(`STT **${stt}** kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.`);
                    continue;
                }
                const tidToDelete = rentData[index].t_id;
                deletedThreads.push(tidToDelete);
                rentData.splice(index, 1);
                deletedCount++;
            }
            
            if (deletedCount > 0) {
                send(`‚úÖ ƒê√£ **x√≥a ${deletedCount} box** kh·ªèi danh s√°ch thu√™ bot th√†nh c√¥ng!`);
                saveData();
                for (const tid of deletedThreads) {
                    await updateNickname(api, tid, prefix, botName, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY"));
                }
            } else {
                send("Kh√¥ng c√≥ nh√≥m n√†o ƒë∆∞·ª£c x√≥a.");
            }
        } else if (commandArgs === 'out') {
            const sttToOut = args.slice(1).map(Number).filter(n => !isNaN(n) && n > 0);

            if (sttToOut.length === 0) {
                return send(`Vui l√≤ng cung c·∫•p **STT** c·ªßa nh√≥m mu·ªën bot tho√°t (v√≠ d·ª•: out 1 ho·∫∑c out 1 2 3).`);
            }

            const exitedThreads = [];
            let exitedCount = 0;
            sttToOut.sort((a, b) => b - a);

            for (const stt of sttToOut) {
                const index = stt - 1;
                if (index < 0 || index >= rentData.length) {
                    send(`STT **${stt}** kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i.`);
                    continue;
                }
                const threadIdToExit = rentData[index].t_id;
                try {
                    await api.removeUserFromGroup(api.getCurrentUserID(), threadIdToExit);
                    exitedThreads.push(threadIdToExit);
                    rentData.splice(index, 1);
                    exitedCount++;
                } catch (error) {
                    console.error(`L·ªói khi tho√°t nh√≥m ${threadIdToExit}:`, error);
                    send(`‚ùå Kh√¥ng th·ªÉ tho√°t kh·ªèi nh√≥m c√≥ ID ${threadIdToExit}. C√≥ th·ªÉ bot kh√¥ng ƒë·ªß quy·ªÅn.`);
                }
            }

            if (exitedCount > 0) {
                send(`‚úÖ ƒê√£ **tho√°t ${exitedCount} nh√≥m** theo y√™u c·∫ßu v√† x√≥a kh·ªèi danh s√°ch thu√™ bot!`);
                saveData();
                for (const tid of exitedThreads) {
                    await updateNickname(api, tid, prefix, botName, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY"));
                }
            } else {
                send("Kh√¥ng c√≥ nh√≥m n√†o ƒë·ªÉ tho√°t ho·∫∑c STT kh√¥ng h·ª£p l·ªá.");
            }
        } else if (commandArgs === 'page') {
            const pageNumber = parseInt(args[1]);

            if (isNaN(pageNumber) || pageNumber < 1) {
                return send(`S·ªë trang kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng (v√≠ d·ª•: page 2).`);
            }

            const totalPages = Math.ceil(rentData.length / itemsPerPage);

            if (rentData.length === 0) {
                return send("Danh s√°ch thu√™ bot hi·ªán ƒëang tr·ªëng.");
            }
            if (pageNumber > totalPages) {
                return send(`S·ªë trang **${pageNumber}** v∆∞·ª£t qu√° gi·ªõi h·∫°n. T·ªïng s·ªë trang hi·ªán c√≥ l√† **${totalPages}**.`);
            }

            const startIndex = (pageNumber - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = rentData.slice(startIndex, endIndex);

            let msgBody = `[ DANH S√ÅCH C√ÅC NH√ìM THU√ä BOT - Trang ${pageNumber}/${totalPages}]\n\n`;
            if (pageData.length > 0) {
                msgBody += pageData.map((item, i) => {
                    const listItemNumber = startIndex + i + 1;
                    const status = new Date(formatDateForDateObject(item.time_end)).getTime() > Date.now() ? 'Ch∆∞a H·∫øt H·∫°n ‚úÖ' : 'ƒê√£ H·∫øt H·∫°n ‚ùé';
                    const userName = global.data.userName.get(item.id) || "Kh√¥ng t√¨m th·∫•y";
                    const threadName = (global.data.threadInfo.get(item.t_id) || {}).threadName || "Kh√¥ng t√¨m th·∫•y";
                    return `${listItemNumber}. ${userName}\nüìù T√¨nh tr·∫°ng: ${status}\nüåæ Nh√≥m: ${threadName}\nT·ª´: ${item.time_start}\nƒê·∫øn: ${item.time_end}`;
                }).join('\n\n');
            } else {
                msgBody += `Kh√¥ng c√≥ d·ªØ li·ªáu ·ªü trang ${pageNumber}.`;
            }

            msgBody += `\n\n--- H∆∞·ªõng d·∫´n t∆∞∆°ng t√°c ---` +
                       `\n‚Üí **Reply (ph·∫£n h·ªìi)** theo STT ƒë·ªÉ xem chi ti·∫øt` +
                       `\n‚Üí Reply **del + STT** ƒë·ªÉ x√≥a kh·ªèi danh s√°ch (v√≠ d·ª•: del 1 3 5)` +
                       `\n‚Üí Reply **out + STT** ƒë·ªÉ bot tho√°t nh√≥m (v√≠ d·ª•: out 2 4)` +
                       `\n‚Üí Reply **page + STT** ƒë·ªÉ xem c√°c trang kh√°c (v√≠ d·ª•: page 2)`;

            api.sendMessage(msgBody, threadID, (err, info) => {
                if (err) return console.error("L·ªói khi g·ª≠i trang danh s√°ch ph·∫£n h·ªìi:", err);
                global.client.handleReply.push({
                    name: this.config.name,
                    messageID: info.messageID,
                    author: senderID
                });
            }, messageID);
        } else {
            send(`‚ùé Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng:\n` +
                 `‚Üí S·ªë STT ƒë·ªÉ xem chi ti·∫øt (v√≠ d·ª•: 1)\n` +
                 `‚Üí **del + STT** ƒë·ªÉ x√≥a (v√≠ d·ª•: del 1 3 5)\n` +
                 `‚Üí **out + STT** ƒë·ªÉ bot tho√°t nh√≥m (v√≠ d·ª•: out 2 4)\n` +
                 `‚Üí **page + STT** ƒë·ªÉ xem trang kh√°c (v√≠ d·ª•: page 2)`);
        }
    } catch (e) {
        console.error("L·ªói trong h√†m handleReply c·ªßa l·ªánh rt:", e);
        send("ƒê√£ x·∫£y ra l·ªói kh√¥ng mong mu·ªën khi x·ª≠ l√Ω ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.");
    }
};
=======

const moment = require('moment-timezone');
const TIMEZONE = 'Asia/Ho_Chi_Minh';
module.exports.config = {
   name: 'rent',
   version: '1.3.7',
   hasPermssion: 3,
   credits: 'DC-Nam & DongDev source l·∫°i& Mod by NgHuy',
   description: 'thu√™ bot',
   commandCategory: 'Admin',
   usages: '[]',
   cooldowns: 5,
   usePrefix: false,
};
let fs = require('fs');
if (!fs.existsSync(__dirname + '/data'))
   fs.mkdirSync(__dirname + '/data');
let path = __dirname + '/data/thuebot.json';
let data = [];
let save = () => fs.writeFileSync(path, JSON.stringify(data));
if (!fs.existsSync(path)) save();
else data = require(path);
let form_mm_dd_yyyy = (input = '', split = input.split('/')) => `${split[1]}/${split[0]}/${split[2]}`;
let invalid_date = date => /^Invalid Date$/.test(new Date(date));

exports.run = function (o) {
   let send = (msg, callback) => o.api.sendMessage(msg, o.event.threadID, callback, o.event.messageID);
   if (!["61567780432797"].includes(o.event.senderID)) return send(`‚ö†Ô∏è Ch·ªâ Admin ch√≠nh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!`);

   switch (o.args[0]) {
      case 'add': {
         let userId = o.event.senderID;
         let threadId = o.event.threadID;
         let daysToAdd = 30; // M·∫∑c ƒë·ªãnh 30 ng√†y
     
         // Ki·ªÉm tra n·∫øu c√≥ tham s·ªë s·ªë ng√†y (VD: rent add 15 ƒë·ªÉ thu√™ 15 ng√†y)
         if (!isNaN(o.args[1]) && Number(o.args[1]) > 0) {
             daysToAdd = Number(o.args[1]);
         }
     
         let time_start = moment.tz('Asia/Ho_Chi_Minh').format('DD/MM/YYYY');
         let time_end = moment.tz('Asia/Ho_Chi_Minh').add(daysToAdd, 'days').format('DD/MM/YYYY');
     
         // Ki·ªÉm tra ID h·ª£p l·ªá
         if (isNaN(userId) || isNaN(threadId)) return send(`‚ö†Ô∏è ID Kh√¥ng H·ª£p L·ªá!`);
     
         // Th√™m v√†o danh s√°ch thu√™ bot
         data.push({ t_id: threadId, id: userId, time_start, time_end });
         save();
     
         send(`‚úÖ ƒê√£ th√™m v√†o danh s√°ch thu√™ bot!\nüë§ Ng∆∞·ªùi thu√™: ${global.data.userName.get(userId)}\nüìÖ Ng√†y b·∫Øt ƒë·∫ßu: ${time_start}\nüìÜ Ng√†y h·∫øt h·∫°n: ${time_end} (‚è≥ ${daysToAdd} ng√†y)`);
         break;
     }     
      function formatDate(dateString) {
         let [day, month, year] = dateString.split('/');
         return `${month}/${day}/${year}`;
     }     
      case 'list':
    if (data.length === 0) {
        send('‚ùé Kh√¥ng c√≥ nh√≥m n√†o ƒëang thu√™ bot!');
        break;
    }
    
    let listMessage = `üìå Danh s√°ch thu√™ bot\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    
    data.forEach((item, index) => {
        let isActive = new Date(formatDate(item.time_end)).getTime() >= Date.now() ? 'üü¢ C√≤n h·∫°n' : 'üî¥ H·∫øt h·∫°n';
        let groupName = global.data.threadInfo.get(item.t_id)?.threadName || "Kh√¥ng x√°c ƒë·ªãnh";
        
        listMessage += `üîπ ${index + 1}. ${global.data.userName.get(item.id) || "Kh√¥ng r√µ"}\n`;
        listMessage += `   üè† Nh√≥m: ${groupName}\n`;
        listMessage += `   ‚öôÔ∏è T√¨nh tr·∫°ng: ${isActive}\n`;
        listMessage += `   üóì Ng√†y thu√™: ${item.time_start}\n`;
        listMessage += `   ‚è≥ H·∫øt h·∫°n: ${item.time_end}\n`;
        listMessage += `   üåê Facebook: (https://www.facebook.com/profile.php?id=${item.id})\n`;
        listMessage += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n`;
    });

    listMessage += `üì¢ Reply [ del | out | giahan ] + stt ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông.\n`;
    listMessage += `‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n`;
    listMessage += `üë§ Admin: ${global.config.ADMIN_NAME}`;
    
    send(listMessage, (err, res) => {
        res.name = exports.config.name;
        res.event = o.event;
        res.data = data;
        global.client.handleReply.push({ ...res, type: 'list' });
    });
    break;
    
    case 'info':
      const rentInfo = data.find(entry => entry.t_id === o.event.threadID); 
      if (!rentInfo) {
          send(`‚ùé Kh√¥ng c√≥ d·ªØ li·ªáu thu√™ bot cho nh√≥m n√†y`); 
      } else {
          send(`[ Th√¥ng Tin Thu√™ Bot ]\n\nüë§ Ng∆∞·ªùi thu√™: ${global.data.userName.get(rentInfo.id)}\nüîó Link facebook: https://www.facebook.com/profile.php?id=${rentInfo.id}\nüóìÔ∏è Ng√†y Thu√™: ${rentInfo.time_start}\n‚åõ H·∫øt H·∫°n: ${rentInfo.time_end}\n\n‚©∫ C√≤n ${Math.floor((new Date(formatDate(rentInfo.time_end)).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} ng√†y ${Math.floor((new Date(formatDate(rentInfo.time_end)).getTime() - Date.now()) / (1000 * 60 * 60) % 24)} gi·ªù l√† h·∫øt h·∫°n`);
      } 
      break;

      default:
         send({
            body: `[ H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n‚©∫ rent add: th√™m nh√≥m v√†o danh s√°ch \n‚©∫ rent info: xem th√¥ng tin thu√™ bot c·ªßa nh√≥m\n‚©∫ rent list: xem danh s√°ch thu√™\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ Admin: ${global.config.ADMIN_NAME}`,
            attachment: global.vdanime.splice(0, 1)  
         });
         break;
   }
};
exports.handleReply = async function (o) {
   let _ = o.handleReply;
   let send = (msg, callback) => o.api.sendMessage(msg, o.event.threadID, callback, o.event.messageID);
   if (o.event.senderID != _.event.senderID)
      return;
   if (isFinite(o.event.args[0])) {
      let info = data[o.event.args[0] - 1];
      if (!info) return send(`‚ùé STT kh√¥ng t·ªìn t·∫°i!`);
      return send(`[ TH√îNG TIN NG∆Ø·ªúI THU√ä BOT ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ Ng∆∞·ªùi thu√™: ${global.data.userName.get(info.id)}\nüåê Link Facebook: https://www.facebook.com/profile.php?id=${info.id}\nüë• Nh√≥m: ${(global.data.threadInfo.get(info.t_id) || {}).threadName}\nüî∞ TID: ${info.t_id}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüìÜ Ng√†y Thu√™: ${info.time_start}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚è≥ Ng√†y h·∫øt H·∫°n: ${info.time_end}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n‚è∞ ${(() => {
 let time_diff = new Date(form_mm_dd_yyyy(info.time_end)).getTime() - (Date.now() + 25200000);
 let days = (time_diff / (1000 * 60 * 60 * 24)) << 0;
 let hour = ((time_diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)) << 0;
 if (time_diff <= 0) {
 return "ƒê√£ h·∫øt th·ªùi h·∫°n thu√™ üîê";
 } else {
   return `C√≤n ${days} ng√†y ${hour} gi·ªù l√† h·∫øt h·∫°n thu√™`;
 }
})()}`);
   } else if (o.event.args[0].toLowerCase() == 'del') {
      let deletedIds = [];
      o.event.args.slice(1).sort((a, b) => b - a).forEach(index => {
          if (data[index - 1]) {
              deletedIds.push(`üóëÔ∏è ${index}. ${global.data.userName.get(data[index - 1].id) || 'Kh√¥ng x√°c ƒë·ªãnh'}`);
              data.splice(index - 1, 1);
          }
      });
  
      if (deletedIds.length === 0) return send(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y STT h·ª£p l·ªá ƒë·ªÉ x√≥a!`);
  
      send(`‚úÖ ƒê√£ x√≥a th√†nh c√¥ng c√°c m·ª•c sau:\n\n${deletedIds.join('\n')}\n\nüìù T·ªïng s·ªë m·ª•c ƒë√£ x√≥a: ${deletedIds.length}`);
      save();  
   } else if (o.event.args[0].toLowerCase() == 'giahan') {
      let STT = o.event.args[1];
      let time_start = (require('moment-timezone')).tz('Asia/Ho_Chi_Minh').format('DD/MM/YYYY');
      let time_end = o.event.args[2];
      if (invalid_date(form_mm_dd_yyyy(time_start)) || invalid_date(form_mm_dd_yyyy(time_end))) return send(`‚ùé Th·ªùi Gian Kh√¥ng H·ª£p L·ªá!`);
      if (!data[STT - 1]) return send(`‚ùé STT kh√¥ng t·ªìn t·∫°i`);
      let $ = data[STT - 1];
      $.time_start = time_start;
      $.time_end = time_end;
      send(`‚òëÔ∏è ƒê√£ gia h·∫°n nh√≥m th√†nh c√¥ng!`);
   } else if (o.event.args[0].toLowerCase() == 'out') {
      for (let i of o.event.args.slice(1)) await o.api.removeUserFromGroup(o.api.getCurrentUserID(), data[i - 1].t_id);
      send(`‚ö†Ô∏è ƒê√£ out nh√≥m theo y√™u c·∫ßu`);
   };
   save();
};
 
>>>>>>> 4398b3a5fd9045b8de57d496d6bc325c61036aaa
