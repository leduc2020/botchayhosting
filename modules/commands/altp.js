<<<<<<< HEAD
Ôªøconst fs = require("fs");
const path = require("path");

// B·∫£ng ti·ªÅn th∆∞·ªüng 15 c√¢u
const PRIZE_MONEY = [
    10000, 20000, 30000, 50000, 100000,
    200000, 360000, 600000, 800000, 1500000,
    2500000, 3500000, 5000000, 8000000, 12000000
];

// Bi·∫øn to√†n c·ª•c ƒë·ªÉ theo d√µi c√°c tr√≤ ch∆°i ƒëang di·ªÖn ra
const activeGames = new Map(); // L∆∞u tr·∫°ng th√°i tr√≤ ch∆°i theo threadID

// H√†m hi·ªÉn th·ªã c√¢u h·ªèi v·ªõi x√°o tr·ªôn ƒë√°p √°n
function showQuestion(question, questionNum, totalMoney, helps, api, event, handleReply) {
    const currentPrize = PRIZE_MONEY[questionNum - 1].toLocaleString();
    const safeHaven = questionNum >= 5 ? PRIZE_MONEY[4].toLocaleString() : "0";

    // T·∫°o m·∫£ng ch·ª©a c√°c ƒë√°p √°n
    let answers = [
        { key: 'A', value: question.A },
        { key: 'B', value: question.B },
        { key: 'C', value: question.C },
        { key: 'D', value: question.D }
    ];

    // X√°o tr·ªôn m·∫£ng ƒë√°p √°n (Fisher-Yates shuffle)
    for (let i = answers.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [answers[i], answers[j]] = [answers[j], answers[i]];
    }

    // T·∫°o √°nh x·∫° ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n sau khi x√°o tr·ªôn
    const answerMap = {};
    answers.forEach((ans, index) => {
        answerMap[['A', 'B', 'C', 'D'][index]] = ans.key; // √Ånh x·∫° v·ªã tr√≠ m·ªõi sang key g·ªëc
    });

    // C·∫≠p nh·∫≠t ƒë√°p √°n ƒë√∫ng theo v·ªã tr√≠ m·ªõi
    const newCorrectAnswer = Object.keys(answerMap).find(key => answerMap[key] === question.dapan.toUpperCase());

    let helpText = "TR·ª¢ GI√öP (ch·ªçn s·ªë):\n";
    if (!helps.used1) helpText += "1. 50/50\n";
    if (!helps.used2) helpText += "2. Tr∆∞·ªùng quay\n";
    if (!helps.used3) helpText += "3. Kh√°n gi·∫£\n";
    if (!helps.used4) helpText += "4. G·ªçi ng∆∞·ªùi nh√†\n";

    const message = `
üéØ C√ÇU ${questionNum} - ${currentPrize} VND
${question.cauhoi}

A: ${answers[0].value}
B: ${answers[1].value}
C: ${answers[2].value}
D: ${answers[3].value}

${helpText}
‚è≥ B·∫°n c√≥ 40 gi√¢y ƒë·ªÉ tr·∫£ l·ªùi!
‚è≥ M·ªëc an to√†n: ${safeHaven} VND
    `;

    api.sendMessage(message, event.threadID, (err, info) => {
        const timeoutID = setTimeout(async () => {
            // Thu h·ªìi tin nh·∫Øn c√¢u h·ªèi
            await api.unsendMessage(info.messageID);
            const finalPrize = questionNum >= 5 ? PRIZE_MONEY[4] : 0;
            await api.sendMessage(
                `‚è∞ H·∫æT GI·ªú! B·∫°n thua do kh√¥ng tr·∫£ l·ªùi trong 40 gi√¢y.\n` +
                `ƒê√°p √°n ƒë√∫ng: ${newCorrectAnswer}\n` +
                `Gi·∫£i th√≠ch: ${question.giaithich}\n` +
                `B·∫°n nh·∫≠n ƒë∆∞·ª£c ${finalPrize.toLocaleString()} VND!`,
                event.threadID
            );
            if (finalPrize > 0) await global.Currencies.increaseMoney(event.senderID, finalPrize);
            activeGames.delete(event.threadID); // K·∫øt th√∫c tr√≤ ch∆°i ƒë·ªÉ ng∆∞·ªùi kh√°c c√≥ th·ªÉ ch∆°i
            // X√≥a handleReply ƒë·ªÉ tr√°nh x·ª≠ l√Ω th√™m
            global.client.handleReply = global.client.handleReply.filter(reply => reply.messageID !== info.messageID);
        }, 40000); // 40 gi√¢y

        global.client.handleReply.push({
            ...handleReply,
            messageID: info.messageID,
            step: "answering",
            timeoutID: timeoutID,
            answerMap: answerMap, // L∆∞u √°nh x·∫° ƒë·ªÉ ki·ªÉm tra ƒë√°p √°n
            newCorrectAnswer: newCorrectAnswer // L∆∞u ƒë√°p √°n ƒë√∫ng m·ªõi
        });
    });
}

module.exports.config = {
    name: "altp",
    version: "4.1.0", // C·∫≠p nh·∫≠t version ƒë·ªÉ ƒë√°nh d·∫•u t√≠nh nƒÉng x√°o tr·ªôn ƒë√°p √°n
    hasPermssion: 0,
    credits: "Niio-team (Vtuan) - Enhanced by D-Jukie, ChatGPT & Grok",
    description: "Game Ai L√† Tri·ªáu Ph√∫",
    commandCategory: "Game",
    usages: "altp",
    cooldowns: 0,
};

module.exports.run = async function ({ api, event }) {
    const { threadID, senderID } = event;

    // Ki·ªÉm tra xem c√≥ tr√≤ ch∆°i n√†o ƒëang di·ªÖn ra trong thread n√†y kh√¥ng
    if (activeGames.has(threadID)) {
        const currentPlayer = activeGames.get(threadID).author;
        if (currentPlayer !== senderID) {
            return api.sendMessage(
                "‚õî Hi·ªán t·∫°i ƒëang c√≥ ng∆∞·ªùi ch∆°i trong nh√≥m n√†y. Vui l√≤ng ƒë·ª£i h·ªç ho√†n th√†nh tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu!",
                threadID
            );
        }
    }

    const message = `
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
[ üèÜ ] AI L√Ä TRI·ªÜU PH√ö [ üèÜ ]
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

[ üìö ] Lu·∫≠t ch∆°i:
- 15 c√¢u h·ªèi, ti·ªÅn th∆∞·ªüng tƒÉng d·∫ßn
- 4 tr·ª£ gi√∫p (m·ªói lo·∫°i d√πng 1 l·∫ßn)
- B·∫°n c√≥ 40 gi√¢y ƒë·ªÉ tr·∫£ l·ªùi m·ªói c√¢u h·ªèi, n·∫øu kh√¥ng c√¢u h·ªèi s·∫Ω b·ªã thu h·ªìi v√† b·∫°n thua!
- C√°c ƒë√°p √°n s·∫Ω ƒë∆∞·ª£c x√°o tr·ªôn ng·∫´u nhi√™n m·ªói khi c√¢u h·ªèi ƒë∆∞·ª£c hi·ªÉn th·ªã.

[ üí∞ ] C∆† C·∫§U TI·ªÄN TH∆Ø·ªûNG V√Ä M·ªêC AN TO√ÄN:

‚Ä¢ M·ªëc C√¢u H·ªèi: C√¢u 1-4
- Ti·ªÅn Th∆∞·ªüng: 10,000 - 50,000 VND
- M·ªëc An To√†n: 0 VND
- N·∫øu Sai/Thua S·∫Ω Nh·∫≠n: 0 VND

‚Ä¢ M·ªëc C√¢u H·ªèi: C√¢u 5
- Ti·ªÅn Th∆∞·ªüng: 100,000 VND
- M·ªëc An To√†n: 100,000 VND
- N·∫øu Sai/Thua S·∫Ω Nh·∫≠n: 100,000 VND

‚Ä¢ M·ªëc C√¢u H·ªèi: C√¢u 6-15
- Ti·ªÅn Th∆∞·ªüng: 200,000 - 12,000,000 VND
- M·ªëc An To√†n: 100,000 VND
- N·∫øu Sai/Thua S·∫Ω Nh·∫≠n: 100,000 VND

- (M·ªëc An To√†n l√† s·ªë ti·ªÅn t·ªëi thi·ªÉu b·∫°n nh·∫≠n khi v∆∞·ª£t m·ªëc ƒë√≥, k·ªÉ c·∫£ khi sai ho·∫∑c thua ·ªü c√¢u ti·∫øp theo.)

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

[ üéÆ ] Ch·ªçn:
- G√µ "play" ƒë·ªÉ b·∫Øt ƒë·∫ßu ch∆°i
- (G√µ "d·ª´ng" ƒë·ªÉ gi·ªØ ti·ªÅn) `;

    api.sendMessage(message, threadID, (error, info) => {
        // L∆∞u tr·∫°ng th√°i tr√≤ ch∆°i
        activeGames.set(threadID, { author: senderID });
        global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: senderID,
            step: "choosing",
            questionNum: 0,
            totalMoney: 0,
            helps: {
                used1: false,
                used2: false,
                used3: false,
                used4: false
            },
            askedQuestions: []
        });
    });
}

module.exports.handleReply = async function ({ handleReply, event, api, Currencies }) {
    const { body, threadID, messageID, senderID } = event;
    const { step, question, questionNum, totalMoney, helps, askedQuestions, timeoutID, answerMap, newCorrectAnswer } = handleReply;

    // Ki·ªÉm tra ng∆∞·ªùi ch∆°i
    if (senderID !== handleReply.author) {
        return api.sendMessage("‚õî Kh√¥ng ph·∫£i l∆∞·ª£t c·ªßa b·∫°n!", threadID);
    }

    // H·ªßy timeout khi nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
    clearTimeout(timeoutID);

    api.unsendMessage(handleReply.messageID);

    // Helper function ƒë·ªÉ t·∫°o kh√≥a duy nh·∫•t cho m·ªôt c√¢u h·ªèi
    const generateQuestionKey = (q) => {
        return `${q.cauhoi.trim()}|||${q.dapan.trim()}`;
    };

    // L·∫•y c√¢u h·ªèi ng·∫´u nhi√™n
    const getQuestion = (difficulty, currentAskedQuestions) => {
        const file = path.join(__dirname, "Game", "altp.json");
        let data;
        try {
            data = JSON.parse(fs.readFileSync(file, "utf8"));
        } catch (e) {
            console.error(`[ALTP] L·ªói ƒë·ªçc ho·∫∑c parse file altp.json: ${e.message}`);
            api.sendMessage("ƒê√£ x·∫£y ra l·ªói khi ƒë·ªçc d·ªØ li·ªáu c√¢u h·ªèi. Vui l√≤ng ki·ªÉm tra file altp.json ho·∫∑c li√™n h·ªá admin.", threadID);
            return null;
        }

        const allQuestionsForDifficulty = data[difficulty] || [];
        const availableQuestions = allQuestionsForDifficulty.filter(q => {
            const qKey = generateQuestionKey(q);
            return !currentAskedQuestions.includes(qKey);
        });

        if (availableQuestions.length === 0) {
            console.warn(`[ALTP] H·∫øt c√¢u h·ªèi cho ƒë·ªô kh√≥: ${difficulty} ho·∫∑c t·∫•t c·∫£ ƒë√£ ƒë∆∞·ª£c h·ªèi.`);
            return null;
        }

        const selectedQuestion = availableQuestions[Math.floor(Math.random() * availableQuestions.length)];
        return selectedQuestion;
    };

    // X·ª≠ l√Ω l·ªánh d·ª´ng
    if (body.toLowerCase().includes("d·ª´ng")) {
        const finalPrize = questionNum >= 5 ? PRIZE_MONEY[4] : 0;
        const wonAmount = (questionNum > 0 && questionNum <= PRIZE_MONEY.length) ? PRIZE_MONEY[questionNum - 1] : 0;
        const actualWon = Math.max(wonAmount, finalPrize);

        if (actualWon > 0) await Currencies.increaseMoney(senderID, actualWon);
        activeGames.delete(threadID); // K·∫øt th√∫c tr√≤ ch∆°i
        return api.sendMessage(
            `üéâ B·∫°n d·ª´ng cu·ªôc ch∆°i t·∫°i c√¢u ${questionNum} v√† nh·∫≠n ${actualWon.toLocaleString()} VND!`,
            threadID
        );
    }

    // Ch·ªçn ch·∫ø ƒë·ªô
    if (step === "choosing" && body.toLowerCase() === "play") {
        const firstQuestion = getQuestion("de", askedQuestions);
        if (!firstQuestion) {
            activeGames.delete(threadID); // X√≥a tr·∫°ng th√°i n·∫øu kh√¥ng c√≥ c√¢u h·ªèi
            return api.sendMessage("Xin l·ªói, kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game. Kh√¥ng c√≥ c√¢u h·ªèi n√†o s·∫µn s√†ng.", threadID);
        }

        askedQuestions.push(generateQuestionKey(firstQuestion));

        showQuestion(firstQuestion, 1, 0, helps, api, event, {
            ...handleReply,
            question: firstQuestion,
            step: "answering",
            questionNum: 1,
            askedQuestions: askedQuestions
        });
        return;
    }

    // X·ª≠ l√Ω tr·ª£ gi√∫p (1-4)
    if (step === "answering" && /^[1-4]$/.test(body)) {
        const helpNum = parseInt(body);
        const helpKey = `used${helpNum}`;

        if (helps[helpKey]) {
            return api.sendMessage("‚ö†Ô∏è B·∫°n ƒë√£ d√πng tr·ª£ gi√∫p n√†y r·ªìi!", threadID);
        }

        helps[helpKey] = true;
        let result = "";

        // Khai b√°o allOptions d·ª±a tr√™n ƒë√°p √°n ƒë√£ x√°o tr·ªôn
        const allOptions = ['A', 'B', 'C', 'D'];

        switch (helpNum) {
            case 1: // 50/50
                const correct = newCorrectAnswer; // S·ª≠ d·ª•ng ƒë√°p √°n ƒë√∫ng m·ªõi
                const wrong = allOptions.filter(a => a !== correct);
                const removed = wrong.sort(() => 0.5 - Math.random()).slice(0, 2);
                result = `50/50: Lo·∫°i ${removed.join(", ")}\nC√≤n l·∫°i: ${correct} v√† ${allOptions.find(a => a !== correct && !removed.includes(a))}`;
                break;

            case 2: // Tr∆∞·ªùng quay
                const correctAnsStudio = newCorrectAnswer;
                const isStudioCorrect = Math.random() < 0.7;

                let studioSuggestions = [];
                let mainAnswerPercent;
                let otherAnswerPercent;
                let otherAnswer;

                if (isStudioCorrect) {
                    mainAnswerPercent = Math.floor(Math.random() * 21) + 60;
                    otherAnswerPercent = 100 - mainAnswerPercent;
                    const incorrectOptions = allOptions.filter(o => o !== correctAnsStudio);
                    otherAnswer = incorrectOptions[Math.floor(Math.random() * incorrectOptions.length)];
                    studioSuggestions.push({ ans: correctAnsStudio, percent: mainAnswerPercent });
                    studioSuggestions.push({ ans: otherAnswer, percent: otherAnswerPercent });
                } else {
                    const incorrectOptions = allOptions.filter(o => o !== correctAnsStudio);
                    const mainIncorrectAns = incorrectOptions[Math.floor(Math.random() * incorrectOptions.length)];
                    mainAnswerPercent = Math.floor(Math.random() * 21) + 50;
                    otherAnswerPercent = 100 - mainAnswerPercent;
                    otherAnswer = correctAnsStudio;
                    studioSuggestions.push({ ans: mainIncorrectAns, percent: mainAnswerPercent });
                    studioSuggestions.push({ ans: otherAnswer, percent: otherAnswerPercent });
                }

                studioSuggestions.sort((a, b) => b.percent - a.percent);
                result = `üé§ Tr∆∞·ªùng quay:\n` + studioSuggestions.map(s => `${s.ans}: ${s.percent}%`).join('\n');
                break;

            case 3: // Kh√°n gi·∫£
                const correctPercent = Math.floor(Math.random() * 31) + 40; // 40-70% cho ƒë√°p √°n ƒë√∫ng
                const remainingPercent = 100 - correctPercent; // Ph·∫ßn trƒÉm c√≤n l·∫°i
                const correctAnswer = newCorrectAnswer;
                const wrongOptions = allOptions.filter(a => a !== correctAnswer);

                // Ph√¢n b·ªï ph·∫ßn trƒÉm cho c√°c ƒë√°p √°n sai
                let distribution = [0, 0, 0];
                let currentSum = 0;
                for (let i = 0; i < 2; i++) {
                    distribution[i] = Math.floor(Math.random() * (remainingPercent - currentSum) / (3 - i));
                    currentSum += distribution[i];
                }
                distribution[2] = remainingPercent - currentSum;

                // G√°n ph·∫ßn trƒÉm cho t·ª´ng ƒë√°p √°n theo th·ª© t·ª± A, B, C, D
                const percentages = {};
                allOptions.forEach((option, index) => {
                    if (option === correctAnswer) {
                        percentages[option] = correctPercent;
                    } else {
                        percentages[option] = distribution[wrongOptions.indexOf(option)] || 0;
                    }
                });

                // Hi·ªÉn th·ªã theo th·ª© t·ª± A, B, C, D
                result = "üìä Kh√°n gi·∫£ b√¨nh ch·ªçn:\n" +
                    `A: ${percentages['A'] || 0}%\n` +
                    `B: ${percentages['B'] || 0}%\n` +
                    `C: ${percentages['C'] || 0}%\n` +
                    `D: ${percentages['D'] || 0}%`;
                break;

            case 4: // Ng∆∞·ªùi nh√†
                const isRight = Math.random() < 0.7;
                const answer = isRight
                    ? newCorrectAnswer
                    : allOptions.filter(a => a !== newCorrectAnswer)[Math.floor(Math.random() * 3)];
                result = `üìû Ng∆∞·ªùi nh√†: "${isRight ? 'Ch·∫Øc ch·∫Øn' : 'Nghi√™ng v·ªÅ'} ${answer}"`;
                break;
        }

        await api.sendMessage(result, threadID);
        showQuestion(question, questionNum, totalMoney, helps, api, event, handleReply);
        return;
    }

    // X·ª≠ l√Ω tr·∫£ l·ªùi
    if (step === "answering" && /^[a-dA-D]$/.test(body)) {
        const userAnswer = body.toUpperCase();
        const correctAnswer = newCorrectAnswer; // S·ª≠ d·ª•ng ƒë√°p √°n ƒë√∫ng m·ªõi

        if (userAnswer === correctAnswer) {
            const newTotal = PRIZE_MONEY[questionNum - 1];

            if (questionNum === 15) {
                await Currencies.increaseMoney(senderID, newTotal);
                activeGames.delete(threadID); // K·∫øt th√∫c tr√≤ ch∆°i
                return api.sendMessage(
                    `üèÜ CH√öC M·ª™NG! B·∫°n ƒë√£ chi·∫øn th·∫Øng v·ªõi 12,000,000 VND!\n` +
                    `ƒê√°p √°n: ${correctAnswer}\nGi·∫£i th√≠ch: ${question.giaithich}`,
                    threadID
                );
            }

            const nextQuestion = getQuestion(
                questionNum < 5 ? "de" :
                questionNum < 10 ? "binhthuong" :
                questionNum < 13 ? "kho" : "sieukho",
                askedQuestions
            );

            if (!nextQuestion) {
                await Currencies.increaseMoney(senderID, newTotal);
                activeGames.delete(threadID); // K·∫øt th√∫c tr√≤ ch∆°i
                return api.sendMessage(
                    `üèÜ CH√öC M·ª™NG! B·∫°n ƒë√£ tr·∫£ l·ªùi ƒë√∫ng ${questionNum} c√¢u v√† kh√¥ng c√≤n c√¢u h·ªèi n√†o ƒë·ªÉ ti·∫øp t·ª•c. B·∫°n nh·∫≠n ƒë∆∞·ª£c ${newTotal.toLocaleString()} VND!`,
                    threadID
                );
            }

            askedQuestions.push(generateQuestionKey(nextQuestion));

            await api.sendMessage(
                `‚úÖ ƒê√öNG! (+${newTotal.toLocaleString()} VND)\nGi·∫£i th√≠ch: ${question.giaithich}`,
                threadID
            );

            showQuestion(nextQuestion, questionNum + 1, newTotal, helps, api, event, {
                ...handleReply,
                question: nextQuestion,
                questionNum: questionNum + 1,
                totalMoney: newTotal,
                askedQuestions: askedQuestions
            });
        } else {
            const finalPrize = questionNum >= 5 ? PRIZE_MONEY[4] : 0;
            await api.sendMessage(
                `‚ùå SAI! ƒê√°p √°n: ${correctAnswer}\nGi·∫£i th√≠ch: ${question.giaithich}\n` +
                `B·∫°n nh·∫≠n ƒë∆∞·ª£c ${finalPrize.toLocaleString()} VND!`,
                threadID
            );
            if (finalPrize > 0) await Currencies.increaseMoney(senderID, finalPrize);
            activeGames.delete(threadID); // K·∫øt th√∫c tr√≤ ch∆°i
        }
    }
};
=======
const moneydown = 1000; // S·ª≠a s·ªë ti·ªÅn ƒëƒÉng k√≠ ch∆°i t·∫°i ƒë√¢y

const axios = require("axios");
const fs = require("fs-extra");
const request = require("request");
const { loadImage, createCanvas, registerFont } = require("canvas");
const path = __dirname + "/cache/question.png";
const pathhelp = __dirname + "/cache/helpaltp.png";

module.exports.config = {
  name: "altp",
  version: "2.0.0",
  hasPermssion: 0,
  credits: "Khoa x Nam",
  description: "ch∆∞∆°ng tr√¨nh Ai L√† Tri·ªáu Ph√∫ si√™u kh√≥ vip pro",
  commandCategory: "Game",
  usages: "register/play/info/stop",
  cooldowns: 0,
  images: [],
};

function equi(level) {
  if (level == 0) var tienthuong = 0x0;
  if (level == 1) var tienthuong = 0xC8;
  if (level == 2) var tienthuong = 0x190;
  if (level == 3) var tienthuong = 0x258;
  if (level == 4) var tienthuong = 0x3E8;
  if (level == 5) var tienthuong = 0x7D0;
  if (level == 6) var tienthuong = 0xBB8;
  if (level == 7) var tienthuong = 0x1770;
  if (level == 8) var tienthuong = 0x2710;
  if (level == 9) var tienthuong = 0x36B0;
  if (level == 10) var tienthuong = 0x55F0;
  if (level == 11) var tienthuong = 0x7530;
  if (level == 12) var tienthuong = 0x9C40;
  if (level == 13) var tienthuong = 0x13880;
  if (level == 14) var tienthuong = 0x249F0;
  if (level == 15) var tienthuong = 0x3D090;
  return tienthuong;
}

function getlink(helpp, dapan) {
  if (helpp == 1) {
    if (dapan == "A") var link = "https://i.postimg.cc/FKsB9FFL/A.png";
    if (dapan == "B") var link = "https://i.postimg.cc/XJtHcwff/B.png";
    if (dapan == "C") var link = "https://i.postimg.cc/9MDg7x7X/C.png";
    if (dapan == "D") var link = "https://i.postimg.cc/bvCFdXdF/D.png";
  }
  if (helpp == 3) {
    if (dapan == "A") var link = "https://i.postimg.cc/WzjrvzTR/A.png";
    if (dapan == "B") var link = "https://i.postimg.cc/sDjSHMT7/B.png";
    if (dapan == "C") var link = "https://i.postimg.cc/j2XfdTSD/C.png";
    if (dapan == "D") var link = "https://i.postimg.cc/wxcLkXQ9/D.png";
  }
  return link;
}

async function makeWinner(id, lv) {
  var arr = [];
  let canvas = createCanvas(1280, 720);
  let ctx = canvas.getContext("2d");
  let avatar = await loadImage(`https://graph.facebook.com/${id}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`);
  ctx.drawImage(avatar, 351, 75, 566, 566);
  let background = await loadImage("https://i.postimg.cc/gjyHDjYD/winner.png");
  ctx.drawImage(background, 0, 0, 1280, 720);
  var link = [
    "https://i.postimg.cc/6qzBnVGf/lv0.png",
    "https://i.postimg.cc/J7Qrf8dH/lv1.png",
    "https://i.postimg.cc/dttsvfzH/lv2.png",
    "https://i.postimg.cc/xdHYtVzC/lv3.png",
    "https://i.postimg.cc/cLvdtn1f/lv4.png",
    "https://i.postimg.cc/tCSXg5bX/lv5.png",
    "https://i.postimg.cc/d1YFfN29/lv6.png",
    "https://i.postimg.cc/x1Bnv1qh/lv7.png",
    "https://i.postimg.cc/Y287X3h1/lv8.png",
    "https://i.postimg.cc/2yHfVzPH/lv9.png",
    "https://i.postimg.cc/m2DsKHHK/lv10.png",
    "https://i.postimg.cc/4NSgGxvy/lv11.png",
    "https://i.postimg.cc/s2pd5PkG/lv12.png",
    "https://i.postimg.cc/vmRw12Nd/lv13.png",
    "https://i.postimg.cc/KzN6HGvZ/lv14.png",
    "https://i.postimg.cc/fLD4Cts2/lv15.png"
  ];
  let tienthuong = await loadImage(link[lv]);
  ctx.drawImage(tienthuong, 0, 0, 1280, 720);
  fs.writeFileSync(path, canvas.toBuffer("image/png"));
  arr.push(fs.createReadStream(path));
  return arr;
}

module.exports.handleReply = async function ({ event, Users, api, handleReply, Currencies }) {
  if (handleReply.type == "answer") {
    var { threadID, messageID, senderID } = event;
    if (senderID !== handleReply.author) return api.sendMessage("ùó°ùó¥ùòÇÃõùóºÃõÃÄùó∂ ùòÅùóÆ ƒëùóÆùóªùó¥ ùó∞ùóµùóºÃõùó∂ , ƒëùó∂ ùóøùóÆ ùó∞ùóµùóºÃÇÃÉ ùó∏ùóµùóÆÃÅùó∞", threadID, messageID);
    var name = await Users.getNameUser(senderID);
    var senderInfo = await Users.getData(senderID);
    var choose = event.body.toUpperCase();
    var mot = handleReply.one;
    var hai = handleReply.two;
    var ba = handleReply.three;
    var a = handleReply.author;
    var b = handleReply.dapandung;
    var c = handleReply.giaithich;
    var loz = handleReply.link;

    if (choose == "HELP 1" || choose == "HELP1") {
      if (senderInfo.data.helpaltp.helpm !== 1) return api.sendMessage("ùóïùóÆÃ£ùóª ƒëùóÆÃÉ ùó±ùòÇÃÄùóªùó¥ ùóæùòÇùòÜùó≤ÃÇÃÄùóª ùòÅùóøùóºÃõÃ£ ùó¥ùó∂ùòÇÃÅùóΩ ùóªùóÆÃÄùòÜ ùóøùóºÃÇÃÄùó∂", threadID, messageID);
      api.unsendMessage(handleReply.messageID);
      let canvas = createCanvas(588, 375);
      let background = await loadImage(loz);
      let ctx = canvas.getContext("2d");
      ctx.drawImage(background, 0, 0, 588, 375);
      let loaibo1 = await loadImage(getlink(1, mot[0]));
      let loaibo2 = await loadImage(getlink(1, mot[1]));
      ctx.drawImage(loaibo1, 0, 0, 588, 375);
      ctx.drawImage(loaibo2, 0, 0, 588, 375);
      if (senderInfo.data.helpaltp.helpb == 2) {
        let tuvan1 = await loadImage(getlink(3, ba[0]));
        let tuvan2 = await loadImage(getlink(3, ba[1]));
        let tuvan3 = await loadImage(getlink(3, ba[2]));
        ctx.drawImage(tuvan1, 407, 50, 181, 50);
        ctx.drawImage(tuvan2, 407, 100, 181, 50);
        ctx.drawImage(tuvan3, 407, 150, 181, 50);
      }
      fs.writeFileSync(pathhelp, canvas.toBuffer("image/png"));
      senderInfo.data.helpaltp.helpm = 2;
      await Users.setData(senderID, senderInfo);
      var fuckk = `ùóõùó≤Ã£ÃÇ ùòÅùóµùóºÃÇÃÅùóªùó¥ ƒëùóÆÃÉ ùóπùóºùóÆÃ£ùó∂ ùóØùóºÃâ ùóµùóÆùòÜ ùóΩùóµùòÇÃõùóºÃõùóªùó¥ ùóÆÃÅùóª ùòÄùóÆùó∂ ùóπùóÆÃÄ ${mot[0]} ùòÉùóÆÃÄ ${mot[1]}`;
      if (senderInfo.data.helpaltp.helph == 1 || senderInfo.data.helpaltp.helpb == 1) fuckk += "\n== [ ùóñùó¢ÃÅ 2 ùó¶ùó®ÃõÃ£ ùóßùó•ùó¢ÃõÃ£ ùóöùóúùó®ÃÅùó£ ] ==";
      if (senderInfo.data.helpaltp.helph == 1) fuckk += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help2 " H·ªèi √Ω ki·∫øn kh√°n gi·∫£';
      if (senderInfo.data.helpaltp.helpb == 1) fuckk += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help3 " H·ªèi t·ªï t∆∞ v·∫•n t·∫°i ch·ªó';
      return api.sendMessage({
        body: fuckk,
        attachment: fs.createReadStream(pathhelp)}, threadID, (error, info) => {
          global.client.handleReply.push({
            type: "answer",
            name: this.config.name,
            author: a,
            dapandung: b,
            giaithich: c,
            one: mot,
            two: hai,
            three: ba,
            link: loz,
            level: senderInfo.data.altp.level,
            messageID: info.messageID
          })
        fs.unlinkSync(pathhelp)
      })
    }
    if (senderInfo.data.helpaltp.helpm == 2 && (choose == mot[0] || choose == mot[1])) return api.sendMessage("ƒêùóÆÃÅùóΩ ùóÆÃÅùóª ùóªùóÆÃÄùòÜ ƒëùóÆÃÉ ùóØùó∂Ã£ ùóπùóºùóÆÃ£ùó∂ ùóØùóºÃâ!", threadID, messageID);

    if (choose == "HELP 2" || choose == "HELP2") {
      if (senderInfo.data.helpaltp.helph !== 1) return api.sendMessage("ùóïùóÆÃ£ùóª ƒëùóÆÃÉ ùó±ùòÇÃÄùóªùó¥ ùóæùòÇùòÜùó≤ÃÇÃÄùóª ùòÅùóøùóºÃõÃ£ ùó¥ùó∂ùòÇÃÅùóΩ ùóªùóÆÃÄùòÜ ùóøùóºÃÇÃÄùó∂", threadID, messageID);
  var linkhai = hai.length == 1 ? hai[0] : senderInfo.data.helpaltp.helpm == 2 ? hai[1] : hai[0];
      var down = (await axios.get(linkhai, { responseType: "arraybuffer" })).data;
      fs.writeFileSync(pathhelp, Buffer.from(down, "utf-8"));
      senderInfo.data.helpaltp.helph = 2;
      await Users.setData(senderID, senderInfo);
      return api.sendMessage({
        body: "ƒêùóÆÃÇùòÜ ùóπùóÆÃÄ ùó∏ùó≤ÃÇÃÅùòÅ ùóæùòÇùóÆÃâ ùó∏ùóµùóÆÃâùóº ùòÄùóÆÃÅùòÅ ùòÜÃÅ ùó∏ùó∂ùó≤ÃÇÃÅùóª ùó∏ùóµùóÆÃÅùóª ùó¥ùó∂ùóÆÃâ!",
        attachment: fs.createReadStream(pathhelp)
      }, threadID, () => fs.unlinkSync(pathhelp), messageID);
    }

    if (choose == "HELP 3" || choose == "HELP3") {
      if (senderInfo.data.helpaltp.helpb !== 1) return api.sendMessage("ùóïùóÆÃ£ùóª ƒëùóÆÃÉ ùó±ùòÇÃÄùóªùó¥ ùóæùòÇùòÜùó≤ÃÇÃÄùóª ùòÅùóøùóºÃõÃ£ ùó¥ùó∂ùòÇÃÅùóΩ ùóªùóÆÃÄùòÜ ùóøùóºÃÇÃÄùó∂", threadID, messageID);
      api.unsendMessage(handleReply.messageID);
      let background = await loadImage(loz);
      let tuvan1 = await loadImage(getlink(3, ba[0]));
      let tuvan2 = await loadImage(getlink(3, ba[1]));
      let tuvan3 = await loadImage(getlink(3, ba[2]));
      let canvas = createCanvas(588, 375);
      let ctx = canvas.getContext("2d");
      ctx.drawImage(background, 0, 0, 588, 375);
      if (senderInfo.data.helpaltp.helpm == 2) {
        let loaibo1 = await loadImage(getlink(1, mot[0]));
        let loaibo2 = await loadImage(getlink(1, mot[1]));
        ctx.drawImage(loaibo1, 0, 0, 588, 375);
        ctx.drawImage(loaibo2, 0, 0, 588, 375);
      }
      ctx.drawImage(tuvan1, 407, 50, 181, 50);
      ctx.drawImage(tuvan2, 407, 100, 181, 50);
      ctx.drawImage(tuvan3, 407, 150, 181, 50);
      fs.writeFileSync(pathhelp, canvas.toBuffer("image/png"));
      senderInfo.data.helpaltp.helpb = 2;
      await Users.setData(senderID, senderInfo);
      var bd = "ƒêùóÆÃÇùòÜ ùóπùóÆÃÄ ùòÜÃÅ ùó∏ùó∂ùó≤ÃÇÃÅùóª ùó∞ùòÇÃâùóÆ ùüØ ùóªùó¥ùòÇÃõùóºÃõÃÄùó∂ ùòÅùóøùóºùóªùó¥ ùòÅùóºÃÇÃâ ùòÅùòÇÃõ ùòÉùóÆÃÇÃÅùóª!";
      if (senderInfo.data.helpaltp.helpm == 1 || senderInfo.data.helpaltp.helph == 1) bd += "\n== [ ùóñùó¢ÃÅ 2 ùó¶ùó®ÃõÃ£ ùóßùó•ùó¢ÃõÃ£ ùóöùóúùó®ÃÅùó£ ] ==";
      if (senderInfo.data.helpaltp.helpm == 1)  bd += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help1 " 50 ƒë√∫ng 50 sai';
      if (senderInfo.data.helpaltp.helph == 1)  bd += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help2 " h·ªèi √Ω ki·∫øn kh√°n gi·∫£';
      return api.sendMessage({
        body: bd,
        attachment: fs.createReadStream(pathhelp)}, threadID, (error, info) => {
          global.client.handleReply.push({
            type: "answer",
            name: this.config.name,
            author: a,
            dapandung: b,
            giaithich: c,
            one: mot,
            two: hai,
            three: ba,
            link: loz,
            level: senderInfo.data.altp.level,
            messageID: info.messageID
          })
        fs.unlinkSync(pathhelp)
      })
    }

    if (choose !== "A" && choose !== "B" && choose !== "C" && choose !== "D") return api.sendMessage("ùóûùóµùóºÃÇùóªùó¥ ùóµùóºÃõÃ£ùóΩ ùóπùó≤Ã£ÃÇ",threadID, messageID);
    if (choose == handleReply.dapandung) {
      var levelcc = handleReply.level + 1;
      if (levelcc < 15) {
        api.unsendMessage(handleReply.messageID);
        var djtme = levelcc == 1 ? "‚ûù c√¢u h·ªèi ƒë·∫ßu ti√™n" : `‚ûù c√¢u h·ªèi s·ªë ${levelcc}`;
        api.sendMessage(`‚ûù ${choose} l√† ƒë√°p √°n ch√≠nh x√°c, ${handleReply.giaithich}\n\n‚ûù Xin ch√∫c m·ª´ng ng∆∞·ªùi ch∆°i ${name} ƒë√£ xu·∫•t s·∫Øc tr·∫£ l·ªùi ƒë√∫ng ${djtme} n√¢ng m·ª©c ph·∫ßn th∆∞·ªüng l√™n ${equi(levelcc)}$`, threadID, messageID);
        var cauhoi = levelcc + 1;
try {
        const res = await axios.get(`https://raw.githubusercontent.com/dongdev06/ailatrieuphu/main/altp${cauhoi}.json`);
        var x = Math.floor(Math.random() * res.data.allquestion.length);
        var question = res.data.allquestion[x];
        var linkanh = question.link;
        var dapandung = question.dapan;
        var giaithich = question.giaithich;
        var helpmot = question.helpone;
        var helphai = question.helptwo;
        var helpba = question.helpthree;
        senderInfo.data.altp = { level: levelcc, rd: x };
        if (senderInfo.data.helpaltp.helpm == 2) senderInfo.data.helpaltp.helpm = 0;
        if (senderInfo.data.helpaltp.helph == 2) senderInfo.data.helpaltp.helph = 0;
        if (senderInfo.data.helpaltp.helpb == 2) senderInfo.data.helpaltp.helpb = 0;
        await Users.setData(senderID, senderInfo);
        var cc = cauhoi == 5 ? "‚ûù C√¢u h·ªèi c·ªôt m·ªëc ƒë·∫ßu ti√™n" : cauhoi == 10 ? "‚ûù C√¢u h·ªèi c·ªôt m·ªëc th·ª© hai" : cauhoi == 15 ? "‚ûù C√¢u h·ªèi cu·ªëi c√πng" : `‚ûù C√¢u h·ªèi s·ªë ${cauhoi}`;
        var lmao = cc !== `C√¢u h·ªèi s·ªë ${cauhoi}` ? "tr·ªã gi√°" : "n√¢ng m·ª©c ph·∫ßn th∆∞·ªüng l√™n";
        var bruh = `${cc} ${lmao} ${equi(cauhoi)}$`;
        if (senderInfo.data.helpaltp.helpm == 1 || senderInfo.data.helpaltp.helph == 1 || senderInfo.data.helpaltp.helpb == 1) bruh += "\n== [ ùóñùó¢ÃÅ 3 ùó¶ùó®ÃõÃ£ ùóßùó•ùó¢ÃõÃ£ ùóöùóúùó®ÃÅùó£ ] ==";
        if (senderInfo.data.helpaltp.helpm == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help1 " 50 ƒë√∫ng 50 sai';
        if (senderInfo.data.helpaltp.helph == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help2 " h·ªèi √Ω ki·∫øn kh√°n gi·∫£';
        if (senderInfo.data.helpaltp.helpb == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help3 " h·ªèi t·ªï t∆∞ v·∫•n t·∫°i ch·ªó';
        var callback = () => api.sendMessage({
        body: `${bruh}`,
        attachment: fs.createReadStream(path)}, threadID, (error, info) => {
          global.client.handleReply.push({
            type: "answer",
            name: this.config.name,
            author: senderID,
            dapandung: dapandung,
            giaithich: giaithich,
            one: helpmot,
            two: helphai,
            three: helpba,
            link: linkanh,
            level: senderInfo.data.altp.level,
            messageID: info.messageID
          })
        fs.unlinkSync(__dirname + "/cache/question.png")
        })
        return request(linkanh).pipe(fs.createWriteStream(path)).on("close",() => callback());
} catch (error) {
  return api.sendMessage(`‚ûù ƒê√£ x·∫£y ra l·ªói khi l·∫•y c√¢u h·ªèi ti·∫øp theo!\n${error}`,threadID);
}
      } else if (levelcc == 15) {
        api.unsendMessage(handleReply.messageID);
        Currencies.increaseMoney(senderID, 0x3D090);
        senderInfo.data.altp = { level: -1, rd: -1 };
        await Users.setData(senderID, senderInfo);
        return api.sendMessage({ body: `‚ûù ${choose} l√† ƒë√°p √°n ch√≠nh x√°c, ${handleReply.giaithich}\n\n‚ûù
 Xin ch√∫c m·ª´ng ng∆∞·ªùi ch∆°i ${name} ƒë√£ xu·∫•t s·∫Øc v∆∞·ª£t qua 15 c√¢u h·ªèi c·ªßa ch∆∞∆°ng tr√¨nh mang v·ªÅ 250000$\n‚ûù H·∫πn g·∫∑p l·∫°i b·∫°n ·ªü ch∆∞∆°ng tr√¨nh l·∫ßn sau!`, attachment: await makeWinner(senderID, 15)}, threadID, () => fs.unlinkSync(path), messageID);
      }
    } else {
      api.unsendMessage(handleReply.messageID);
      var level = handleReply.level;
      if (level >= 5 && level < 10) { var tienthuong = 0x7D0; } else if (level >= 10) { var tienthuong = 0x55F0; } else var tienthuong = 0;
      senderInfo.data.altp = { level: -1, rd: -1 };
      await Users.setData(senderID, senderInfo);
      if (tienthuong == 0x7D0) var moc = "ƒë·∫ßu ti√™n", xx = 5;
      if (tienthuong == 0x55F0) var moc = "th·ª© hai", xx = 10;
      if (moc == "ƒë·∫ßu ti√™n" || moc == "th·ª© hai") {
        Currencies.increaseMoney(senderID, tienthuong);
        return api.sendMessage({ body:`‚ûù ${choose} l√† ƒë√°p √°n kh√¥ng ch√≠nh x√°c, c√¢u tr·∫£ l·ªùi ƒë√∫ng c·ªßa ch√∫ng ta l√† ${handleReply.dapandung}, ${handleReply.giaithich}\n\n‚ûù Ng∆∞·ªùi ch∆°i c·ªßa ch√∫ng ta ƒë√£ tr·∫£ l·ªùi sai v√† ra v·ªÅ v·ªõi ph·∫ßn th∆∞·ªüng ·ªü m·ªëc ${moc} l√† ${tienthuong}$\n‚ûù C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh, h·∫πn g·∫∑p l·∫°i b·∫°n ·ªü ch∆∞∆°ng tr√¨nh l·∫ßn sau!`, attachment: await makeWinner(senderID, xx)}, threadID, () => fs.unlinkSync(path), messageID);
      } else {
        return api.sendMessage({ body: `‚ûù ${choose} l√† ƒë√°p √°n kh√¥ng ch√≠nh x√°c, c√¢u tr·∫£ l·ªùi ƒë√∫ng c·ªßa ch√∫ng ta l√† ${handleReply.dapandung}, ${handleReply.giaithich}\n\n‚ûù C·∫£m ∆°n b·∫°n ƒë√£ tham gia ch∆∞∆°ng tr√¨nh, h·∫πn g·∫∑p l·∫°i b·∫°n ·ªü ch∆∞∆°ng tr√¨nh l·∫ßn sau!`, attachment: await makeWinner(senderID, 0)}, threadID, () => fs.unlinkSync(path), messageID); 
      }
    }
  }
}


module.exports.run = async function ({ api, event, args, Currencies, Users}) {
  const { ADMINBOT, PREFIX } = global.config;
  const timeVN = require("moment-timezone").tz("Asia/Ho_Chi_Minh"),
  gio = timeVN.format("HH:mm:ss"),
  ngay = timeVN.format("DD/MM/YYYY")
  const threadSetting = global.data.threadData.get(event.threadID) || {};
  var prefix = threadSetting.PREFIX || PREFIX;
  const { configPath } = global.client;
  delete require.cache[require.resolve(configPath)];
  var config = require(configPath);
  var { threadID, messageID, senderID } = event;
  const dataMoney = await Currencies.getData(senderID);
  const money = dataMoney.money;
  var senderInfo = await Users.getData(senderID);
  var playto = (!senderInfo.data.altp || senderInfo.data.altp.level == -1) ? "B·∫Øt ƒë·∫ßu ch∆°i (c·∫ßn ƒëƒÉng k√≠)" : senderInfo.data.altp.level == 0 ? "B·∫Øt ƒë·∫ßu ch∆°i" : `ch∆°i ti·∫øp t·∫°i c√¢u h·ªèi s·ªë ${senderInfo.data.altp.level}`;

var path = __dirname + "/cache/altp.png";
    let getimg = (await axios.get(`https://i.imgur.com/PiUzRJK.png`, { responseType: 'arraybuffer' })).data;
  fs.writeFileSync(path, Buffer.from(getimg, "utf-8"));
  
  var msg = "=== [ ùóîùóú ùóüùóîÃÄ ùóßùó•ùóúùóòÃ£ÃÇùó® ùó£ùóõùó®ÃÅ ] ===" + "\n"
+ prefix + "ùóîùóüùóßùó£ ùó•ùóòùóöùóúùó¶ùóßùóòùó• ‚ûù ƒêƒÉng k√≠ ch∆∞∆°ng tr√¨nh (c·∫ßn 1000$)" + "\n"
+ prefix + "ùóîùóüùóßùó£ ùó£ùóüùóîùó¨ ‚ûù " + playto + "\n"
+ prefix + "ùóîùóüùóßùó£ ùóúùó°ùóôùó¢ ‚ûù Xem th√¥ng tin c√¢u h·ªèi v√† ti·ªÅn th∆∞·ªüng" + "\n"
+ prefix + "ùóîùóüùóßùó£ ùóßùó¢ùó£ <ùóïùó¢ùó´/ùó¶ùóòùó©ùóòùó•> ‚ûù Xem h·∫°ng level box v√† sever" + "\n"
+ prefix + "ùóîùóüùóßùó£ ùó¶ùóßùó¢ùó£ ‚ûù D·ª´ng ch∆°i v√† nh·∫≠n ti·ªÅn th∆∞·ªüng"
  if (ADMINBOT.includes(senderID)) msg += `\nùóîùóüùóßùó£ ùó¶ùóòùóßùóüùó© ‚ûù Set level c·ªßa @tag (d√†nh ri√™ng admin)\n\n`;
  if (args.length == 0) return api.sendMessage({ body: msg , attachment: fs.createReadStream(__dirname + "/cache/altp.png")}, event.threadID, event.messageID);

  var type = args[0].toLowerCase();
  const allType = ["register","play","info","stop","setlv","top"];
  if (!allType.includes(type)) return api.sendMessage(msg, threadID, messageID);
  
  if (type == "top") {
    if (args.length == 1 || (args[1] !== "box" && args[1] !== "sever")) return api.sendMessage(`‚ûù C√∫ ph√°p: ${prefix}altp top <Box/Sever>`,threadID, messageID);
    var arr = [], count = 0;
    let allID = args[1] == "box" ? (await api.getThreadInfo(threadID)).participantIDs : args[1] == "sever" ? global.data.allUserID : ""
    for (const i of allID) {
      let dataUser = await Users.getData(i)
      var lv = (!dataUser.data.altp || dataUser.data.altp.level == -1) ? 0 : dataUser.data.altp.level;
      arr.push({
        idUser: i,
        nameUser: dataUser.name,
        level: lv
      })
      ++count;
      if (count > 10) break;
    }
    count = 0;
    arr.sort(VC("level"));
    var msg = `ùóßùó¢ùó£ ${arr.length} ùó°ùóöùó®Ãõùó¢ÃõÃÄùóú ùóñùóõùó¢Ãõùóú ùóñùó¢ÃÅ ùóüùóòùó©ùóòùóü ùóñùóîùó¢ ùó°ùóõùóîÃÇÃÅùóß ${args[1] == "box" ? "nh√≥m" : args[1] == "sever" ? "server" : ""}\n`.toUpperCase()
    for (const i in arr) {
      msg += `${count == 1 ? "„Äåü•á„Äç" : count == 2 ? "„Äåü•à„Äç" : count == 3 ? "„Äåü•â„Äç" : ""} ${count == 0 ? "„ÄåüèÜ„Äç" : `${count}`} ${arr[i].nameUser}\n‚ûù ùóüùóòùó©ùóòùóü: ${arr[i].level}\n`;
      ++count
      if (count >= 10) break;
    }
    api.sendMessage(msg, event.threadID);

    function VC(key) {
      return function(a, b) {
        if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) return 0;
        let sos = 0;
        if (a[key] > b[key]) {
          sos = 1
        } else if (a[key] < b[key]) {
          sos = -1
        }
        return sos * -1
      }
    }
  }
  
  if (type == "setlv") {
    try {
      if (!ADMINBOT.includes(event.senderID)) return api.sendMessage("‚ûù B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ d√πng t√≠nh nƒÉng n√†y!", threadID, messageID);
      var lv = parseInt(args[1]);
      if (isNaN(lv) || lv < 0 || lv > 15) return api.sendMessage(`‚ûù Level ${args[1]} kh√¥ng h·ª£p l·ªá!`, threadID, messageID);
      let mention = Object.keys(event.mentions);
      var arr = [];
      var allName = [];
      if (event.type == 'message_reply') {
        arr.push(event.messageReply.senderID)
      } else if (mention.length != 0) {
        for (var i = 0; i < mention.length; i++) arr.push(mention[i])
      } else arr.push(event.senderID)
      for (var i = 0; i < arr.length; i++) {
        var Info = await Users.getData(arr[i]);
        if (!Info.data.altp || Info.data.altp.level == -1) Info.data.helpaltp = { helpm: 1, helph: 1, helpb: 1 };
        Info.data.altp = {
          level: lv,
          rd: -1
        };
        await Users.setData(arr[i], Info);
        if (arr[i] == senderID) {
          allName.push("b·∫£n th√¢n");
        } else allName.push(`${i == 0 ? "" : " "}${Info.name}`)
      }
      return api.sendMessage(`ƒê√£ ƒë·∫∑t level c·ªßa ${allName} th√†nh ${lv}!`, threadID, messageID);
    } catch (error) {
      return api.sendMessage(`${error}!`, threadID, messageID);
    }
  }

  if (type == "register") {
    if (senderInfo.data.altp && senderInfo.data.altp.level !== -1) return api.sendMessage("‚ûù B·∫°n ƒë√£ ƒëƒÉng k√≠ r·ªìi, vui l√≤ng v∆∞·ª£t qua h·∫øt c√¢u h·ªèi ho·∫∑c d·ª´ng cu·ªôc ch∆°i ƒë·ªÉ c√≥ th·ªÉ ƒëƒÉng k√≠ l·∫°i!", threadID, messageID);
    if (money < moneydown) return api.sendMessage(`‚ûù B·∫°n kh√¥ng c√≥ ƒë·ªß ${moneydown} ƒë·ªÉ ƒëƒÉng k√≠, vui l√≤ng theo th·∫ßy Hu·∫•n l√†m ƒÉn b∆∞∆°n ch·∫£i!`, threadID, messageID);
    return api.sendMessage(`‚ûù Th·∫£ icon v√†o tin nh·∫Øn n√†y ƒë·ªÉ x√°c nh·∫≠n d√πng ${moneydown}$ ƒëƒÉng k√≠ tham gia ch∆∞∆°ng tr√¨nh!`, threadID, (error, info) => {
      global.client.handleReaction.push({
        name: this.config.name,
        messageID: info.messageID,
        author: senderID,
        type: "register"
      })
    }, messageID)
  };
  
  if (type == "stop") {
    if (!senderInfo.data.altp || senderInfo.data.altp.level == -1) return api.sendMessage("‚ûù B·∫°n ch∆∞a ƒëƒÉng k√≠ tham gia ch∆∞∆°ng tr√¨nh!", threadID, messageID);
    var abc = senderInfo.data.altp.level;
    return api.sendMessage(`‚ûù Th·∫£ icon v√†o tin nh·∫Øn n√†y ƒë·ªÉ x√°c nh·∫≠n d·ª´ng cu·ªôc ch∆°i t·∫°i ƒë√¢y v√† ra v·ªÅ v·ªõi ph·∫ßn th∆∞·ªüng ${equi(abc)}$`, threadID, (error, info) => {
      global.client.handleReaction.push({
        name: this.config.name,
        messageID: info.messageID,
        author: senderID,
        type: "stop"
      })
    }, messageID)
  };
  
  if (type == "info") {
    const pathinfo = __dirname + '/cache/info.png';
    if (!senderInfo.data.altp || senderInfo.data.altp.level == -1) {
      var down = (await axios.get("https://i.postimg.cc/gJT4rzCb/chuadangki.png", { responseType: "arraybuffer" })).data;
      fs.writeFileSync(pathinfo, Buffer.from(down, "utf-8"));
      return api.sendMessage({body: `‚ûù D√πng ${prefix}altp register ƒë·ªÉ ƒëƒÉng k√≠!`, attachment: fs.createReadStream(pathinfo)}, threadID, () => fs.unlinkSync(pathinfo), messageID);
    }
    var lv = senderInfo.data.altp.level;
    let canvas = createCanvas(1149, 1600);
    let ctx = canvas.getContext("2d");
    let avatar = await loadImage(`https://graph.facebook.com/${senderID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`);
    ctx.drawImage(avatar, 49, 25, 204, 204);
    var linkinfo = [
      "https://i.postimg.cc/fbM8rgcp/lv0.png",
      "https://i.postimg.cc/jCVXQ8q8/lv1.png",
      "https://i.postimg.cc/Pxx2tpFM/lv2.png",
      "https://i.postimg.cc/RhJdtrm6/lv3.png",
      "https://i.postimg.cc/HWJ1zVs5/lv4.png",
      "https://i.postimg.cc/TPQtMqQw/lv5.png",
      "https://i.postimg.cc/9Xv5nCrk/lv6.png",
      "https://i.postimg.cc/hj6w61Pm/lv7.png",
      "https://i.postimg.cc/4ycMgHmS/lv8.png",
      "https://i.postimg.cc/RVc8pfr3/lv9.png",
      "https://i.postimg.cc/HsGRtzND/lv10.png",
      "https://i.postimg.cc/L4gGfwN3/lv11.png",
      "https://i.postimg.cc/6pcPtXpt/lv12.png",
      "https://i.postimg.cc/BvvVvVjD/lv13.png",
      "https://i.postimg.cc/G3DS9YmM/lv14.png",
      "https://i.postimg.cc/vHd2nB1G/lv15.png"
    ];
    let background = await loadImage(linkinfo[lv]);
    ctx.drawImage(background, 0, 0, 1149, 1600);
    if (senderInfo.data.helpaltp.helpm !== 1 || senderInfo.data.helpaltp.helph !== 1 || senderInfo.data.helpaltp.helpb !== 1) var gachcheo = await loadImage("https://i.postimg.cc/Mp7st8Q1/gachcheo.png");
    if (senderInfo.data.helpaltp.helpm !== 1) ctx.drawImage(gachcheo, 500, 65, 160, 107);
    if (senderInfo.data.helpaltp.helph !== 1) ctx.drawImage(gachcheo, 700, 65, 160, 107);
    if (senderInfo.data.helpaltp.helpb !== 1) ctx.drawImage(gachcheo, 900, 65, 160, 107);
    fs.writeFileSync(pathinfo, canvas.toBuffer("image/png"));
    var sucCak = lv == 0 ? "b·∫Øt ƒë·∫ßu!" : "ti·∫øp t·ª•c!";
    return api.sendMessage({ body: `D√πng ${prefix}altp play ƒë·ªÉ ${sucCak}`, attachment: fs.createReadStream(pathinfo)}, threadID, () => fs.unlinkSync(pathinfo), messageID);
  };

  if (type == "play") {
    try {
      if (!senderInfo.data.altp || senderInfo.data.altp.level == -1) return api.sendMessage (`‚ûù B·∫°n ch∆∞a ƒëƒÉng k√≠ tham gia ch∆∞∆°ng tr√¨nh\nVui l√≤ng d√πng "${prefix}altp register" ƒë·ªÉ ƒëƒÉng k√≠ (t·ªën ${moneydown}$)`, threadID, messageID);
      if (isNaN(senderInfo.data.altp.level)) {
        senderInfo.data.altp = { level: 0, rd: -1 }
        await Users.setData(senderID, senderInfo);
      }
      var level = senderInfo.data.altp.level;
      if (level == 15) {
        var name = await Users.getNameUser(senderID);
        Currencies.increaseMoney(senderID, 0x3D090);
        senderInfo.data.altp = { level: -1, rd: -1 };
        await Users.setData(senderID, senderInfo);
        return api.sendMessage({ body: `‚ûù Xin ch√∫c m·ª´ng ng∆∞·ªùi ch∆°i ${name} ƒë√£ xu·∫•t s·∫Øc v∆∞·ª£t qua 15 c√¢u h·ªèi c·ªßa ch∆∞∆°ng tr√¨nh mang v·ªÅ 250000$\nH·∫πn g·∫∑p l·∫°i b·∫°n ·ªü ch∆∞∆°ng tr√¨nh l·∫ßn sau!`, attachment: await makeWinner(senderID, 15)}, threadID, () => fs.unlinkSync(path), messageID);
      }
      var cauhoi = level + 1;
      const res = await axios.get(`https://raw.githubusercontent.com/dongdev06/ailatrieuphu/main/altp${cauhoi}.json`);
      if (!senderInfo.data.altp.rd || senderInfo.data.altp.rd == -1) {
        var x = Math.floor(Math.random() * res.data.allquestion.length);
        senderInfo.data.altp = { level: level, rd: x };
        await Users.setData(senderID, senderInfo);
      } else var x = senderInfo.data.altp.rd;
      var question = res.data.allquestion[x];
      var linkanh = question.link;
      var dapan = question.dapan;
      var giaithich = question.giaithich;
      var helpmot = question.helpone;
      var helphai = question.helptwo;
      var helpba = question.helpthree;
      var cc = cauhoi == 1 ? "C√¢u h·ªèi ƒë·∫ßu ti√™n" : cauhoi == 5 ? "C√¢u h·ªèi c·ªôt m·ªëc ƒë·∫ßu ti√™n" : cauhoi == 10 ? "C√¢u h·ªèi c·ªôt m·ªëc th·ª© hai" : cauhoi == 15 ? "C√¢u h·ªèi cu·ªëi c√πng" : `C√¢u h·ªèi s·ªë ${cauhoi}`;
      var lmao = cc !== `C√¢u h·ªèi s·ªë ${cauhoi}` ? "tr·ªã gi√°" : "n√¢ng m·ª©c ph·∫ßn th∆∞·ªüng l√™n";
  var bruh = `${cc} ${lmao} ${equi(level+1)}$`;
  if (senderInfo.data.helpaltp.helpm == 1 || senderInfo.data.helpaltp.helph == 1 || senderInfo.data.helpaltp.helpb == 1) bruh += "\n== [ ùóñùó¢ÃÅ 3 ùó¶ùó®ÃõÃ£ ùóßùó•ùó¢ÃõÃ£ ùóöùóúùó®ÃÅùó£ ] ==";
  if (senderInfo.data.helpaltp.helpm == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help1 " 50 ƒë√∫ng 50 sai';
  if (senderInfo.data.helpaltp.helph == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help2 " h·ªèi √Ω ki·∫øn kh√°n gi·∫£';
      if (senderInfo.data.helpaltp.helpb == 1) bruh += '\n‚ûù Reply ( Ph·∫£n h·ªìi ) tin nh·∫Øn nh·∫≠p " help3 " h·ªèi t·ªï t∆∞ v·∫•n t·∫°i ch·ªó';
  
      if (senderInfo.data.helpaltp.helpm !== 2 && senderInfo.data.helpaltp.helph !== 2 && senderInfo.data.helpaltp.helpb !== 2) {
        var callback = () => api.sendMessage({
          body: `${bruh}`,
          attachment: fs.createReadStream(path)}, threadID, (error, info) => {
            global.client.handleReply.push({
            type: "answer",
            name: this.config.name,
            author: senderID,
            dapandung: dapan,
            giaithich: giaithich,
            one: helpmot,
            two: helphai,
            three: helpba,
            link: linkanh,
            level: level,
            messageID: info.messageID
          })
          fs.unlinkSync(path)
        })
        return request(linkanh).pipe(fs.createWriteStream(path)).on("close",() => callback());
      } else {
        api.sendMessage("ƒêang kh√¥i ph·ª•c...", threadID, messageID);
        let canvas = createCanvas(588, 375);
        let background = await loadImage(linkanh);
        let ctx = canvas.getContext("2d");
        ctx.drawImage(background, 0, 0, 588, 375);
        if (senderInfo.data.helpaltp.helpm == 2) {
          let loaibo1 = await loadImage(getlink(1, helpmot[0]));
          let loaibo2 = await loadImage(getlink(1, helpmot[1]));
          ctx.drawImage(loaibo1, 0, 0, 588, 375);
          ctx.drawImage(loaibo2, 0, 0, 588, 375);
        }
        if (senderInfo.data.helpaltp.helpb == 2) {
          let tuvan1 = await loadImage(getlink(3, helpba[0]));
          let tuvan2 = await loadImage(getlink(3, helpba[1]));
          let tuvan3 = await loadImage(getlink(3, helpba[2]));
          ctx.drawImage(tuvan1, 407, 50, 181, 50);
          ctx.drawImage(tuvan2, 407, 100, 181, 50);
          ctx.drawImage(tuvan3, 407, 150, 181, 50);
        }
        fs.writeFileSync(path, canvas.toBuffer("image/png"));
        api.sendMessage({
          body: `${bruh}`,
          attachment: fs.createReadStream(path)}, threadID, (error, info) => {
            global.client.handleReply.push({
            type: "answer",
            name: this.config.name,
            author: senderID,
            dapandung: dapan,
            giaithich: giaithich,
            one: helpmot,
            two: helphai,
            three: helpba,
            link: linkanh,
            level: level,
            messageID: info.messageID
            })
            fs.unlinkSync(path)
          })
        if (senderInfo.data.helpaltp.helph == 2) {
          var linkhai = helphai.length == 1 ? helphai[0] : senderInfo.data.helpaltp.helpm == 2 ? helphai[1] : helphai[0];
          var callback = () => api.sendMessage({ body: "‚Üí ƒê√¢y l√† k·∫øt qu·∫£ kh·∫£o s√°t √Ω ki·∫øn kh√°n gi·∫£ t·∫°i tr∆∞·ªùng quay!", attachment: fs.createReadStream(pathhelp)}, threadID, () => fs.unlinkSync(pathhelp));
          return request(linkhai).pipe(fs.createWriteStream(pathhelp)).on("close",() => callback());
        }
        return;
      }
    } catch (error) {
      return api.sendMessage(`ƒê√£ x·∫£y ra l·ªói!\n${error}`, threadID, messageID);
    }
  }
}

module.exports.handleReaction = async({ api, event, Threads, handleReaction, Currencies, Users }) => {
  if (event.userID != handleReaction.author) return;
  var senderInfo = await Users.getData(handleReaction.author);
  if (handleReaction.type == "register") {
    const threadSetting = global.data.threadData.get(event.threadID) || {};
    var prefix = threadSetting.PREFIX || global.config.PREFIX;
    api.unsendMessage(handleReaction.messageID);
    Currencies.decreaseMoney(handleReaction.author, moneydown);
  //  const path1 = __dirname + '/cache/intro.png';
   // var down = (await axios.get("https://i.postimg.cc/FH7B0wvY/intronew.png", { responseType: "arraybuffer" })).data;
   // fs.writeFileSync(path1, Buffer.from(down, "utf-8"));
    senderInfo.data.altp = { level: 0, rd: -1 };
    senderInfo.data.helpaltp = { helpm: 1, helph: 1, helpb: 1 };
    await Users.setData(handleReaction.author, senderInfo);
    return api.sendMessage(`‚Üí ƒêƒÉng k√≠ th√†nh c√¥ng, ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ch∆∞∆°ng tr√¨nh Ai L√† Tri·ªáu Ph√∫!\n\nD√πng "${prefix}altp play" ƒë·ªÉ b·∫Øt ƒë·∫ßu!`, event.threadID);
  }
  if (handleReaction.type == "stop") {
    api.unsendMessage(handleReaction.messageID);
    var level = senderInfo.data.altp.level;
    var name = await Users.getNameUser(handleReaction.author);
    Currencies.increaseMoney(handleReaction.author,equi(level));
    senderInfo.data.altp = { level: -1, rd: -1 };
    senderInfo.data.helpaltp = { helpm: 0, helph: 0, helpb: 0 };
    await Users.setData(handleReaction.author, senderInfo);
    return api.sendMessage({body: `‚Üí Ng∆∞·ªùi ch∆°i ${name} ƒë√£ v∆∞·ª£t qua ${level} c√¢u h·ªèi, mang v·ªÅ ph·∫ßn th∆∞·ªüng l√† ${equi(level)}$\nH·∫πn g·∫∑p l·∫°i b·∫°n ·ªü ch∆∞∆°ng tr√¨nh l·∫ßn sau!`, attachment: await makeWinner(handleReaction.author, level)}, event.threadID, () => fs.unlinkSync(path));
  }
}
>>>>>>> 4398b3a5fd9045b8de57d496d6bc325c61036aaa
