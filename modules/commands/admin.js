<<<<<<< HEAD
Ôªømodule.exports.config = {
	name: "admin",
	version: "1.0.5",
	hasPermssion: 0,
	credits: "Mirai Team & mod by DongDev",
	description: "B·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ qtv d√πng l·ªánh",
	commandCategory: "Admin",
	usages: "B·∫≠t t·∫Øt ch·∫ø ƒë·ªô ch·ªâ admin v√† qtv d√πng l·ªánh",
    cooldowns: 0,
    usePrefix: false,
    images: [],
=======
const { readdirSync, readFileSync, writeFileSync, existsSync } = require("fs-extra");
const { resolve } = require("path");

module.exports.config = {
    name: "admin",
    version: "1.0.6",
    hasPermssion: 1,
    credits: "Mirai Team - Modified by Satoru",
    description: "Qu·∫£n l√Ω v√† c·∫•u h√¨nh ADMIN BOT",
    commandCategory: "H·ªá th·ªëng",
    usages: "< add/remove | Super Admin & Admin > | < list/only/ibrieng >",
    cooldowns: 2,
>>>>>>> 4398b3a5fd9045b8de57d496d6bc325c61036aaa
    dependencies: {
        "fs-extra": ""
    }
};

module.exports.languages = {
<<<<<<< HEAD
      "vi": {
        "notHavePermssion": '‚ö†Ô∏è B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng "%1"',
        "addedNewAdmin": '[ ADD NEW ADMIN ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüìù Th√™m th√†nh c√¥ng %1 ng∆∞·ªùi d√πng tr·ªü th√†nh admin bot\n\n%2\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n[‚è∞] ‚Üí Time: %3',
        "removedAdmin": '[ REMOVE ADMIN ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüìù G·ª° th√†nh c√¥ng %1 ng∆∞·ªùi d√πng tr·ªü l·∫°i l√†m th√†nh vi√™n\n\n%2\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n[‚è∞] ‚Üí Time: %3'
    },
    "en": {
        "listAdmin": '[Admin] Admin list: \n\n%1',
        "notHavePermssion": '[Admin] You have no permission to use "%1"',
        "addedNewAdmin": '[Admin] Added %1 Admin :\n\n%2',
        "removedAdmin": '[Admin] Remove %1 Admin:\n\n%2'
    }
}
module.exports.onLoad = function() {
    const { writeFileSync, existsSync } = require('fs-extra');
    const { resolve } = require("path");
    const path = resolve(__dirname, 'data', 'dataAdbox.json');
    if (!existsSync(path)) {
        const obj = {
            adminbox: {}
        };
        writeFileSync(path, JSON.stringify(obj, null, 4));
    } else {
        const data = require(path);
        if (!data.hasOwnProperty('adminbox')) data.adminbox = {};
        writeFileSync(path, JSON.stringify(data, null, 4));
     }
}
module.exports.run = async function ({ api, event, args, Users, permssion, getText, Currencies }) {
  const fs = require("fs-extra");
  const axios = require("axios");
  const moment = require("moment-timezone");
  const gio = moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY - HH:mm:ss");
  const nd = await Users.getNameUser(event.senderID);
  const { PREFIX } = global.config;
  const { threadID, messageID, mentions, senderID } = event;
  const { configPath } = global.client;
  const { throwError } = global.utils;

  async function streamURL(url, mime='jpg') {
    const dest = `${__dirname}/cache/${Date.now()}.${mime}`;
    const downloader = require('image-downloader');
    const fse = require('fs-extra');
    await downloader.image({
        url, dest
    });
    setTimeout(j => fse.unlinkSync(j), 60 * 1000, dest);
    return fse.createReadStream(dest);
  }

  const allowedUserIDs = global.config.NDH.map(id => id.toString());
  const senderIDStr = senderID.toString();
  const threadSetting = global.data.threadData.get(threadID) || {};
  const pref = threadSetting.PREFIX || PREFIX;
  const content = args.slice(1, args.length);
    if (args.length == 0) 
    return api.sendMessage(`[ ADMIN CONFIG SETTING ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${pref}admin add: th√™m ng∆∞·ªùi d√πng l√†m admin\n${pref}admin remove: g·ª° vai tr√≤ admin\n${pref}admin list: xem danh s√°ch admin\n${pref}admin qtvonly: b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô qu·∫£n tr·ªã vi√™n\n${pref}admin only: b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô v√¥ c·ª±c\n${pref}admin echo: bot s·∫Ω tr·∫£ v·ªÅ c√¢u m√† b·∫°n n√≥i\n${pref}admin fast: xem t·ªëc ƒë·ªô m·∫°ng c·ªßa bot\n${pref}admin create [t√™n mdl]: t·∫°o file m·ªõi trong commands\n${pref}admin del [t√™n mdl]: xo√° file trong commands\n${pref}admin rename [t√™n mdl] => [t√™n mu·ªën ƒë·ªïi]: ƒë·ªïi t√™n file trong commands\n${pref}admin ping: xem t·ªëc ƒë·ªô ph·∫£n h·ªìi c·ªßa bot\n${pref}admin offbot: t·∫Øt bot\n${pref}admin reload [time]: reset h·ªá th·ªëng bot\n${pref}admin resetmoney: reset to√†n b·ªô ti·ªÅn tr√™n h·ªá th·ªëng bot\n${pref}admin ship [t√™n mdl]: g·ª≠i 1 mdl cho th√†nh vi√™n trong nh√≥m\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüìù HDSD: ${pref}admin + [text] l·ªánh c·∫ßn d√πng`, event.threadID, event.messageID);
    const { ADMINBOT } = global.config;
    const { NDH } = global.config;
    const { userName } = global.data;
    const { writeFileSync } = require("fs-extra");
    const mention = Object.keys(mentions);

    delete require.cache[require.resolve(configPath)];
    var config = require(configPath);
switch (args[0]) {
        case "list": {
    var i = 1;
    var msg = [];
    const listAdmin = config.ADMINBOT || [];
    let count = 1;
    
    // Duy·ªát qua danh s√°ch admin v√† t·∫°o tin nh·∫Øn hi·ªÉn th·ªã
    for (const idAdmin of listAdmin) {
        if (parseInt(idAdmin)) {
            const name = (await Users.getData(idAdmin)).name;
            msg.push(`${count}. üë§: ${name}\nüìé Link: fb.com/${idAdmin}`);
            count++;
        }
    }

    // G·ª≠i danh s√°ch admin v√† th√¥ng b√°o ph·∫£n h·ªìi ƒë·ªÉ x√≥a
    api.sendMessage(`[ Ng∆∞·ªùi ƒêi·ªÅu H√†nh Bot ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ Name: ${global.config.ADMIN_NAME}\nüìé Facebook: ${global.config.FACEBOOK_ADMIN}\nüì© Admin Chicken project\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n[ ADMIN BOT ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n${msg.join("\n")}\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\nüë§ Ng∆∞·ªùi d√πng: ${nd}\n‚è∞ Time: ${gio}\n\nH√£y tr·∫£ l·ªùi tin nh·∫Øn n√†y v·ªõi c√°c s·ªë th·ª© t·ª± ƒë·ªÉ x√≥a ID admin t∆∞∆°ng ·ª©ng (VD: "1 2 3").`, event.threadID, (error, info) => {
        if (!error) {
            global.client.handleReply.push({
                name: "deleteAdmin",
                messageID: info.messageID,
                author: event.senderID,
                type: 'replyToDeleteAdmin',
                data: { listAdmin }
            });
        }
    });

    // X·ª≠ l√Ω khi c√≥ tin nh·∫Øn tr·∫£ l·ªùi ƒë·ªÉ x√≥a admin
    api.listenMqtt((err, message) => {
        const replyData = global.client.handleReply.find(r => r.name === "deleteAdmin" && r.messageID === message.messageReply?.messageID);

        if (replyData && replyData.author === message.senderID) {
            const indices = message.body.split(" ").map(num => parseInt(num) - 1).filter(index => !isNaN(index) && index >= 0 && index < replyData.data.listAdmin.length);
            const idsToDelete = indices.map(index => replyData.data.listAdmin[index]);

            if (idsToDelete.length > 0) {
                // X√≥a c√°c ID admin t·ª´ danh s√°ch
                idsToDelete.forEach(id => {
                    const index = replyData.data.listAdmin.indexOf(id);
                    if (index > -1) replyData.data.listAdmin.splice(index, 1);
                });

                api.sendMessage(`ƒê√£ x√≥a c√°c admin v·ªõi ID: ${idsToDelete.join(", ")}`, message.threadID, message.messageID);

                // C·∫≠p nh·∫≠t danh s√°ch admin trong config v√† l∆∞u v√†o file c·∫•u h√¨nh
                config.ADMINBOT = replyData.data.listAdmin;
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
            } else {
                api.sendMessage("Kh√¥ng t√¨m th·∫•y s·ªë th·ª© t·ª± h·ª£p l·ªá!", message.threadID, message.messageID);
            }
        }
    });

    break;
}
            case "add": { 
            if (event.senderID != 61554620715942) return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID)
            if (permssion != 3) return api.sendMessage(getText("notHavePermssion", "add"), threadID, messageID);
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mention.length != 0 && isNaN(content[0])) {
                var listAdd = [];

                for (const id of mention) {
                    ADMINBOT.push(id);
                    config.ADMINBOT.push(id);
                    listAdd.push(`[üë§] ‚Üí Name: ${event.mentions[id]}\n[üî∞] ‚Üí Uid: ${id}`);
                };
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage({body: getText("addedNewAdmin", mention.length, listAdd.join("\n").replace(/\@/g, ""), moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss")), attachment: await streamURL(`https://graph.facebook.com/${mention}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)},event.threadID)
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                ADMINBOT.push(content[0]);
                config.ADMINBOT.push(content[0]);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage({body: getText("addedNewAdmin", 1, `[üë§] ‚Üí Name: ${name}\n[üî∞] ‚Üí Uid: ${content[0]}`, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss")),attachment: await streamURL(`https://graph.facebook.com/${content[0]}/picture?height=720&width=720&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`)},event.threadID)
            }
            else return throwError(this.config.name, threadID, messageID);
        }
        case "removeAdmin":
        case "rm":
        case "delete": {
            if (event.senderID != 61554620715942) return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn Admin ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID)
            if (permssion != 3) return api.sendMessage(getText("notHavePermission", "removeAdmin", gio), threadID, messageID);
            if(event.type == "message_reply") { content[0] = event.messageReply.senderID }
            if (mentions.length != 0 && isNaN(content[0])) {
                const mention = Object.keys(mentions);
                var listAdd = [];

                for (const id of mention) {
                    const index = config.ADMINBOT.findIndex(item => item == id);
                    ADMINBOT.splice(index, 1);
                    config.ADMINBOT.splice(index, 1);
                    listAdd.push(`[üë§] ‚Üí Name: ${event.mentions[id]}\n[üî∞] ‚Üí Uid: ${id}`);
                };

                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", mention.length, listAdd.join("\n").replace(/\@/g, ""), moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss")), threadID, messageID);
            }
            else if (content.length != 0 && !isNaN(content[0])) {
                const index = config.ADMINBOT.findIndex(item => item.toString() == content[0]);
                ADMINBOT.splice(index, 1);
                config.ADMINBOT.splice(index, 1);
                const name = (await Users.getData(content[0])).name
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedAdmin", 1, `[üë§] ‚Üí Name: ${name}\n[üî∞] ‚Üí Uid: ${content[0]}`, moment.tz("Asia/Ho_Chi_Minh").format("DD/MM/YYYY || HH:mm:ss")), threadID, messageID);
            }
            else throwError(this.config.name, threadID, messageID);
                                               }
        case 'qtvonly': {
            const { resolve } = require("path");
            const pathData = resolve(__dirname, 'data', 'dataAdbox.json');
            const database = require(pathData);
            const { adminbox } = database;
            if (permssion < 1) return api.sendMessage("‚ö†Ô∏è C·∫ßn quy·ªÅn Qu·∫£n tr·ªã vi√™n tr·ªü l√™n ƒë·ªÉ th·ª±c hi·ªán l·ªánh", threadID, messageID);
            if (adminbox[threadID] == true) {
                adminbox[threadID] = false;
                api.sendMessage("‚òëÔ∏è T·∫Øt th√†nh c√¥ng ch·∫ø ƒë·ªô qu·∫£n tr·ªã vi√™n, t·∫•t c·∫£ th√†nh vi√™n c√≥ th·ªÉ s·ª≠ d·ª•ng bot", threadID, messageID);
            } else {
                adminbox[threadID] = true;
                api.sendMessage("‚òëÔ∏è K√≠ch ho·∫°t ch·∫ø ƒë·ªô qu·∫£n tr·ªã vi√™n, ch·ªâ qu·∫£n tr·ªã vi√™n nh√≥m m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng bot", threadID, messageID);
            }
            writeFileSync(pathData, JSON.stringify(database, null, 4));
            break;
        }
        case 'only':
        case '-o': {
            //---> CODE ADMIN ONLY<---//
            if (permssion != 3) return api.sendMessage("‚ö†Ô∏è B·∫°n kh√¥ng ph·∫£i admin ch√≠nh", threadID, messageID);
            if (config.adminOnly == false) {
                config.adminOnly = true;
                api.sendMessage(`‚òëÔ∏è K√≠ch ho·∫°t ch·∫ø ƒë·ªô v√¥ c·ª±c, ch·ªâ Admin ƒë∆∞·ª£c s·ª≠ d·ª•ng bot`, threadID, messageID);
            } else {
                config.adminOnly = false;
                api.sendMessage(`‚òëÔ∏è T·∫Øt ch·∫ø ƒë·ªô v√¥ c·ª±c, t·∫•t c·∫£ th√†nh vi√™n c√≥ th·ªÉ s·ª≠ d·ª•ng bot`, threadID, messageID);
            }
            writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
            break;
        }
  case 'echo': {
      const input = args.join(" ");
      const spaceIndex = input.indexOf(' ');

      if (spaceIndex !== -1) {
        const textAfterFirstWord = input.substring(spaceIndex + 1).trim();
        return api.sendMessage(textAfterFirstWord, event.threadID);
      }
      break;
    }
  case 'fast': {
      try {
        const fast = require("fast-speedtest-api");
        const speedTest = new fast({
          token: "YXNkZmFzZGxmbnNkYWZoYXNkZmhrYWxm",
          verbose: false,
          timeout: 10000,
          https: true,
          urlCount: 5,
          bufferSize: 8,
          unit: fast.UNITS.Mbps
        });
        const result = await speedTest.getSpeed();
        return api.sendMessage(`üöÄ Speed Test: ${result} Mbps`, event.threadID, event.messageID);
      } catch (error) {
        return api.sendMessage("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëo t·ªëc ƒë·ªô ngay l√∫c n√†y, h√£y th·ª≠ l·∫°i sau!", event.threadID, event.messageID);
      }
      break;
    }
 case 'create': {
      if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }

      if (args.slice(1).length === 0) return api.sendMessage("‚ö†Ô∏è Vui l√≤ng ƒë·∫∑t t√™n cho file c·ªßa b·∫°n", event.threadID);

      const commandName = args.slice(1).join(' ');
      const filePath = `${__dirname}/${commandName}.js`;

      if (fs.existsSync(filePath)) {
        return api.sendMessage(`‚ö†Ô∏è File ${commandName}.js ƒë√£ t·ªìn t·∫°i t·ª´ tr∆∞·ªõc`, event.threadID, event.messageID);
      }

      fs.copySync(`${__dirname}/example.js`, filePath);
      return api.sendMessage(`‚òëÔ∏è ƒê√£ t·∫°o th√†nh c√¥ng file "${commandName}.js"`, event.threadID, event.messageID);
      break;
    }
 case 'del': {
    if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }
    const commandName = args.slice(1).join(' ');
    if (!commandName) return api.sendMessage(`‚ö†Ô∏è Vui l√≤ng cung c·∫•p t√™n l·ªánh c·∫ßn xo√°`, event.threadID, event.messageID);
    
    fs.unlink(`${__dirname}/${commandName}.js`, (err) => {
        if (err) return api.sendMessage(`‚ùé Xo√° file ${commandName}.js th·∫•t b·∫°i: ${err.message}`, event.threadID, event.messageID);
        return api.sendMessage(`‚òëÔ∏è ƒê√£ xo√° file ${commandName}.js th√†nh c√¥ng`, event.threadID, event.messageID);
    });
    break;
}
   case 'rename': {
    if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }
    const renameArgs = args.slice(1).join(' ').split('=>');
    
    if (renameArgs.length !== 2) {
        return api.sendMessage(`‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng [t√™n mdl] => [t√™n mu·ªën ƒë·ªïi]`, event.threadID, event.messageID);
    }

    const oldName = renameArgs[0].trim();
    const newName = renameArgs[1].trim();

    fs.rename(`${__dirname}/${oldName}.js`, `${__dirname}/${newName}.js`, function (err) {
        if (err) throw err;
        return api.sendMessage(
            `‚òëÔ∏è ƒê√£ ƒë·ªïi t√™n file ${oldName}.js th√†nh ${newName}.js`,
            event.threadID,
            event.messageID
        );
    });
    break;
   }
 case 'ping': {
  const timeStart = Date.now();
  const pingrs = Date.now() - timeStart;
      api.sendMessage(`üì∂ Ping ph·∫£n h·ªìi: ${pingrs} ms`, event.threadID, event.messageID);
      break;
}
  case 'offbot': {
    if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }
    api.sendMessage("‚ò†Ô∏è P√°i pai", event.threadID, () => process.exit(0))
    break;
  }
  case 'reload': {
  if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }

  const { commands } = global.client;
  const pidusage = await global.nodemodule["pidusage"](process.pid);
  const os = require("os");
  const cpus = os.cpus();
  let chips, speed;

  for (const cpu of cpus) {
    chips = cpu.model;
    speed = cpu.speed;
  }

  const timeStart = Date.now();
  const { threadID, messageID } = event;
  const time = args.join(" ");
  let rstime = "68";

  if (time) {
    rstime = time;
  }

  api.sendMessage(`[ RELOAD SYSTEM ]\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n[‚öôÔ∏è] ‚Üí Bot s·∫Ω ti·∫øn h√†nh reset sau ${rstime} gi√¢y n·ªØa\n[‚è∞] ‚Üí Time: ${gio}\n[üìä] ‚Üí T·ªëc ƒë·ªô x·ª≠ l√Ω: ${speed}MHz\n[‚Ü™Ô∏è] ‚Üí S·ªë lu·ªìng CPU: ${os.cpus().length}\n[üì∂] ‚Üí ƒê·ªô tr·ªÖ: ${Date.now() - timeStart}ms`, event.threadID, event.messageID);

  setTimeout(() => { 
    api.sendMessage("[üí®] ‚Üí Bot Ti·∫øn H√†nh Reset H·ªá Th·ªëng!", event.threadID, () => process.exit(1));
  }, rstime * 1000);

  break;
}
  case "resetmoney": {
    if (!allowedUserIDs.includes(senderIDStr)) {
        return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
      }

    const mentionID = Object.keys(event.mentions);
    const message = [];
    const error = [];

    const resetMoneyForUser = async (userID) => {
        try {
            await Currencies.setData(userID, { money: 0 });
            message.push(userID);
        } catch (e) {
            error.push(e);
        }
    };

    const allUserData = await Currencies.getAll(['userID']);

    for (const userData of allUserData) {
        await resetMoneyForUser(userData.userID);
    }

    api.sendMessage(`‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu ti·ªÅn c·ªßa ${message.length} ng∆∞·ªùi`, event.threadID, async () => {
        if (error.length !== 0) {
            await api.sendMessage(`‚ùé Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu ti·ªÅn c·ªßa ${error.length} ng∆∞·ªùi`, event.threadID);
        }
    }, event.messageID);

    for (const singleID of mentionID) {
        await resetMoneyForUser(singleID);
    }

    api.sendMessage(`‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu ti·ªÅn c·ªßa ${message.length} ng∆∞·ªùi`, event.threadID, async () => {
        if (error.length !== 0) {
            await api.sendMessage(`‚ùé Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu ti·ªÅn c·ªßa ${error.length} ng∆∞·ªùi`, event.threadID);
        }
    }, event.messageID);

    break;
}
  
case 'ship': {
  if (!allowedUserIDs.includes(senderIDStr)) {
    return api.sendMessage(`‚ö†Ô∏è C·∫ßn quy·ªÅn admin ch√≠nh ƒë·ªÉ th·ª±c hi·ªán l·ªánh`, event.threadID, event.messageID);
  }

  const { messageReply, type } = event;

  let name = args[1];
  const commandName = args.slice(1).join(' ');

  let text, uid;
  if (type === "message_reply") {
    text = messageReply.body;
    uid = messageReply.senderID;
  } else {
    uid = event.senderID;
  }

  if (!text && !name) {
    return api.sendMessage(`[‚è∞] ‚Üí B√¢y gi·ªù l√†: ${gio}\n[üìù] ‚Üí H√£y reply ho·∫∑c tag ng∆∞·ªùi mu·ªën share`, event.threadID, event.messageID);
  }

  fs.readFile(`./modules/commands/${commandName}.js`, "utf-8", async (err, data) => {
    if (err) {
      return api.sendMessage(`[‚è∞] ‚Üí B√¢y gi·ªù l√†: ${gio}\n[üîé] ‚Üí R·∫•t ti·∫øc mdl ${commandName} m√† b·∫°n c·∫ßn hi·ªán kh√¥ng c√≥ tr√™n h·ªá th·ªëng c·ªßa bot ${global.config.BOTNAME}`, event.threadID, event.messageID);
    }

    const response = await axios.post("https://api.mocky.io/api/mock", {
      "status": 200,
      "content": data,
      "content_type": "application/json",
      "charset": "UTF-8",
      "secret": "PhamMinhDong",
      "expiration": "never"
    });
    
    const link = response.data.link;
    const use = await Users.getNameUser(uid);
    api.sendMessage(`[üìú] ‚Üí Nh√≥m: ${global.data.threadInfo.get(event.threadID).threadName}\n[‚è∞] ‚Üí V√†o l√∫c: ${gio}\n[üíº] ‚Üí T√™n l·ªánh: ${commandName}\n[üë§] ‚Üí Admin: ${nd}\n[üìå] ‚Üí ƒê√£ g·ª≠i module ‚òëÔ∏è\n[üìù] ‚Üí ${use} vui l√≤ng check tin nh·∫Øn ch·ªù ho·∫∑c spam ƒë·ªÉ nh·∫≠n module`, event.threadID, event.messageID);
    api.sendMessage(`[‚è∞] ‚Üí V√†o l√∫c: ${gio}\n[üîó] ‚Üí Link: ${link}\n[üî∞] ‚Üí T√™n l·ªánh: ${commandName}\n[üìú] ‚Üí Nh√≥m: ${global.data.threadInfo.get(event.threadID).threadName}\n[üîé] ‚Üí B·∫°n ƒë∆∞·ª£c admin share ri√™ng m·ªôt module`, uid);
  });

  break;
}
   default: {
  return throwError(this.config.name, threadID, messageID);
        }
    }
}
=======
    "vi": {
        "listAdmin": `=== [ DANH S√ÅCH ADMIN & NG∆Ø·ªúI H·ªñ TR·ª¢ ] ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n=== [ ADMIN BOT ] ===\n%1\n\n=== [ NG∆Ø·ªúI H·ªñ TR·ª¢ ] ===\n%2\n\nReply s·ªë th·ª© t·ª± ƒë·ªÉ x√≥a ƒë·ªëi t∆∞·ª£ng t∆∞∆°ng ·ª©ng.`,
        "notHavePermssion": '[ ADMIN ] ‚Üí B·∫°n kh√¥ng ƒë·ªß quy·ªÅn h·∫°n ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng ch·ª©c nƒÉng "%1"',
        "addedSuccess": '[ ADMIN ] ‚Üí ƒê√£ th√™m %1 ng∆∞·ªùi d√πng tr·ªü th√†nh %2:\n\n%3',
        "removedSuccess": '[ ADMIN ] ‚Üí ƒê√£ g·ª° vai tr√≤ %1 c·ªßa %2 ng∆∞·ªùi d√πng:\n\n%3',
        "removedByIndex": '[ ADMIN ] ‚Üí ƒê√£ g·ª° th√†nh c√¥ng %1:\n%2',
        "invalidIndex": '[ ADMIN ] ‚Üí S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!'
    }
};

module.exports.onLoad = function() {
    const pathData = resolve(__dirname, 'data', 'dataAdbox.json');
    if (!existsSync(pathData)) {
        const obj = {
            adminOnly: {},
            adminbox: {},
            only: {},
            privateChat: {}
        };
        writeFileSync(pathData, JSON.stringify(obj, null, 4));
    }
};

module.exports.handleReply = async function({ api, event, handleReply, getText, Users }) {
    if (event.senderID != handleReply.author) return;
    const { threadID, messageID, body } = event;
    const { configPath } = global.client;
    const config = require(configPath);
    
    const index = parseInt(body);
    if (isNaN(index)) return api.sendMessage(getText("invalidIndex"), threadID, messageID);
    
    let targetArray, targetIndex, roleText;
    const adminLength = config.ADMINBOT.length;
    
    if (index <= adminLength) {
        targetArray = config.ADMINBOT;
        targetIndex = index - 1;
        roleText = "ADMIN BOT";
    } else {
        targetArray = config.NDH;
        targetIndex = index - adminLength - 1;
        roleText = "NG∆Ø·ªúI H·ªñ TR·ª¢";
    }
    
    if (targetIndex < 0 || targetIndex >= targetArray.length) {
        return api.sendMessage(getText("invalidIndex"), threadID, messageID);
    }
    
    const removedUID = targetArray[targetIndex];
    const name = await Users.getNameUser(removedUID);
    
    targetArray.splice(targetIndex, 1);
    if (roleText === "ADMIN BOT") {
        global.config.ADMINBOT.splice(global.config.ADMINBOT.indexOf(removedUID), 1);
    } else {
        global.config.NDH.splice(global.config.NDH.indexOf(removedUID), 1);
    }
    
    writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
    
    return api.sendMessage(
        getText("removedByIndex", roleText, `${removedUID} - ${name}`),
        threadID,
        messageID
    );
};

module.exports.run = async function({ api, event, args, Users, permssion, getText }) {
    const { threadID, messageID, mentions, senderID } = event;
    const { configPath } = global.client;
    const config = require(configPath);
    const mention = Object.keys(mentions);
    
    if (!args[0]) {
        return api.sendMessage(
            `=== [ ADMIN PANEL ] ===\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `‚Üí admin list: Xem danh s√°ch qu·∫£n l√Ω\n` +
            `‚Üí admin add: Th√™m qu·∫£n tr·ªã vi√™n\n` +
            `‚Üí admin remove: G·ª° qu·∫£n tr·ªã vi√™n\n` +
            `‚Üí admin addndh: Th√™m ng∆∞·ªùi h·ªó tr·ª£\n` +
            `‚Üí admin removendh: G·ª° ng∆∞·ªùi h·ªó tr·ª£\n` +
            `‚Üí admin qtvonly: B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô QTV\n` +
            `‚Üí admin only: B·∫≠t/t·∫Øt ch·∫ø ƒë·ªô Admin\n` +
            `‚Üí admin ibrieng: B·∫≠t/t·∫Øt chat ri√™ng\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`,
            threadID, messageID
        );
    }

    const getUids = async (type) => {
        let uids = [];
        if (event.type === "message_reply") {
            uids.push(event.messageReply.senderID);
        } else if (mention.length > 0) {
            uids = mention;
        } else if (args[1] && !isNaN(args[1])) {
            uids.push(args[1]);
        }
        return uids;
    };

    const addUsers = async (uids, type) => {
        const added = [];
        for (const uid of uids) {
            const name = global.data.userName.get(uid) || await Users.getNameUser(uid);
            if (type === "ADMIN" && !config.ADMINBOT.includes(uid)) {
                config.ADMINBOT.push(uid);
                global.config.ADMINBOT.push(uid);
                added.push(`${uid} - ${name}`);
            } else if (type === "NDH" && !config.NDH.includes(uid)) {
                config.NDH.push(uid);
                global.config.NDH.push(uid);
                added.push(`${uid} - ${name}`);
            }
        }
        return added;
    };

    const removeUsers = async (uids, type) => {
        const removed = [];
        for (const uid of uids) {
            const name = global.data.userName.get(uid) || await Users.getNameUser(uid);
            if (type === "ADMIN") {
                const index = config.ADMINBOT.indexOf(uid);
                if (index !== -1) {
                    config.ADMINBOT.splice(index, 1);
                    global.config.ADMINBOT.splice(global.config.ADMINBOT.indexOf(uid), 1);
                    removed.push(`${uid} - ${name}`);
                }
            } else if (type === "NDH") {
                const index = config.NDH.indexOf(uid);
                if (index !== -1) {
                    config.NDH.splice(index, 1);
                    global.config.NDH.splice(global.config.NDH.indexOf(uid), 1);
                    removed.push(`${uid} - ${name}`);
                }
            }
        }
        return removed;
    };

    switch (args[0]) {
        case "list": {
            if (permssion < 2) return api.sendMessage(getText("notHavePermssion", "list"), threadID, messageID);
            
            let adminList = [], ndhList = [];
            let count = 1;
            
            for (const id of config.ADMINBOT) {
                const name = global.data.userName.get(id) || await Users.getNameUser(id);
                adminList.push(`${count++}. ${name}\n‚Üí ID: ${id}`);
            }
            
            for (const id of config.NDH) {
                const name = global.data.userName.get(id) || await Users.getNameUser(id);
                ndhList.push(`${count++}. ${name}\n‚Üí ID: ${id}`);
            }

            return api.sendMessage(
                getText("listAdmin", adminList.join("\n\n"), ndhList.join("\n\n")),
                threadID,
                (error, info) => {
                    global.client.handleReply.push({
                        name: this.config.name,
                        messageID: info.messageID,
                        author: senderID
                    });
                },
                messageID
            );
        }

        case "add": {
            if (permssion !== 3) return api.sendMessage(getText("notHavePermssion", "add"), threadID, messageID);
            const uids = await getUids("ADMIN");
            const added = await addUsers(uids, "ADMIN");
            if (added.length > 0) {
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("addedSuccess", added.length, "ADMIN BOT", added.join("\n")), threadID, messageID);
            }
            break;
        }

        case "addndh": {
            if (permssion !== 3) return api.sendMessage(getText("notHavePermssion", "addndh"), threadID, messageID);
            const uids = await getUids("NDH");
            const added = await addUsers(uids, "NDH");
            if (added.length > 0) {
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("addedSuccess", added.length, "NG∆Ø·ªúI H·ªñ TR·ª¢", added.join("\n")), threadID, messageID);
            }
            break;
        }

        case "remove": {
            if (permssion !== 3) return api.sendMessage(getText("notHavePermssion", "remove"), threadID, messageID);
            const uids = await getUids("ADMIN");
            const removed = await removeUsers(uids, "ADMIN");
            if (removed.length > 0) {
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedSuccess", "ADMIN BOT", removed.length, removed.join("\n")), threadID, messageID);
            }
            break;
        }

        case "removendh": {
            if (permssion !== 3) return api.sendMessage(getText("notHavePermssion", "removendh"), threadID, messageID);
            const uids = await getUids("NDH");
            const removed = await removeUsers(uids, "NDH");
            if (removed.length > 0) {
                writeFileSync(configPath, JSON.stringify(config, null, 4), 'utf8');
                return api.sendMessage(getText("removedSuccess", "NG∆Ø·ªúI H·ªñ TR·ª¢", removed.length, removed.join("\n")), threadID, messageID);
            }
            break;
        }

        case "qtvonly": {
            const pathData = resolve(__dirname, 'data', 'dataAdbox.json');
            const database = require(pathData);
            if (permssion < 1) return api.sendMessage("[ ADMIN ] ‚Üí C·∫ßn quy·ªÅn Qu·∫£n tr·ªã vi√™n tr·ªü l√™n", threadID, messageID);
            
            database.adminbox[threadID] = !database.adminbox[threadID];
            writeFileSync(pathData, JSON.stringify(database, null, 4));
            
            return api.sendMessage(
                `[ ADMIN ] ‚Üí ${database.adminbox[threadID] ? 
                    "B·∫≠t ch·∫ø ƒë·ªô QTV Only th√†nh c√¥ng" : 
                    "T·∫Øt ch·∫ø ƒë·ªô QTV Only th√†nh c√¥ng"}`,
                threadID, messageID
            );
        }

        case "only": {
            const pathData = resolve(__dirname, 'data', 'dataAdbox.json');
            const database = require(pathData);
            if (permssion < 2) return api.sendMessage("[ ADMIN ] ‚Üí C·∫ßn quy·ªÅn ADMIN tr·ªü l√™n", threadID, messageID);
            
            database.only[threadID] = !database.only[threadID];
            writeFileSync(pathData, JSON.stringify(database, null, 4));
            
            return api.sendMessage(
                `[ ADMIN ] ‚Üí ${database.only[threadID] ? 
                    "B·∫≠t ch·∫ø ƒë·ªô Admin Only th√†nh c√¥ng" : 
                    "T·∫Øt ch·∫ø ƒë·ªô Admin Only th√†nh c√¥ng"}`,
                threadID, messageID
            );
        }

        case "ibrieng": {
            const pathData = resolve(__dirname, 'data', 'dataAdbox.json');
            const database = require(pathData);
            if (permssion !== 3) return api.sendMessage("[ ADMIN ] ‚Üí C·∫ßn quy·ªÅn ADMIN ƒë·ªÉ th·ª±c hi·ªán", threadID, messageID);
            
            database.privateChat[threadID] = !database.privateChat[threadID];
            writeFileSync(pathData, JSON.stringify(database, null, 4));
            
            return api.sendMessage(
                `[ ADMIN ] ‚Üí ${database.privateChat[threadID] ? 
                    "B·∫≠t ch·∫ø ƒë·ªô chat ri√™ng th√†nh c√¥ng" : 
                    "T·∫Øt ch·∫ø ƒë·ªô chat ri√™ng th√†nh c√¥ng"}`,
                threadID, messageID
            );
        }

        default: {
            return api.sendMessage("[ ADMIN ] ‚Üí L·ªánh kh√¥ng h·ª£p l·ªá! G√µ 'admin' ƒë·ªÉ xem h∆∞·ªõng d·∫´n", threadID, messageID);
        }
    }
};
>>>>>>> 4398b3a5fd9045b8de57d496d6bc325c61036aaa
