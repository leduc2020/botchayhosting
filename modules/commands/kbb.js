const cooldownTime = 60000; // 1 ph√∫t
const minBet = 10000;     // M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu: 10.000 VNƒê
const maxBet = 100000;    // M·ª©c c∆∞·ª£c t·ªëi ƒëa: 100.000 VNƒê

const cooldowns = new Map();

// √Ånh x·∫° l·ª±a ch·ªçn v·ªõi emoji t∆∞∆°ng ·ª©ng
const choicesEmoji = {
    "k√©o": "‚úåÔ∏è", // K√©o
    "b√∫a": "‚úä", // B√∫a
    "bao": "‚úã"  // Bao
};

module.exports.config = {
    name: "kbb",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "hehe",
    description: "Ch∆°i game K√©o B√∫a Bao c√≥ c∆∞·ª£c xu",
    commandCategory: "Game",
    usages: "[k√©o/b√∫a/bao] [s·ªë ti·ªÅn/all]",
    cooldowns: 5
};

module.exports.run = async function ({ api, event, args, Currencies }) {
    const { threadID, messageID, senderID } = event;
    const playerChoice = args[0]?.toLowerCase();

    // Ki·ªÉm tra l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi ch∆°i
    if (!["k√©o", "b√∫a", "bao"].includes(playerChoice)) {
        return api.sendMessage(
            "‚ö†Ô∏è C√∫ ph√°p sai!\nD√πng: kbb [k√©o/b√∫a/bao] [s·ªë ti·ªÅn c∆∞·ª£c]\nV√≠ d·ª•: kbb b√∫a 50000\nHo·∫∑c: kbb k√©o all",
            threadID,
            messageID
        );
    }

    const moneyData = await Currencies.getData(senderID);
    const userMoney = moneyData.money;

    let betAmount;
    if (args[1]?.toLowerCase() === "all") {
        // N·∫øu ng∆∞·ªùi ch∆°i c∆∞·ª£c 'all', s·ªë ti·ªÅn c∆∞·ª£c s·∫Ω l√† s·ªë ti·ªÅn user c√≥ nh∆∞ng kh√¥ng qu√° maxBet
        betAmount = Math.min(userMoney, maxBet); 
        
        if (betAmount < minBet) {
            return api.sendMessage(`‚ö†Ô∏è B·∫°n c·∫ßn √≠t nh·∫•t ${minBet} xu ƒë·ªÉ c∆∞·ª£c (ho·∫∑c s·ªë ti·ªÅn c·ªßa b·∫°n qu√° √≠t ƒë·ªÉ c∆∞·ª£c 'all').`, threadID, messageID);
        }
    } else {
        betAmount = parseInt(args[1]);
        if (isNaN(betAmount) || betAmount <= 0) {
            return api.sendMessage(
                "‚ö†Ô∏è S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá.\nD√πng: keobuabao [k√©o/b√∫a/bao] [s·ªë ti·ªÅn c∆∞·ª£c]\nV√≠ d·ª•: keobuabao b√∫a 50000",
                threadID,
                messageID
            );
        }
        if (betAmount < minBet) {
            return api.sendMessage(`‚ö†Ô∏è M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu l√† ${minBet} xu.`, threadID, messageID);
        }
        if (betAmount > maxBet) {
            return api.sendMessage(`‚ö†Ô∏è M·ª©c c∆∞·ª£c t·ªëi ƒëa l√† ${maxBet} xu.`, threadID, messageID);
        }
        if (userMoney < betAmount) {
            return api.sendMessage(`üí∏ B·∫°n kh√¥ng ƒë·ªß ti·ªÅn. Hi·ªán c√≥: ${userMoney} xu.`, threadID, messageID);
        }
    }

    // Ki·ªÉm tra cooldown
    const now = Date.now();
    const lastPlayed = cooldowns.get(senderID) || 0;
    if (now - lastPlayed < cooldownTime) {
        const remainingSeconds = Math.ceil((cooldownTime - (now - lastPlayed)) / 1000);
        return api.sendMessage(`üïí B·∫°n c·∫ßn ƒë·ª£i ${remainingSeconds} gi√¢y n·ªØa m·ªõi ƒë∆∞·ª£c ch∆°i ti·∫øp.`, threadID, messageID);
    }

    // L·ª±a ch·ªçn ng·∫´u nhi√™n c·ªßa bot
    const botChoices = ["k√©o", "b√∫a", "bao"];
    const botChoice = botChoices[Math.floor(Math.random() * botChoices.length)];

    // L·∫•y emoji t∆∞∆°ng ·ª©ng
    const playerEmoji = choicesEmoji[playerChoice];
    const botEmoji = choicesEmoji[botChoice];

    let resultMsg = `B·∫°n ra: ${playerEmoji} ${playerChoice.toUpperCase()}\nBot ra: ${botEmoji} ${botChoice.toUpperCase()}\n\n`;

    if (playerChoice === botChoice) {
        resultMsg += "ü§ù H√íA! B·∫°n kh√¥ng m·∫•t ti·ªÅn v√† kh√¥ng nh·∫≠n th√™m ti·ªÅn.";
    } else if (
        (playerChoice === "k√©o" && botChoice === "bao") ||
        (playerChoice === "b√∫a" && botChoice === "k√©o") ||
        (playerChoice === "bao" && botChoice === "b√∫a")
    ) {
        await Currencies.increaseMoney(senderID, betAmount);
        resultMsg += `üéâ CH√öC M·ª™NG! B·∫°n TH·∫ÆNG v√† nh·∫≠n ƒë∆∞·ª£c +${betAmount} xu!`;
    } else {
        await Currencies.decreaseMoney(senderID, betAmount);
        resultMsg += `üíî TI·∫æC QU√Å! B·∫°n THUA v√† b·ªã tr·ª´ -${betAmount} xu.`;
    }

    cooldowns.set(senderID, now);

    return api.sendMessage(resultMsg, threadID, messageID);
};