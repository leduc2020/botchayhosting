const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');
const crypto = require('crypto');
const cron = require('node-cron');

const RENT_DATA_PATH = path.join(__dirname, '/data/thuebot.json');
const RENT_KEY_PATH = path.join(__dirname, '/data/keys.json');
const setNameCheckPath = path.join(__dirname, '/data/setnamecheck.json');
const TIMEZONE = 'Asia/Ho_Chi_Minh';

let setNameCheck = fs.existsSync(setNameCheckPath) ? JSON.parse(fs.readFileSync(setNameCheckPath, 'utf8')) : {};
let data = fs.existsSync(RENT_DATA_PATH) ? JSON.parse(fs.readFileSync(RENT_DATA_PATH, 'utf8')) : [];
let keys = fs.existsSync(RENT_KEY_PATH) ? JSON.parse(fs.readFileSync(RENT_KEY_PATH, 'utf8')) : {};

const saveData = () => fs.writeFileSync(RENT_DATA_PATH, JSON.stringify(data, null, 2), 'utf8');
const saveKeys = () => fs.writeFileSync(RENT_KEY_PATH, JSON.stringify(keys, null, 2), 'utf8');
const formatDate = input => input.split('/').reverse().join('/');
const isInvalidDate = date => isNaN(new Date(date).getTime());

const generateKey = () => {
    const randomString = crypto.randomBytes(6).toString('hex').slice(0, 6);
    return `¬ÆÔ∏è_chicken_üîë_${randomString}_üáªüá≥2024`.toLowerCase();
};

async function updateThreadIds() {
    console.log('C·∫≠p nh·∫≠t th√¥ng tin nh√≥m');
    try {
        for (const entry of data) {
            try {
                const threadInfo = await global.client.api.getThreadInfo(entry.t_id);
                if (threadInfo) {
                    entry.t_id = threadInfo.threadID;
                }
            } catch (error) {
                console.error(`L·ªói khi l·∫•y th√¥ng tin nh√≥m ${entry.t_id}:`, error);
            }
        }
        saveData();
    } catch (error) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin nh√≥m:', error);
    }
}

async function updateGroupNames() {
    console.log('B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t t√™n bot');
    try {
        const notificationMessage = '‚úÖ Qu√° tr√¨nh c·∫≠p nh·∫≠t l·∫°i t√™n c·ªßa bot s·∫Ω di·ªÖn ra sau v√†i ph√∫t';
        for (const entry of data) {
            const { t_id } = entry;
            try {
                await global.client.api.sendMessage(notificationMessage, t_id);
            } catch (error) {
                console.error(`L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn nh√≥m ${t_id}:`, error);
            }
        }

        await updateThreadIds();

        for (const entry of data) {
            const { t_id, time_end } = entry;
            const currentDate = moment().tz(TIMEZONE);
            const endDate = moment(time_end, 'DD/MM/YYYY');
            const daysRemaining = endDate.diff(currentDate, 'days');

            let botName;
            if (daysRemaining <= 0) {
                botName = `„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME} || HSD: ${time_end}|| ƒê√£ h·∫øt h·∫°n`;
            } else if (daysRemaining <= 3) {
                botName = `„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME} || ‚ö†Ô∏èH·∫°n s·ª≠ d·ª•ng c√≤n ${daysRemaining} ng√†y `;
            } else {
                botName = `„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME} || ‚úÖH·∫°n s·ª≠ d·ª•ng c√≤n: ${daysRemaining} ng√†y`;
            }

            
            

            try {
                console.log(`C·∫≠p nh·∫≠t nickname cho nh√≥m ${t_id} th√†nh "${botName}"`);
                const currentUserId = await global.client.api.getCurrentUserID();
                if (!currentUserId) {
                    console.error(`Kh√¥ng th·ªÉ l·∫•y ID ng∆∞·ªùi d√πng hi·ªán t·∫°i.`);
                    continue;
                }

                await global.client.api.changeNickname(botName, t_id, currentUserId);
                setNameCheck[t_id] = true;
                console.log(`ƒê√£ c·∫≠p nh·∫≠t nickname cho nh√≥m ${t_id} v·ªõi "${botName}"`);
            } catch (error) {
                console.error(`L·ªói khi c·∫≠p nh·∫≠t nickname cho nh√≥m ${t_id}:`, error);
            }
        }

        fs.writeFileSync(setNameCheckPath, JSON.stringify(setNameCheck, null, 2), 'utf8');
    } catch (error) {
        console.error('L·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t t√™n bot:', error);
    }
}

async function cleanupAllKeys() {
    console.log('B·∫Øt ƒë·∫ßu x√≥a t·∫•t c·∫£ c√°c key');
    try {
        keys = {}; // X√≥a t·∫•t c·∫£ c√°c key
        fs.writeFileSync(RENT_KEY_PATH, JSON.stringify(keys, null, 2), 'utf8');
        console.log('ƒê√£ x√≥a t·∫•t c·∫£ c√°c key');
    } catch (error) {
        console.error('L·ªói trong qu√° tr√¨nh x√≥a key:', error);
    }
}

module.exports.config = {
    name: 'rent',
    version: '1.7.0',
    hasPermssion: 0,
    credits: 'DC-Nam & DongDev source l·∫°i & vdang mod key',
    description: "H·ªá Th·ªëng",
    commandCategory: 'Admin',
    usePrefix: false,
    usage: '[]',
    cooldowns: 1
};

module.exports.run = async function (o) {
    const send = (msg, callback) => o.api.sendMessage(msg, o.event.threadID, callback, o.event.messageID);
    const prefix = global.config.PREFIX;

    if (global.config.ADMINBOT[0] !== o.event.senderID) {
    return send(`‚ö†Ô∏è Ch·ªâ Admin ch√≠nh m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng!`);
}


    switch (o.args[0]) {
        case 'add':
            if (!o.args[1]) return send(`‚ùé D√πng ${prefix}${this.config.name} add + reply tin nh·∫Øn ng∆∞·ªùi c·∫ßn thu√™`);
            let userId = o.event.senderID;
            if (o.event.type === "message_reply") {
                userId = o.event.messageReply.senderID;
            } else if (Object.keys(o.event.mentions).length > 0) {
                userId = Object.keys(o.event.mentions)[0];
            }
            let t_id = o.event.threadID;
            let time_start = moment.tz(TIMEZONE).format('DD/MM/YYYY');
            let time_end = o.args[1];
            if (o.args.length === 4 && !isNaN(o.args[1]) && !isNaN(o.args[2]) && o.args[3].match(/\d{1,2}\/\d{1,2}\/\d{4}/)) {
                t_id = o.args[1];
                userId = o.args[2];
                time_end = o.args[3];
            } else if (o.args.length === 3 && !isNaN(o.args[1]) && o.args[2].match(/\d{1,2}\/\d{1,2}\/\d{4}/)) {
                userId = o.args[1];
                time_end = o.args[2];
            }
            if (isNaN(userId) || isNaN(t_id) || isInvalidDate(formatDate(time_start)) || isInvalidDate(formatDate(time_end)))
                return send(`‚ùé ID ho·∫∑c Th·ªùi Gian Kh√¥ng H·ª£p L·ªá!`);
            const existingData = data.find(entry => entry.t_id === t_id);
            if (existingData) {
                return send(`‚ö†Ô∏è Nh√≥m n√†y ƒë√£ c√≥ d·ªØ li·ªáu thu√™ bot!`);
            }
            data.push({ t_id, id: userId, time_start, time_end });
            send(`‚úÖ ƒê√£ th√™m d·ªØ li·ªáu thu√™ bot cho nh√≥m!`);
            break;

        case 'list':
            if (data.length === 0) {
                send('‚ùé Kh√¥ng c√≥ nh√≥m n√†o ƒëang thu√™ bot!');
                break;
            }
            send(`[ DANH S√ÅCH THU√ä BOT ]\n\n${data.map((item, i) => 
                `${i + 1}. ${global.data.userName.get(item.id)}\n‚©∫ T√¨nh tr·∫°ng: ${new Date(formatDate(item.time_end)).getTime() >= Date.now() ? '‚úÖ' : '‚ùé'}\n‚©∫ Nh√≥m: ${(global.data.threadInfo.get(item.t_id) || {}).threadName}`
            ).join('\n\n')}\n\n‚©∫ Reply [ del | out | giahan ] + stt ƒë·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông.`, (err, res) => {
                res.name = exports.config.name;
                res.event = o.event;
                res.data = data;
                global.client.handleReply.push({ ...res, type: 'list' });
            });
            break;
            
        case 'info':
            const rentInfo = data.find(entry => entry.t_id === o.event.threadID); 
            if (!rentInfo) {
                send(`‚ùé Kh√¥ng c√≥ d·ªØ li·ªáu thu√™ bot cho nh√≥m n√†y`); 
            } else {
                const keyEntry = Object.entries(keys).find(([key, info]) => info.groupId === rentInfo.t_id) || [null, {}];
                const [key, keyDetails] = keyEntry;
                
                let keyInfoDisplay = 'Ch∆∞a c√≥ key';
                if (key) {
                    const daysSinceStart = Math.floor((Date.now() - new Date(rentInfo.time_start).getTime()) / (1000 * 60 * 60 * 24));
                    const daysRemaining = keyDetails.days - daysSinceStart;
                    keyInfoDisplay = `Key b·∫°n ƒëang s·ª≠ d·ª•ng l√†: ${key}`;
                }

                const daysRemainingForRent = Math.floor((new Date(formatDate(rentInfo.time_end)).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
                const hoursRemainingForRent = Math.floor((new Date(formatDate(rentInfo.time_end)).getTime() - Date.now()) / (1000 * 60 * 60) % 24);
                
                send(`[ Th√¥ng Tin Thu√™ Bot ]\n\nüë§ Ng∆∞·ªùi thu√™: ${global.data.userName.get(rentInfo.id)}\nüîó Link facebook: https://www.facebook.com/profile.php?id=${rentInfo.id}\nüóìÔ∏è Ng√†y Thu√™: ${rentInfo.time_start}\n‚åõ H·∫øt H·∫°n: ${rentInfo.time_end}\nüîë ${keyInfoDisplay}\n\n‚©∫ C√≤n ${daysRemainingForRent} ng√†y ${hoursRemainingForRent} gi·ªù l√† h·∫øt h·∫°n`, (err, res) => {
                    res.name = exports.config.name;
                    res.event = o.event;
                    res.data = data;
                    global.client.handleReply.push({ ...res, type: 'info' });
                });
            } 
            break;

        case 'newkey':
            const groupId = o.event.threadID;
            const days = parseInt(o.args[1], 10) || 31;

            if (isNaN(days) || days <= 0) {
                return send(`‚ùé S·ªë ng√†y kh√¥ng h·ª£p l·ªá!`);
            }

            const generatedKey = generateKey();
            const expiryDate = moment.tz(TIMEZONE).add(days, 'days').format('DD/MM/YYYY');
            keys[generatedKey] = {
                days: days,
                used: false,
                groupId: null
            };

            send(`üîë New key: ${generatedKey}\nüìÜ Th·ªùi h·∫°n Key Th√™m Cho Nh√≥m (${days} ng√†y)`);
            saveKeys();
            break;

        case 'check':
    if (Object.keys(keys).length === 0) {
        send('‚ùé Kh√¥ng c√≥ key n√†o ƒë∆∞·ª£c t·∫°o!');
        break;
    }
    
    const now = moment(); 
    send(`[ DANH S√ÅCH KEY ]\n\n${Object.entries(keys).map(([key, info], i) => {
        const expiryDate = moment().add(info.days, 'days').format('DD/MM/YYYY');
        const keyStartDate = moment(); 
        const daysRemaining = info.days - Math.floor(moment().diff(keyStartDate, 'days'));
        const displayDaysRemaining = daysRemaining < 0 ? 0 : daysRemaining;
        return `${i + 1}. Key: ${key}\nüóìÔ∏è Th·ªùi gian khi s·ª≠ d·ª•ng key: ${displayDaysRemaining} ng√†y\nüìù T√¨nh Tr·∫°ng: ${info.used ? '‚úÖ ƒê√£ s·ª≠ d·ª•ng' : '‚ùé Ch∆∞a s·ª≠ d·ª•ng'}\nüìé ID Nh√≥m: ${info.groupId || 'Ch∆∞a s·ª≠ d·ª•ng'}\n`;
    }).join('\n\n')}\n\n\n‚©∫ T·ª± ƒê·ªông L√†m M·ªõi V√†o 00:00 H√†ng Ng√†y!`);
    break;
            
        default:
            send(`‚©∫ rent add: th√™m nh√≥m v√†o danh s√°ch \n‚©∫ rent info: xem th√¥ng tin thu√™ bot c·ªßa nh√≥m \n‚©∫ rent check: xem danh s√°ch key \n‚©∫ rent list: xem danh s√°ch thu√™`);
            break;
    }
    saveData();
};

module.exports.handleEvent = async function (o) {
    const send = (msg, callback) => o.api.sendMessage(msg, o.event.threadID, callback, o.event.messageID);
    const message = o.event.body.toLowerCase();
    const groupId = o.event.threadID;
    const keyMatch = message.match(/¬ÆÔ∏è_chicken_üîë_[0-9a-fA-F]{6}_üáªüá≥2024/);

    if (keyMatch) {
        const key = keyMatch[0];

        // Ki·ªÉm tra xem ng∆∞·ªùi g·ª≠i c√≥ ph·∫£i l√† bot kh√¥ng
        if (o.event.senderID === o.api.getCurrentUserID()) {
            console.log("Bot ƒë√£ g·ª≠i tin nh·∫Øn, kh√¥ng x·ª≠ l√Ω.");
            return;
        }

        if (keys.hasOwnProperty(key)) {
            const keyInfo = keys[key];
            if (!keyInfo.used) {
                const existingData = data.find(entry => entry.t_id === groupId);
                const time_start = moment().format('DD/MM/YYYY');

                let time_end;
                let daysAdded = keyInfo.days;
                let daysRemaining;

                if (existingData) {
                    const oldEndDate = moment(existingData.time_end, 'DD/MM/YYYY');
                    time_end = oldEndDate.add(daysAdded, 'days').format('DD/MM/YYYY');
                    const daysDiff = moment(time_end, 'DD/MM/YYYY').diff(moment(existingData.time_end, 'DD/MM/YYYY'), 'days');

                    o.api.shareContact(`üîë Key h·ª£p l·ªá!\n- ƒê√£ gia h·∫°n ${daysAdded} ng√†y.\n- Ng√†y k·∫øt th√∫c tr∆∞·ªõc: ${existingData.time_end}\n- Ng√†y k·∫øt th√∫c m·ªõi: ${time_end}\n- S·ªë ng√†y gia h·∫°n th√™m: ${daysDiff} ng√†y\n- Li√™n h·ªá admin ${global.config.ADMIN_NAME} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£`, global.config.ADMINBOT[0], o.event.threadID);

                    existingData.time_end = time_end;
                } else {
                    time_end = moment().add(daysAdded, 'days').format('DD/MM/YYYY');
                    daysRemaining = moment(time_end, 'DD/MM/YYYY').diff(moment(), 'days');

                    o.api.shareContact(`üîë Key h·ª£p l·ªá!\n- Th·ªùi gian thu√™: ${daysAdded} ng√†y\n- Ng√†y k·∫øt th√∫c: ${time_end}\nM·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá admin ${global.config.ADMIN_NAME} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£`, global.config.ADMINBOT[0], o.event.threadID);

                    data.push({ t_id: groupId, id: o.event.senderID, time_start, time_end });
                }
                const botName = `„Äé ${global.config.PREFIX} „Äè ‚™º ${global.config.BOTNAME} || HSD: ${time_end}`;
                await o.api.changeNickname(botName, groupId, o.api.getCurrentUserID());

                keyInfo.used = true;
                keyInfo.groupId = groupId;
                saveKeys();
                saveData();
            } else {
                o.api.shareContact(`üîí Key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!\nVui l√≤ng li√™n h·ªá admin ${global.config.ADMIN_NAME} ƒë·ªÉ l·∫•y key m·ªõi`, global.config.ADMINBOT[0], o.event.threadID);
            }
        } else {
            o.api.shareContact(`Nh√≥m b·∫°n ƒë√£ nh·∫≠p key h·ª£p l·ªá v√† ƒë∆∞·ª£c ph√©p s·ª≠ d·ª•ng bot.\nM·ªçi th·∫Øc m·∫Øc xin vui l√≤ng li√™n h·ªá admin ${global.config.ADMIN_NAME} ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£!`, global.config.ADMINBOT[0], o.event.threadID);
        }
    }
};

module.exports.handleReply = async function (o) {
    const send = (msg, callback) => o.api.sendMessage(msg, o.event.threadID, callback, o.event.messageID);
    const { type, data } = o.handleReply;
    const args = o.event.body.split(' ');
    const command = args.shift().toLowerCase();
    const index = parseInt(command);

    if (o.event.senderID === o.api.getCurrentUserID()) {
        console.log("Bot ƒë√£ g·ª≠i tin nh·∫Øn, kh√¥ng x·ª≠ l√Ω.");
        return;
    }

    if (isNaN(index)) {
        switch (command) {
            case 'del':
                args.sort((a, b) => b - a).forEach($ => {
                    const groupId = data[$ - 1].t_id;
                    data.splice($ - 1, 1);
                });
                send('‚úÖ ƒê√£ x√≥a th√†nh c√¥ng!');
                break;
            case 'out':
                for (const i of args) {
                    await o.api.removeUserFromGroup(o.api.getCurrentUserID(), data[i - 1].t_id);
                }
                send('‚úÖ ƒê√£ out nh√≥m theo y√™u c·∫ßu');
                break;
            case 'giahan':
                const [STT, time_end] = args;
                if (isInvalidDate(formatDate(time_end))) return send('‚ùé Th·ªùi Gian Kh√¥ng H·ª£p L·ªá!');
                if (!data[STT - 1]) return send('‚ùé S·ªë th·ª© t·ª± kh√¥ng t·ªìn t·∫°i');
                const time_start = moment.tz(TIMEZONE).format('DD/MM/YYYY');
                Object.assign(data[STT - 1], { time_start, time_end });
                send('‚úÖ Gia h·∫°n nh√≥m th√†nh c√¥ng!');
                break;
            default:
                send('‚ùé L·ªánh kh√¥ng h·ª£p l·ªá!');
                break;
        }
    } else {
        if (type === 'list') {
            if (index < 1 || index > data.length) {
                return send('‚ùé S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!');
            }
            const entry = data[index - 1];
            send(`[ Th√¥ng Tin Thu√™ Bot ]\n\nüë§ Ng∆∞·ªùi thu√™: ${global.data.userName.get(entry.id)}\nüîó Link facebook: https://www.facebook.com/profile.php?id=${entry.id}\nüóìÔ∏è Ng√†y Thu√™: ${entry.time_start}\n‚åõ H·∫øt H·∫°n: ${entry.time_end}\n\n‚©∫ C√≤n ${Math.floor((new Date(formatDate(entry.time_end)).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} ng√†y ${Math.floor((new Date(formatDate(entry.time_end)).getTime() - Date.now()) / (1000 * 60 * 60) % 24)} gi·ªù l√† h·∫øt h·∫°n`);
        }
    }
    saveData();
    saveKeys();
};

cron.schedule('01 00 * * *', async () => {
    console.log('c·∫≠p nh·∫≠t name bot theo th·ªùi h·∫°n thu√™ b·∫Øt ƒë·∫ßu');
    await updateGroupNames();
    await cleanupAllKeys();
}, {
    scheduled: true,
    timezone: TIMEZONE
});
